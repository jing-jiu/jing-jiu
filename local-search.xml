<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Front End Review</title>
    <link href="/jing-jiu/2022/10/10/review/Front%20End%20Review/"/>
    <url>/jing-jiu/2022/10/10/review/Front%20End%20Review/</url>
    
    <content type="html"><![CDATA[<h1 id="基础回顾"><a href="#基础回顾" class="headerlink" title="基础回顾"></a>基础回顾</h1><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><ol><li><p><a href="https://juejin.cn/post/6844903968292749319">js事件循环</a></p></li><li><p>Promise静态方法</p><ol><li><strong>race</strong> 有一个状态敲定就返回<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">functionrace</span>(promises) &#123;<br><span class="hljs-title function_">returnnewPromise</span>(<span class="hljs-function">(<span class="hljs-params">re, rj</span>) =&gt;</span> &#123;<br>        promises.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(item).<span class="hljs-title function_">then</span>(re, rj)<br>        &#125;)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li>all 所有promise都返回成功或者有一个失败<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">functionall</span>(arr) &#123;<br><span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span><br><span class="hljs-keyword">const</span> res = []<br><span class="hljs-title function_">returnnewPromise</span>(<span class="hljs-function">(<span class="hljs-params">re, rj</span>) =&gt;</span> &#123;<br>        arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, i</span>) =&gt;</span> &#123;<br>            count++<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(item).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> &#123;<br>                res[i] = val<br><span class="hljs-keyword">if</span> (res.<span class="hljs-property">length</span> === count) <span class="hljs-title function_">re</span>(res)<br>            &#125;, rj)<br>        &#125;);<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><strong>allSettled</strong> 所有状态都敲定<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">functionallSettled</span>(promises) &#123;<br><span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span><br><span class="hljs-keyword">const</span> res = []<br><span class="hljs-title function_">returnnewPromise</span>(<span class="hljs-function">(<span class="hljs-params">re, rj</span>) =&gt;</span> &#123;<br>        arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, i</span>) =&gt;</span> &#123;<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(item).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> &#123;<br>                count++<br>                res[i] = &#123; <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;fulfilled&#x27;</span>, <span class="hljs-attr">val</span>: val &#125;<br><span class="hljs-keyword">if</span> (promises.<span class="hljs-property">length</span> === count) <span class="hljs-title function_">re</span>(res)<br>            &#125;, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>                count++<br>                res[i] = &#123; <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;rejected&#x27;</span>, <span class="hljs-attr">err</span>: err &#125;<br><span class="hljs-keyword">if</span> (promises.<span class="hljs-property">length</span> === count) <span class="hljs-title function_">rj</span>(res)<br>            &#125;)<br>        &#125;);<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><strong>any</strong>  返回第一个结果是成功的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">functionany</span>(promises) &#123;<br><span class="hljs-keyword">let</span> arr = [],<br>        count = <span class="hljs-number">0</span><br><span class="hljs-title function_">returnnewPromise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        promises.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, i</span>) =&gt;</span> &#123;<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(item).<span class="hljs-title function_">then</span>(resolve, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>                arr[i] = &#123; <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;rejected&#x27;</span>, <span class="hljs-attr">val</span>: err &#125;<br>                count += <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> (count === promises.<span class="hljs-property">length</span>) <span class="hljs-title function_">reject</span>(<span class="hljs-title function_">newError</span>(<span class="hljs-string">&#x27;没有promise成功&#x27;</span>))<br>            &#125;)<br>        &#125;)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>链式调用</p><ol><li>JQuery形式  把当前的实例返回出去<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> user = <span class="hljs-keyword">function</span> (<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;;<br>user.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;姓名是&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>&#125;;<br>user.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getAge</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;年龄是&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>&#125;;<br><span class="hljs-keyword">var</span> user1 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">user</span>(<span class="hljs-string">&quot;zjf&quot;</span>, <span class="hljs-number">22</span>);<br>user1.<span class="hljs-title function_">getAge</span>().<span class="hljs-title function_">getName</span>()Ï<br></code></pre></td></tr></table></figure></li><li>Koa形式 中间件 通过next调用下一个<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">compose</span>(<span class="hljs-params">middlewares</span>) &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">ctx</span>) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-number">0</span>);<br>           <span class="hljs-keyword">function</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">idx</span>) &#123;<br>               <span class="hljs-keyword">const</span> fn = middlewares[idx];<br>               <span class="hljs-keyword">if</span> (!fn) &#123;<br>                   <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>();<br>               &#125;<br>               <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<br>                   <span class="hljs-title function_">fn</span>(ctx, <span class="hljs-keyword">function</span> <span class="hljs-title function_">next</span>(<span class="hljs-params"></span>) &#123;<br>                       <span class="hljs-keyword">return</span> <span class="hljs-title function_">dispatch</span>(idx + <span class="hljs-number">1</span>);<br>                   &#125;)<br>               );<br>           &#125;<br>       &#125;;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p><strong>instanceof</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">new_instance_of</span>(<span class="hljs-params">leftVaule, rightVaule</span>) &#123;<br>    <span class="hljs-keyword">let</span> rightProto = rightVaule.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>; <span class="hljs-comment">// 取右表达式的 prototype 值</span><br>    leftVaule = leftVaule.<span class="hljs-property">__proto__</span>; <span class="hljs-comment">// 取左表达式的__proto__值</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">if</span> (leftVaule === <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (leftVaule === rightProto) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        leftVaule = leftVaule.<span class="hljs-property">__proto__</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>new</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">newFn</span>(<span class="hljs-params">fn, ...args</span>) &#123;<br>    <span class="hljs-keyword">let</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    obj.<span class="hljs-property">__proto__</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(fn.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br>    <span class="hljs-keyword">const</span> res = fn.<span class="hljs-title function_">apply</span>(obj, args)<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> res === <span class="hljs-string">&quot;object&quot;</span> ? res : obj<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>call、bind、apply</p></li><li><p>Event Bus</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EventBus</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventObj</span> = &#123;&#125;; <span class="hljs-comment">// 用于存储所有订阅事件</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">callbcakId</span> = <span class="hljs-number">0</span>; <span class="hljs-comment">// 每个函数的ID</span><br>    &#125;<br>    <span class="hljs-comment">// 订阅事件,类似监听事件$on(&#x27;key&#x27;,()=&gt;&#123;&#125;)</span><br>    $on(name, callbcak) &#123;<br>        <span class="hljs-comment">// 判断是否存储过</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">eventObj</span>[name]) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventObj</span>[name] = &#123;&#125;;<br>        &#125;<br>        <span class="hljs-comment">// 定义当前回调函数id</span><br>        <span class="hljs-keyword">const</span> id = <span class="hljs-variable language_">this</span>.<span class="hljs-property">callbcakId</span>++;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventObj</span>[name][id] = callbcak; <span class="hljs-comment">// 以键值对的形式存储回调函数</span><br>        <span class="hljs-keyword">return</span> id; <span class="hljs-comment">// 将id返回出去，可以利用该id取消订阅</span><br>    &#125;<br>    <span class="hljs-comment">// 发布事件,类似于触发事件$emit(&#x27;key&#x27;)</span><br>    $emit(name, ...args) &#123;<br>        <span class="hljs-comment">// 获取存储的事件回调函数数组</span><br>        <span class="hljs-keyword">const</span> eventList = <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventObj</span>[name];<br>        <span class="hljs-comment">// 执行所有回调函数且传入参数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> id <span class="hljs-keyword">in</span> eventList) &#123;<br>            eventList[id](...args);<br>            <span class="hljs-comment">// 如果是订阅一次，则删除</span><br>            <span class="hljs-keyword">if</span> (id.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;D&#x27;</span>) !== -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">delete</span> eventList[id];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 取消订阅函数，类似于$off(&#x27;key1&#x27;, id)</span><br>    $off(name, id) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">eventObj</span>)<br>        <span class="hljs-comment">// 删除存储在事件列表中的该事件</span><br>        <span class="hljs-keyword">delete</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventObj</span>[name][id];<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;id&#125;</span>id事件已被取消订阅`</span>)<br>        <span class="hljs-comment">// 如果这是最后一个订阅者，则删除整个对象</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">eventObj</span>[name]).<span class="hljs-property">length</span>) &#123;<br>            <span class="hljs-keyword">delete</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventObj</span>[name];<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 订阅事件，只会执行一次，为了方便，id上直接加上一个标识d</span><br>    $once(name, callbcak) &#123;<br>        <span class="hljs-comment">// 判断是否存储过</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">eventObj</span>[name]) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventObj</span>[name] = &#123;&#125;;<br>        &#125;<br>        <span class="hljs-comment">// 定义当前回调函数id,添加D则代表只执行一次</span><br>        <span class="hljs-keyword">const</span> id = <span class="hljs-string">&quot;D&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">callbcakId</span>++;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventObj</span>[name][id] = callbcak; <span class="hljs-comment">// 以键值对的形式存储回调函数</span><br>        <span class="hljs-keyword">return</span> id; <span class="hljs-comment">// 将id返回出去，可以利用该id取消订阅</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 初始化EventBus</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable constant_">EB</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventBus</span>();<br><br><span class="hljs-comment">// 订阅事件</span><br><span class="hljs-variable constant_">EB</span>.$on(<span class="hljs-string">&#x27;key1&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;A:&quot;</span>, name, age);<br>&#125;)<br><span class="hljs-variable constant_">EB</span>.$once(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;B:&quot;</span>, name, age);<br>&#125;)<br><span class="hljs-variable constant_">EB</span>.$on(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;C:&quot;</span>, name);<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p><strong>不可变对象</strong></p><ol><li>seal 会使对象的所有属性的<strong>configurable为</strong>false，但是仍然可以修改现有的属性，因为<strong>writable</strong>为true。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">author</span>: <span class="hljs-string">&quot;DevPoint&quot;</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptors</span>(obj));<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">  author: &#123;</span><br><span class="hljs-comment">    value: &#x27;DevPoint&#x27;,</span><br><span class="hljs-comment">    writable: true,</span><br><span class="hljs-comment">    enumerable: true,</span><br><span class="hljs-comment">   configurable: true</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">seal</span>(obj)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptors</span>(obj));<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">  author: &#123;</span><br><span class="hljs-comment">    value: &#x27;DevPoint&#x27;,</span><br><span class="hljs-comment">    writable: true,</span><br><span class="hljs-comment">    enumerable: true,</span><br><span class="hljs-comment">    configurable: false</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li><li>freeze 同理，使得<strong>writable，configurable</strong>均为false，使得其不可修改和扩展。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">author</span>: <span class="hljs-string">&quot;DevPoint&quot;</span> &#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(obj)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptors</span>(obj));<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">  author: &#123;</span><br><span class="hljs-comment">    value: &#x27;DevPoint&#x27;,</span><br><span class="hljs-comment">    writable: false,</span><br><span class="hljs-comment">    enumerable: true,</span><br><span class="hljs-comment">    configurable: false</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li><li>缺点 二者均只能监控第一层，对于有多层嵌套的对象，可以采用<strong>递归</strong>的方式进行封闭 &#x2F; 冻结。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> obj = &#123;<br>    <span class="hljs-attr">author</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;author&quot;</span>,<br>    &#125;,<br>&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(obj);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptors</span>(obj.<span class="hljs-property">author</span>));<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">  name: &#123;</span><br><span class="hljs-comment">    value: &#x27;author&#x27;,</span><br><span class="hljs-comment">   writable: true,</span><br><span class="hljs-comment">enumerable: true,</span><br><span class="hljs-comment">    configurable: true</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// deepSeal同理</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepFreeze</span>(<span class="hljs-params">object</span>) &#123;<br>    <span class="hljs-keyword">const</span> propsNames = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(object);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> name <span class="hljs-keyword">of</span> propsNames) &#123;<br>        <span class="hljs-keyword">const</span> value = object[name];<br>        <span class="hljs-keyword">if</span> (value &amp;&amp; <span class="hljs-keyword">typeof</span> value === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>            <span class="hljs-title function_">deepFreeze</span>(value);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(object);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p><a href="https://segmentfault.com/a/1190000039042550">闭包</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">fn, wait</span>) &#123;<br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">clearTimeout</span>(timer);<br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            fn.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, ...<span class="hljs-variable language_">arguments</span>);<br>        &#125;, wait);<br>    &#125;;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">fn, delay = <span class="hljs-number">500</span></span>) &#123;<br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!timer) &#123;<br>            timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args);<br>                timer = <span class="hljs-literal">null</span>;<br>            &#125;, delay);<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>defer async区别</p><ol><li>async js脚本的加载不会阻塞渲染，但是当js加载完成会立即运行，此时会阻塞html的渲染，而且多个async脚本的执行顺序不一致</li><li>defer与async类似，但是它会在html加载完成后才执行，且保证执行顺序。</li></ol></li><li><p>数组的filter、every、flat</p><ol><li><p>filter</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myFilter</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">fn, thisValue</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> fn !== <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;fn&#125;</span> 不是一个函数`</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ([<span class="hljs-literal">null</span>, <span class="hljs-literal">undefined</span>].<span class="hljs-title function_">includes</span>(<span class="hljs-variable language_">this</span>)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`this 是null 或者 undefined`</span>);<br>    &#125;<br>    <span class="hljs-keyword">const</span> arr = <span class="hljs-title class_">Object</span>(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-keyword">const</span> filterArr = []; <span class="hljs-comment">// 没有符合条件的返回空数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">const</span> res = fn.<span class="hljs-title function_">call</span>(thisValue, arr[i], i, arr);<br>        <span class="hljs-keyword">if</span> (res) &#123;<br>            filterArr.<span class="hljs-title function_">push</span>(arr[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> filterArr;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>every<strong>如果所有元素都通过检测返回 true，否则返回 false</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myEvery</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">fn, thisValue</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> fn !== <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;fn&#125;</span> 不是一个函数`</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ([<span class="hljs-literal">null</span>, <span class="hljs-literal">undefined</span>].<span class="hljs-title function_">includes</span>(<span class="hljs-variable language_">this</span>)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`this 是null 或者 undefined`</span>);<br>    &#125;<br>    <span class="hljs-keyword">const</span> arr = <span class="hljs-title class_">Object</span>(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">const</span> res = fn.<span class="hljs-title function_">call</span>(thisValue, arr[i], i, arr);<br>        <span class="hljs-keyword">if</span> (!res) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>flat 数组扁平化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">Myflat</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">dep = <span class="hljs-number">1</span></span>) &#123;<br>    <span class="hljs-keyword">let</span> res = [];<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(item) &amp;&amp; dep &gt; <span class="hljs-number">0</span>) &#123;<br>            dep--;<br>            res = res.<span class="hljs-title function_">concat</span>(item.<span class="hljs-title class_">Myflat</span>(dep));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            res.<span class="hljs-title function_">push</span>(item);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ol></li><li><p><a href="https://juejin.cn/post/7077430645844082702">Map和Set,Object的区别</a></p></li><li><p>JS场景手写题目</p><ol><li><p>数组转树</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 把平铺的数组结构转成树形结构</span><br><span class="hljs-comment">        */</span><br><span class="hljs-keyword">const</span> arr = [<br>            &#123; <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;29&#x27;</span>, <span class="hljs-string">&#x27;pid&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;总裁办&#x27;</span> &#125;,<br>            &#123; <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;2c&#x27;</span>, <span class="hljs-string">&#x27;pid&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;财务部&#x27;</span> &#125;,<br>            &#123; <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;2d&#x27;</span>, <span class="hljs-string">&#x27;pid&#x27;</span>: <span class="hljs-string">&#x27;2c&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;财务核算部&#x27;</span> &#125;,<br>            &#123; <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;2f&#x27;</span>, <span class="hljs-string">&#x27;pid&#x27;</span>: <span class="hljs-string">&#x27;2c&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;薪资管理部&#x27;</span> &#125;,<br>            &#123; <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;d2&#x27;</span>, <span class="hljs-string">&#x27;pid&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;技术部&#x27;</span> &#125;,<br>            &#123; <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;d3&#x27;</span>, <span class="hljs-string">&#x27;pid&#x27;</span>: <span class="hljs-string">&#x27;d2&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Java研发部&#x27;</span> &#125;<br>        ]<br><br><span class="hljs-title function_">functiontranListToTreeData</span>(list) &#123;<br><span class="hljs-comment">// 1. 定义两个中间变量</span><br><span class="hljs-keyword">const</span> treeList = [],  <span class="hljs-comment">// 最终要产出的树状数据的数组</span><br>                map = &#123;&#125;        <span class="hljs-comment">// 存储映射关系</span><br><span class="hljs-comment">// 2. 建立一个映射关系，并给每个元素补充children属性.</span><br><span class="hljs-comment">// 映射关系: 目的是让我们能通过id快速找到对应的元素</span><br><span class="hljs-comment">// 补充children：让后边的计算更方便</span><br>            list.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (!item.<span class="hljs-property">children</span>) &#123;<br>                    item.<span class="hljs-property">children</span> = []<br>                &#125;<br>                map[item.<span class="hljs-property">id</span>] = item<br>            &#125;)<br><span class="hljs-comment">//  &#123;</span><br><span class="hljs-comment">//    &quot;29&quot;: &#123; &#x27;id&#x27;: &#x27;29&#x27;, &#x27;pid&#x27;: &#x27;&#x27;,     &#x27;name&#x27;: &#x27;总裁办&#x27;, children:[] &#125;,</span><br><span class="hljs-comment">//    &#x27;2c&#x27;: &#123; &#x27;id&#x27;: &#x27;2c&#x27;, &#x27;pid&#x27;: &#x27;&#x27;,     &#x27;name&#x27;: &#x27;财务部&#x27;, children:[] &#125;,</span><br><span class="hljs-comment">//    &#x27;2d&#x27;: &#123; &#x27;id&#x27;: &#x27;2d&#x27;, &#x27;pid&#x27;: &#x27;2c&#x27;, &#x27;name&#x27;: &#x27;财务核算部&#x27;, children:[]&#125;,</span><br><span class="hljs-comment">//    &#x27;2f&#x27;: &#123; &#x27;id&#x27;: &#x27;2f&#x27;, &#x27;pid&#x27;: &#x27;2c&#x27;, &#x27;name&#x27;: &#x27;薪资管理部&#x27;, children:[]&#125;,</span><br><span class="hljs-comment">//    &#x27;d2&#x27;: &#123; &#x27;id&#x27;: &#x27;d2&#x27;, &#x27;pid&#x27;: &#x27;&#x27;,     &#x27;name&#x27;: &#x27;技术部&#x27;, children:[]&#125;,</span><br><span class="hljs-comment">//    &#x27;d3&#x27;: &#123; &#x27;id&#x27;: &#x27;d3&#x27;, &#x27;pid&#x27;: &#x27;d2&#x27;, &#x27;name&#x27;: &#x27;Java研发部&#x27;, children:[]&#125;</span><br><span class="hljs-comment">//  &#125;</span><br><br><span class="hljs-comment">// 3. 循环</span><br>            list.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br><span class="hljs-comment">// 对于每一个元素来说，先找它的上级</span><br><span class="hljs-comment">//    如果能找到，说明它有上级，则要把它添加到上级的children中去</span><br><span class="hljs-comment">//    如果找不到，说明它没有上级，直接添加到 tree3List</span><br><span class="hljs-keyword">const</span> parent = map[item.<span class="hljs-property">pid</span>]<br><span class="hljs-keyword">if</span> (parent) &#123;<br>                    parent.<span class="hljs-property">children</span>.<span class="hljs-title function_">push</span>(item)<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    treeList.<span class="hljs-title function_">push</span>(item)<br>                &#125;<br>            &#125;)<br><span class="hljs-comment">// 4. 返回出去</span><br><span class="hljs-keyword">return</span> treeList<br>        &#125;<br><br><span class="hljs-keyword">const</span> treeList = <span class="hljs-title function_">tranListToTreeData</span>(arr)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(treeList);<br></code></pre></td></tr></table></figure></li><li><p>数组洗牌</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">randRom</span>(<span class="hljs-params">arr</span>) &#123;<br><span class="hljs-keyword">var</span> res = []<br> <span class="hljs-keyword">while</span> (arr.<span class="hljs-property">length</span>&gt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">let</span> index = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*arr.<span class="hljs-property">length</span>)<br>     res.<span class="hljs-title function_">push</span>(arr[index])<br>     arr.<span class="hljs-title function_">splice</span>(index,<span class="hljs-number">1</span>)<br> &#125;<br> <span class="hljs-keyword">return</span> res<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">randRom</span>(arr))<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">randRom3</span>(<span class="hljs-params">arr</span>)&#123;<br>    arr.<span class="hljs-title function_">sort</span>(<span class="hljs-number">0.5</span> - <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>())<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><a href="https://juejin.cn/post/7041515221625602055">Promise并发控制</a></p></li></ol></li><li><p>compose</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params">fn1</span>) &#123;<br>    <span class="hljs-keyword">return</span> fn1 + <span class="hljs-string">&quot;fn2&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn3</span>(<span class="hljs-params">fn2</span>) &#123;<br>    <span class="hljs-keyword">return</span> fn2 + <span class="hljs-string">&quot;fn3&quot;</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">componse</span>(<span class="hljs-params">...fns</span>) &#123;<br>    <span class="hljs-keyword">const</span> lastFn = fns.<span class="hljs-title function_">pop</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-keyword">const</span> res = <span class="hljs-title function_">lastFn</span>(...args);<br>        <span class="hljs-keyword">return</span> fns.<span class="hljs-title function_">reduceRight</span>(<span class="hljs-function">(<span class="hljs-params">pre, curr</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">curr</span>(pre);<br>        &#125;, res);<br>    &#125;;<br>&#125;<br><span class="hljs-keyword">let</span> res = <span class="hljs-title function_">componse</span>(fn3, fn2, fn1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">res</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure></li><li><p>Proxy拦截Map，Set</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> targetMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br><span class="hljs-keyword">const</span> interceptor = &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">key</span>) &#123;<br>        <span class="hljs-keyword">const</span> target = targetMap.<span class="hljs-title function_">get</span>(<span class="hljs-variable language_">this</span>);<br>        <span class="hljs-keyword">return</span> target.<span class="hljs-title function_">get</span>(key);<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">key, value</span>) &#123;<br>        <span class="hljs-keyword">const</span> target = targetMap.<span class="hljs-title function_">get</span>(<span class="hljs-variable language_">this</span>);<br>        <span class="hljs-keyword">return</span> target.<span class="hljs-title function_">set</span>(key, value);<br>    &#125;,<br>    <span class="hljs-title function_">delete</span>(<span class="hljs-params">key</span>) &#123;<br>        <span class="hljs-keyword">const</span> target = targetMap.<span class="hljs-title function_">get</span>(<span class="hljs-variable language_">this</span>);<br>        <span class="hljs-keyword">return</span> target.<span class="hljs-title function_">delete</span>(key);<br>    &#125;,<br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createProxy</span>(<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(obj, &#123;<br>        <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key, receiver</span>) &#123;<br>            target = interceptor.<span class="hljs-title function_">hasOwnProperty</span>(key)<br>                ? interceptor<br>                : target;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, key, receiver);<br>        &#125;,<br>    &#125;);<br>    targetMap.<span class="hljs-title function_">set</span>(proxy, obj);<br>    <span class="hljs-keyword">return</span> proxy;<br>&#125;<br><span class="hljs-keyword">let</span> map = <span class="hljs-title function_">createProxy</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>());<br></code></pre></td></tr></table></figure></li><li><p>内存相关</p><ol><li>全局变量和被捕获变量（闭包）储存在堆中（全局中的基本类型的值是存在堆中，它的引用地址是存在全局执行上下文的栈内存中）。<ul><li><p>被捕获变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span> () &#123;<br>    <span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> string = <span class="hljs-string">&#x27;前端&#x27;</span>;<br>    <span class="hljs-keyword">let</span> bool = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">let</span> obj = &#123;<br>        <span class="hljs-attr">attr1</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">attr2</span>: <span class="hljs-string">&#x27;收割机&#x27;</span>,<br>        <span class="hljs-attr">attr3</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">attr4</span>: <span class="hljs-string">&#x27;something&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">log</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num, string, bool, obj);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=YTMwYTFkZDQwMjI0ZTYyZjJmNGU3ZmNjNTA0NWNlNDhfd21uY2NYVW84RWxmTWdqaVB5cEpkS01SalZDM2I5MmFfVG9rZW46Ym94Y243SzJrQllKdTdhWTF0WGVvd2dDMXpnXzE2Njk2MDYzMzM6MTY2OTYwOTkzM19WNA"></p></li><li><p>全局变量<br><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=MTI4YzYyNDY5Yzk5NDlkZTE3YmZmOWQ0N2I1MGQ3NzFfeXpCR1RyMG5rdW85T00wcGF5bkQwSGg4RXVqT3RJT3RfVG9rZW46Ym94Y25UTzdSeTFHUHk2R1B0VGk1NkIwTWZlXzE2Njk2MDYzMzM6MTY2OTYwOTkzM19WNA"></p></li></ul></li><li>局部变量：如果是基础类型，那栈中储存的是数据本身。如果是对象类型，那栈中存储的是堆中对象的引用（对象本身储存在堆中）。</li></ol></li><li><p><a href="https://segmentfault.com/a/1190000014093547">拖拽性能优化</a></p><ol><li>弃用html5的drag，改用mouse事件</li><li>mousedown的时候clone当前点击的元素为ghost并将原来的元素visibility:hidden;visibility让原来的元素依然占据着位置，是拖拽中不改变dom的关键。</li><li>设置ghost的position为fixed，脱离文档流，这样无论怎么拖拽都不会影响到布局。</li><li>将mousemove和mouseend事件添加到window上，这样无论鼠标怎么移动ghost都流畅跟随。mousemove的时候判断ghost与其他元素的位置，只使用translate去改变，直到真正拖拽结束才进行一次排序。</li><li>优化后的自定义ghost能让人清晰得看到正在移动的元素。</li></ol></li><li><p><a href="https://juejin.cn/post/6973946041691275271">浏览器运行机制</a></p></li></ol><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ol><li><p><strong>display:none opacity:0 以及visibility:hidden区别</strong></p><ol><li>display不会被子元素继承 但是父元素不在了，子元素也就不在了</li><li>opacity可以被子元素继承，但是不能设置子元素opacity:1使子元素显示</li><li>visibility可以被子元素继承，子元素设置visibility:visibile显示</li></ol></li><li><p><strong>flex:1</strong></p><ol><li>flex-grow 定义放大比例 默认为0 不放大</li><li>flex-shrink 定义缩小比例 默认为1  空间不足就缩小</li><li>flex-basis 定义分配多余空间之前，项目占据的主轴空间 默认auto 即元素本来的大小| <strong>语法</strong> | <strong>等值</strong> |<br>| ————– | ————– |<br>| flex: initial  | flex: 0 1 auto |<br>| flex: 0        | flex: 0 1 0%   |<br>| flex: none     | flex: 0 0 auto |<br>| flex: 1        | flex: 1 1 0%   |<br>| flex: auto     | flex: 1 1 auto |</li></ol></li><li><p>0.5px的线  transform: scaleY(0.5);</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">BFC</a></p><ol><li><a href="https://juejin.cn/post/6950082193632788493">面试官：请说说什么是BFC？大白话讲清楚</a></li><li>三栏布局<ol><li>浮动方式<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.left</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: <span class="hljs-number">#f66</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">float</span>: right;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: <span class="hljs-number">#f66</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.main</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: <span class="hljs-number">#fcc</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>flex布局</li><li>绝对定位</li></ol></li></ol></li><li><p>选择器权重 !important &gt; 内联 &gt; id &gt; 类 伪类 属性 &gt; 标签 伪元素 &gt; 通配符 兄弟选择器</p></li><li><p><a href="https://juejin.cn/post/6844903667175260174">z-index</a></p></li><li><p>浮动的产生、浮动带来的影响、消除影响的方式</p></li><li><p><a href="https://juejin.cn/post/6844903667175260174">-index</a></p></li><li><p><a href="https://juejin.cn/post/6844903702172532744">浏览器GPU加速</a></p></li></ol><h2 id="智力题"><a href="#智力题" class="headerlink" title="智力题"></a>智力题</h2><ul><li>赛马</li><li>变色龙</li></ul><h2 id="H5"><a href="#H5" class="headerlink" title="H5"></a>H5</h2><h3 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API">Canvas</a></h3><ul><li><p><a href="https://www.grapecity.com.cn/blogs/spreadjs-advantages-and-practical-applications-of-canvas">Canvas，DOM，SVG性能对比</a><br>Google Docs宣布将会把HTML迁移到基于Canvas渲染，这一消息的出现再次把几年前随HTML5诞生的标签重新推到了人们视线之中。Canvas在刚推出时主打的优势就是更快的渲染速度，堪称HTML届的“苏炳添”，刷新了人们对Web页面元素绘制速度的印象。但Canvas的优势仅限于此吗？</p><p><strong>HTML绘图届的前辈：SVG</strong></p><p>Canvas是HTML5时代引入的“新”标签。与很多标签不同，Canvas不具有自己的行为，只将一组API 展现给客户端 JavaScript ，让开发者使用脚本把想绘制的东西画到一张画布上。</p><p>在HTML5之前，人们通常使用SVG来在页面上绘制出图形。SVG使用XML来定义图形，就像使用HTML标签和样式定义DIV一样，我们也可以将一个空白的DIV想象为长方形的SVG，两者的设计思想是相通的，SVG的本质就是一个DOM元素。而Canvas则不同，Canvas提供的是 JavaScript 的绘图 API，而不是像 SVG那样使用XML 描述绘图，通过JavaScript API直接完成绘制，比起修改XML来说要更简便、更直接。</p><p>除了定义的方式不同，Canvas和DOM（当然也包含SVG）的差异更多的体现在浏览器的渲染方式上。</p><p>浏览器在做页面渲染时，Dom元素是作为矢量图进行渲染的。每一个元素的边距都需要单独处理，浏览器需要将它们全都处理成像素才能输出到屏幕上，计算量十分庞大。当页面上内容非常多，存在大量DOM元素的时候，这些内容的渲染速度就会变得很慢。</p><p>而Canvas与DOM的区别则是Canvas的本质就是一张位图，类似img标签，或者一个div加了一张背景图（background-image）。所以，DOM那种矢量图在渲染中存在的问题换到Canvas身上就完全不同了。在渲染Canvas时，浏览器只需要在JavaScript引擎中执行绘制逻辑，在内存中构建出画布，然后遍历整个画布里所有像素点的颜色，直接输出到屏幕就可以了。不管Canvas里面的元素有多少个，浏览器在渲染阶段也仅需要处理一张画布。</p><p>然而这样更加强大的功能，不可避免的让使用canvas渲染有很高的门槛。Google Docs在构建Canvas的过程中重新定义了往常已经被人们所熟悉的内容，例如精确定位、文本选择、拼写检查、重画调优等。为什么更多开发者还是选择了接纳Canvas这个门槛更高的技术路线呢？这就得回到Canvas的最大优势：渲染性能。</p><p><strong>Canvas的渲染模式</strong></p><p>这里的渲染是指浏览器将页面的代码呈现为屏幕上内容的过程。Canvas和Dom的渲染模式完全不同，搞清楚这个差异对理解Canvas的性能优势至关重要。</p><p><strong>DOM：驻留模式</strong></p><p>驻留模式（Retained Mode）是Dom在浏览器中的渲染模式。下图粗略展示了这一过程的工作流程。</p><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTkzMGU4MGQyMGY1YzJjYjAxOTlmNmQzMzk1YzI5MzVfTHA0SWw0WWRkOGFCcmVHeDdxUHdDNlk5cHhwbXpkajZfVG9rZW46Ym94Y25qQlg3QzdWN2F4bUtXTHVrdzlkV1RoXzE2Njk2MDY0MTc6MTY2OTYxMDAxN19WNA"></p><p>DOM的核心是标签，一种文本标记型语言，多样性很强且多个标签之间存在各种关联（如在同一个DIV下设置为float的子DIV）。浏览器为了更好的处理这些DOM元素，减少对绘制API的调用，就设计了一套将中间结果存放于内存的“驻留模式”。首先，浏览器会将解析DOM相关的全部内容（包含HTML标签、样式和JavaScript），将其转化为场景（scene）和模型（model）存储到内存中，然后再调用系统的绘制API（如Windows程序员熟悉的GDI&#x2F;GDI+），把这些中间产物绘制到屏幕。</p><p>驻留模式通过场景和模型缓存减少了对绘制API的调用频次，将性能压力转移到场景和模型生成阶段，即浏览器需要根据DOM上下文和BOM中的尺寸数据，“自行判断”每一个元素的绘制结果。</p><p><strong>Canvas：快速模式</strong></p><p>Canvas采用了和DOM不同的快速模式（Immediate Mode），让我们先来看看快速模式是如工作的：</p><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=YWQzZTdmZGYxODFlNzUzZDE4YmFlMzI2YjhlZDEzZjJfRlNGa241aVVHTGliZzl6VjhBMkJKeWxDNkJaNmdiMzJfVG9rZW46Ym94Y25yaFZQNUhVYWRxbWE0RUQ0aTg5UWlkXzE2Njk2MDY0MTc6MTY2OTYxMDAxN19WNA"></p><p>与驻留模式相比，快速模式将场景和模型的生成从浏览器移交给了开发者。开发者在设计页面时，就通过Canvas的JavaScript API定义了画布内所有元素的绘制方式。浏览器只需要简单的执行这些脚本即可，而不需要像渲染DOM一样逐个处理子元素了。</p><p>在快速模式中，页面的绘制性能得到了大幅提升。但开发者不仅需要指定什么需要画，还要创建和维护一个模型。此外，开发者还需要管理好当前场景重绘时带来的改变，以及响应用户的点击或输入操作等。</p><p><strong>Canvas的应用优点</strong></p><p>上面介绍的两种不同的模式直接造成了Dom和Canvas的性能差异。对于使用快速模式渲染的Canvas而言，浏览器的每次重绘都是基于代码的，不存在能让处理流程变慢的多层解析，所以它真的很快。除了快之外，Canvas的灵活性也大大超出DOM。我们可以通过代码精确的控制如何、何时绘制出我们想要的效果。</p><p>在资源消耗上，DOM的驻留模式意味着场景中每增加一点东西就需要额外消耗一些内存，而Canvas并没有这个问题。这个差异会随着页面元素的数量增多而愈加明显。以B端的企业应用场景为例，表单那种数据量比较小的场景，不同渲染模式带来的效果差异并不明显；但在工业制造、金融财会等类Excel电子表格操作的场景下，单元格数量动辄便是上百万（5万行x 20列）甚至上亿个，浏览器需要对表格所有单元格本身内容进行渲染，同时还涉及到丰富的数据处理，情况就完全不同了。</p><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=NTlkZjg0YjUzOGY3NDJhNGViNDE3ODU2YTZkNDZlZjVfVTRPZlJia1dkSkNhejFFRlg5UXk0VFhkUW5tWXhndTBfVG9rZW46Ym94Y25DcGo4MzUwbFZoYmEzaUlNSXhTemZjXzE2Njk2MDY0MTc6MTY2OTYxMDAxN19WNA"></p><p>（Web页面上的电子表格，包含1百万个单元格）</p><p>在Canvas出现之前，在前端渲染表格时只能通过构建复杂的DOM来实现。这种方式下，浏览器的性能成为了Web应用瓶颈，让很多开发者放弃了在浏览器上实现电子表格的想法。</p><p>在Canvas出现后，快速模式带来的性能优势无疑是一个巨大的亮点，大量、复杂的DOM渲染处理带来的性能问题终于有了解决途径。</p><p>回到电子表格的应用场景，业内已经出现了使用Canvas绘制画布的<a href="https://www.grapecity.com.cn/developer/spreadjs">表格组件</a>，这类组件在渲染数据层时不仅无需重复创建和销毁DOM元素，在画布的绘制过程中，也比Dom元素渲染的限制更少。除了表格之外，Canvas也为数字孪生可视化大屏、页面游戏等场景带来了变革。</p><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjNiNDRkY2ZkZDM1Zjk5M2EyMWFhY2FkY2UyY2ZlMWVfcFl1cHBRY0NBS0FwcEhSdTdEdFhPbXpQMDBVTXE2VE5fVG9rZW46Ym94Y25qbG04MWZMdDMzTGxJZ2VHNGVZS01jXzE2Njk2MDY0MTc6MTY2OTYxMDAxN19WNA"></p><p>（数字孪生大屏，精确控制各种形状、样式）</p><p><strong>总结</strong></p><p>总结一下，在渲染模式上，Canvas站在了DOM的对面，浏览器对其内容一无所知，一切渲染的权利回到了开发者的手上，这个改变带来了显著的性能优势。此外，我们可以使用Canvas绘制种类更为丰富的UI元素，如线形、特殊图形等，通过画法逻辑，还可以实现更加精准的UI界面渲染，解决了浏览器差异造成的样式误差，让更多应用场景可以顺利迁移到Web平台上来。</p></li><li><p><a href="https://juejin.cn/post/7119495608938790942#heading-1">基本使用</a></p></li><li><p><a href="https://juejin.cn/post/7016559372331401253">Canvas如何实现DOM事件的监听-Konva原理</a></p></li><li><p><a href="https://juejin.cn/post/6950684708443258894">手写echarts图表</a></p></li></ul><h3 id="web安全"><a href="#web安全" class="headerlink" title="web安全"></a><a href="https://juejin.cn/post/7118917161262776356">web安全</a></h3><h3 id="WebGL"><a href="#WebGL" class="headerlink" title="WebGL"></a><a href="https://juejin.cn/post/7035567609563054094#heading-9">WebGL</a></h3><h3 id="WebWorker"><a href="#WebWorker" class="headerlink" title="WebWorker"></a><a href="https://juejin.cn/post/6844903736238669837">WebWorker</a></h3><h1 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h1><h2 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h2><ol><li><p><a href="https://juejin.cn/post/6844903974437388295#heading-0">前端框架用vue还是react？清晰对比两者差异</a></p></li><li><p>依赖收集</p><ol><li>每个属性都拥有自己的 <code>dep</code>属性，存放他所依赖的watcher，当属性变化后会通知自己对应的watcher去更新</li><li>每个属性都拥有自己的 <code>dep</code>属性，存放他所依赖的watcher，当属性变化后会通知自己对应的watcher去更新</li><li>默认在初始化时会调用render函数，此时会触发属性依赖收集 <code>dep.depend</code></li><li>当属性发生修改时会触发 <code>watcher</code>更新 <code>dep.notify()</code><br><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=NTAxMDcyZmMwOTNjMGU3OTExMmM0NjQ0MDdhODU5ODBfejRCV2N2aDlUa0lIY1ROVEpuTmRJcXdGQUQ5RVpJczZfVG9rZW46Ym94Y256bWhMRlNtdTBXZVc1YUV0QUgxTDdiXzE2Njk2MDY0NDA6MTY2OTYxMDA0MF9WNA"></li></ol></li><li><p>Diff算法</p><ol><li>新前：newChildren中所有未处理的第一个节点<br>新后：newChildren中所有未处理的最后一个节点<br>旧前：oldChildren中所有未处理的第一个节点<br>旧后：oldChildren中所有未处理的最后一个节点</li><li>新前与旧前 新后与旧后 新后与旧前 新前与旧后<br><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=YjY0NGJlNWYzNTExYzA4NmRjOTI2MWIxYTAxMWMzZjdfZWFWT3dROE1NVkVhWUNCSWlEV3hNdjdsR2VNTEQ2UjBfVG9rZW46Ym94Y25rUDFNdXhWT01JZ21zcnBKS29LejdlXzE2Njk2MDY0NDA6MTY2OTYxMDA0MF9WNA"></li></ol></li></ol><h2 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h2><ol><li><p>依赖收集</p><ol><li>Proxy + Reflect进行代理 &#x3D;&gt; reactive  （只能让对象成为依赖收集的对象 因为proxy第一个参数只接受对象）</li><li>ref可以将基本类型数据包裹成响应式，其实就是封装了一个类 调用类的set和get 转成es5其实还是definePrototy</li><li>在get中调用 <code>track</code>收集依赖 在set中调用 <code>trigger</code>触发更新 更新的其实是副作用effect 区别于Vue2的watcher</li><li>对于map，set数据结构的处理 由于二者的proxy只会监听到get事件，因此只能根据value进行判断处理</li></ol></li><li><p>Diff算法</p><ol><li>快速diff算法 + 最长递增子序列<ul><li>相同前置节点处理</li><li>相同后置节点处理</li><li>剩余节点的处理<ul><li>只有新的一组的子节点有剩余</li><li>只有老的一组的子节点有剩余</li><li>新老都有剩余</li></ul></li></ul></li><li>静态标记</li><li>区别<br>在 vue2 中是通过对旧节点列表建立一个 { key, oldVnode }的映射表，然后遍历新节点列表的剩余节点，根据newVnode.key在旧映射表中寻找可复用的节点，然后打补丁并且移动到正确的位置。<br>而在 vue3 中是建立一个存储新节点数组中的剩余节点在旧节点数组上的索引的映射关系数组，建立完成这个数组后也即找到了可复用的节点，然后通过这个数组计算得到最长递增子序列，这个序列中的节点保持不动，然后将新节点数组中的剩余节点移动到正确的位置。<br><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=NWUyZTg5ZTM2ZDk4ZTg4NDQxNjgyMDMzOTI0NjFlYzBfTWlGY1BPOFhucHd4RGpkbTFhRHhodm56a3hRbEFnN1hfVG9rZW46Ym94Y25nUTJLMGRuaGFmVHdIY1hlc3N5bnNjXzE2Njk2MDY0NDA6MTY2OTYxMDA0MF9WNA"></li></ol></li></ol><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><h2 id="SoildJS"><a href="#SoildJS" class="headerlink" title="SoildJS"></a>SoildJS</h2><h1 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h1><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><h3 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h3><h4 id="路由机制"><a href="#路由机制" class="headerlink" title="路由机制"></a>路由机制</h4><p>一个简单的express使用例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/home&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;home&quot;</span>);<br>&#125;);<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/users&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;users&quot;</span>);<br>&#125;);<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;listening&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>分析app应该是一个构造函数的实例，身上应该有get，listen方法.而且我们可以定义多个路由，应该单独抽离出来管理这些路由。因此需要两个构造函数（  **Application 负责新增路由，启动服务，Router 管理路由 ** ）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//Application.js</span><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br>constRouter = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./router/index&quot;</span>);<br><span class="hljs-title function_">functionApplication</span>() &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">router</span> = <span class="hljs-title function_">newRouter</span>();<br>&#125;<br><span class="hljs-title class_">Application</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">listen</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">const</span> _this = <span class="hljs-variable language_">this</span>;<br><span class="hljs-title function_">functiondone</span>(req, res) &#123;<br>        res.<span class="hljs-title function_">end</span>(<span class="hljs-string">`Connot <span class="hljs-subst">$&#123;req.method&#125;</span><span class="hljs-subst">$&#123;req.url&#125;</span>`</span>);<br>    &#125;<br><span class="hljs-keyword">let</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>        _this.<span class="hljs-property">router</span>.<span class="hljs-title function_">handle</span>(req, res, done);<br>    &#125;);<br>    server.<span class="hljs-property">listen</span>.<span class="hljs-title function_">apply</span>(server, <span class="hljs-variable language_">arguments</span>);<br>&#125;;<br><span class="hljs-title class_">Application</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">get</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">path, handler</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">router</span>.<span class="hljs-title function_">get</span>(path, handler);<br>&#125;;<br><span class="hljs-comment">//Router.js</span><br><span class="hljs-keyword">const</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;url&quot;</span>);<br><span class="hljs-title function_">functionRouter</span>() &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span> = [];<br>&#125;<br><span class="hljs-title class_">Router</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">get</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">path, handler</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-title function_">push</span>(&#123;<br>        path,<br><span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span>,<br>        handler,<br>    &#125;);<br>&#125;;<br><span class="hljs-title class_">Router</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">handle</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, out</span>) &#123;<br><span class="hljs-keyword">const</span> &#123; pathname &#125; = url.<span class="hljs-title function_">parse</span>(req.<span class="hljs-property">url</span>);<br><span class="hljs-keyword">const</span> reqMethod = req.<span class="hljs-property">method</span>.<span class="hljs-title function_">toLowerCase</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-property">length</span>; i++) &#123;<br><span class="hljs-keyword">const</span> &#123; path, method, handler &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>[i];<br><span class="hljs-keyword">if</span> (path === pathname &amp;&amp; method === reqMethod) &#123;<br><span class="hljs-title function_">returnhandler</span>(req, res);<br>        &#125;<br>    &#125;<br><span class="hljs-title function_">out</span>(req, res);<br>&#125;;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Router</span>;<br></code></pre></td></tr></table></figure><p>而有时候我们还会这么写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br><span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;wrong&#x27;</span>);<br>&#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">11</span>);<br><span class="hljs-title function_">next</span>();<br>&#125;).<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br><span class="hljs-title function_">next</span>();<br>&#125;).<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;ok&#x27;</span>);<br>&#125;).<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">err,req,res,next</span>)&#123;<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;catch: &#x27;</span>+err);<br>&#125;);<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><p>显然之前的架构处理这样的书写就会很臃肿，因此我们还需要单独再抽象出两个类，<strong>Layer （负责管理路由） 和 Route（负责管理一个路由下的所有函数）类。同时原来的Router类也需要进行改进。</strong></p><h5 id="Router-js"><a href="#Router-js" class="headerlink" title="Router.js"></a>Router.js</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//Router.js</span><br><span class="hljs-comment">// 由于不停地在Router原型上加方法，可以定义一个对象，在这个对象身上加，最后让Router返回的实例原型指向这个对象  Object.setPrototypeOf(router, proto)</span><br>letLayer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./layer&#x27;</span>);<br>letRoute = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./route&#x27;</span>);<br><span class="hljs-title function_">functionRouter</span>()&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span> = [];<br>&#125;<br><span class="hljs-title class_">Router</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">route</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">path</span>)&#123;<br><span class="hljs-comment">// layer 和 route之间的关系</span><br><span class="hljs-keyword">let</span> route = <span class="hljs-title function_">newRoute</span>();<br><span class="hljs-keyword">let</span> layer = <span class="hljs-title function_">newLayer</span>(path,route.<span class="hljs-property">dispatch</span>.<span class="hljs-title function_">bind</span>(route)); <span class="hljs-comment">// 将路径存储到layer中</span><br>    layer.<span class="hljs-property">route</span> = route;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-title function_">push</span>(layer);<br><span class="hljs-keyword">return</span> route;<br>&#125;<br><span class="hljs-comment">// 创建 Route 将handler传入到route中</span><br><span class="hljs-title class_">Router</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">get</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">path,...handlers</span>)&#123;<br><span class="hljs-keyword">let</span> route = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">route</span>(path); <span class="hljs-comment">// 将路径存入layer中</span><br>    route.<span class="hljs-title function_">get</span>(handlers);<span class="hljs-comment">// 将handler存入到route中</span><br>&#125;<br><span class="hljs-comment">// 每当浏览器发送请求 处理请求</span><br><span class="hljs-title class_">Router</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">handle</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, out</span>) &#123;<br><span class="hljs-keyword">let</span> &#123; pathname &#125; = url.<span class="hljs-title function_">parse</span>(req.<span class="hljs-property">url</span>);<br><span class="hljs-keyword">let</span> idx = <span class="hljs-number">0</span>;<br>letnext = <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (idx &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-property">length</span>) <span class="hljs-title function_">returnout</span>(); <span class="hljs-comment">// 匹配不到调用not found</span><br><span class="hljs-keyword">let</span> layer = <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>[idx++];<br><span class="hljs-keyword">if</span> (layer.<span class="hljs-title function_">match</span>(pathname)) &#123;<br><span class="hljs-comment">// 如果路径匹配到了 调用route的dispatch方法</span><br>            layer.<span class="hljs-title function_">handle_request</span>(req, res, next);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">next</span>(); <span class="hljs-comment">// 匹配不到找下一层</span><br>        &#125;<br>    &#125;;<br><span class="hljs-title function_">next</span>();<br>&#125;;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Router</span>;js<br></code></pre></td></tr></table></figure><h5 id="Route-js"><a href="#Route-js" class="headerlink" title="Route.js"></a>Route.js</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//Route.js</span><br>letLayer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./layer&quot;</span>);<br><span class="hljs-title function_">functionRoute</span>() &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span> = [];<br>&#125;<br><span class="hljs-title class_">Route</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">get</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">handlers</span>) &#123;<br>    handlers.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">handler</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">let</span> layer = <span class="hljs-title function_">newLayer</span>(<span class="hljs-string">&quot;/&quot;</span>, handler);<br>        layer.<span class="hljs-property">method</span> = <span class="hljs-string">&quot;get&quot;</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-title function_">push</span>(layer);<br>    &#125;);<br>&#125;;<br><span class="hljs-title class_">Route</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">dispatch</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, out</span>) &#123;<br><span class="hljs-keyword">let</span> idx = <span class="hljs-number">0</span>;<br>letnext = <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (idx &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-property">length</span>) <span class="hljs-title function_">returnout</span>();<br><span class="hljs-keyword">let</span> layer = <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>[idx++];<br><span class="hljs-comment">// 如果方法匹配打牌了</span><br><span class="hljs-keyword">if</span> (layer.<span class="hljs-property">method</span> === req.<span class="hljs-property">method</span>.<span class="hljs-title function_">toLowerCase</span>()) &#123;<br>            layer.<span class="hljs-title function_">handle_request</span>(req, res, next); <span class="hljs-comment">// 内部匹配完了在出来</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">next</span>();<br>        &#125;<br>    &#125;;<br><span class="hljs-title function_">next</span>();<br>&#125;;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Route</span>;<br></code></pre></td></tr></table></figure><h5 id="Layer-js"><a href="#Layer-js" class="headerlink" title="Layer.js"></a>Layer.js</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//Layer.js</span><br><span class="hljs-title function_">functionLayer</span>(path,handler)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">path</span> = path;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">handler</span> = handler;<br>&#125;<br><span class="hljs-comment">// 匹配路由</span><br><span class="hljs-title class_">Layer</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">match</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">pathname</span>)&#123;<br>returnthis.<span class="hljs-property">path</span> == pathname<br>&#125;<br><span class="hljs-title class_">Layer</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">handle_request</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br><span class="hljs-comment">// 调用dispatch方法</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">handler</span>(req,res,next);<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Layer</span>;<br></code></pre></td></tr></table></figure><h4 id="中间件原理"><a href="#中间件原理" class="headerlink" title="中间件原理"></a>中间件原理</h4><p>其实已经在路由中用到过，只不过Express中中间件又分为好几种：</p><ul><li><p><strong>应用级别的中间件 app.use()</strong></p></li><li><p><strong>路由中间件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">  app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/home&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span>);<br><span class="hljs-title function_">next</span>()<br>  &#125;);<br>  app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/home&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>      res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;home&quot;</span>);<br>  &#125;);<br></code></pre></td></tr></table></figure></li><li><p><strong>错误处理中间件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>      res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;这个是404 没有路由匹配到！&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p><strong>内置中间件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/static&#x27;</span>,express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&quot;public&quot;</span>));<br></code></pre></td></tr></table></figure></li><li><p><strong>不过原理都差不多</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// use方法</span><br><span class="hljs-title class_">Application</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">use</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">_router</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">_router</span> = <span class="hljs-title function_">newRouter</span>();<br>      &#125;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">_router</span>.<span class="hljs-title function_">use</span>(...<span class="hljs-variable language_">arguments</span>); <span class="hljs-comment">// 交给路由处理</span><br>  &#125;;<br><span class="hljs-comment">//Router.js</span><br><span class="hljs-title class_">Router</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">use</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">path, handler</span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> handler !== <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>          handler = path;<br>          path = <span class="hljs-string">&quot;/&quot;</span>;<br>      &#125;<br><span class="hljs-keyword">let</span> layer = <span class="hljs-title function_">newLayer</span>(path, handler);<br>      layer.<span class="hljs-property">route</span> = <span class="hljs-literal">undefined</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-title function_">push</span>(layer); <span class="hljs-comment">// 将当前层放到stack中</span><br>  &#125;;<br><span class="hljs-title class_">Router</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">handle</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, out</span>) &#123;<br><span class="hljs-keyword">let</span> &#123; pathname &#125; = url.<span class="hljs-title function_">parse</span>(req.<span class="hljs-property">url</span>);<br><span class="hljs-keyword">let</span> idx = <span class="hljs-number">0</span>;<br>      letnext = <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (idx &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-property">length</span>) <span class="hljs-title function_">returnout</span>(); <span class="hljs-comment">// 匹配不到调用not found</span><br><span class="hljs-keyword">let</span> layer = <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>[idx++];<br><span class="hljs-comment">// 如果匹配到</span><br><span class="hljs-keyword">if</span> (layer.<span class="hljs-title function_">match</span>(pathname)) &#123;<br><span class="hljs-keyword">if</span> (!layer.<span class="hljs-property">route</span>) &#123;<br><span class="hljs-comment">// 中间件</span><br>                  layer.<span class="hljs-title function_">handle_request</span>(req, res, next);<br>              &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 路由</span><br><span class="hljs-keyword">if</span> (layer.<span class="hljs-property">route</span>.<span class="hljs-property">methods</span>[req.<span class="hljs-property">method</span>.<span class="hljs-title function_">toLowerCase</span>()]) &#123;<br>                      layer.<span class="hljs-title function_">handle_request</span>(req, res, next);<br>                  &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">next</span>();<br>                  &#125;<br>              &#125;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">next</span>(); <span class="hljs-comment">// 匹配不到找下一层</span><br>          &#125;<br>      &#125;;<br>  &#125;;<br></code></pre></td></tr></table></figure></li></ul><h4 id="params解析"><a href="#params解析" class="headerlink" title="params解析"></a>params解析</h4><p>当我们编写路由的时候会有如下写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user/:name/:id&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;OK&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>而当我们在浏览器输入路由是这样的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-attr">localhost</span>:<span class="hljs-number">3000</span>/user/hxh/<span class="hljs-number">0522</span><br></code></pre></td></tr></table></figure><p>首先会将app.get定义的路由用正则表达式进行替换，将:xxx部分替换成正则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> path = <span class="hljs-string">&quot;/user/:name/:id&quot;</span>;<br><span class="hljs-keyword">const</span> paramsName = [];<br><span class="hljs-keyword">const</span> regStr = path.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/:(\w+)/g</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">matchChar, group1</span>) &#123;<br>    paramsName.<span class="hljs-title function_">push</span>(group1);<br><span class="hljs-keyword">return</span> (<span class="hljs-string">&#x27;(\\w+)&#x27;</span>)<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(regStr);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(regStr);<span class="hljs-comment">///user/(\w+)/(\w+)</span><br></code></pre></td></tr></table></figure><p>这样就得到了一个匹配url的正则字符串，再用这个字符串生成正则去匹配我们的路由，就能提取出params，最后把提取出来的值跟变量对应起来就好。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> reg = <span class="hljs-title function_">newRegExp</span>(regStr);<br><span class="hljs-keyword">const</span> url = <span class="hljs-string">&quot;localhost:3000/user/hxh/0522&quot;</span>;<br><span class="hljs-keyword">const</span> res = url.<span class="hljs-title function_">match</span>(reg);<br><span class="hljs-keyword">const</span> params = &#123;&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; paramsName.<span class="hljs-property">length</span>; i++) &#123;<br>    params[paramsName[i]] = res[i + <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(params);<br></code></pre></td></tr></table></figure><h3 id="Koa"><a href="#Koa" class="headerlink" title="Koa"></a>Koa</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>** Koa中间件机制就是组合函数（Compose）的概念,** 将⼀组需要<strong>顺序执行</strong>的函数<strong>复合</strong>为⼀个函数，<strong>外层函数的参数</strong>实际是内层函数的 <strong>返回值</strong> 。洋葱圈模型可以形象表示这种机制，这也是Koa的 核心 。</p><p>如下图，假设我们注册中间件的顺序是A,B,C，那么中间件的执行顺序是，ABCBA。</p><p><strong>暂时无法在飞书文档外展示此内容</strong></p><p>那么<strong>外层函数的参数是内层函数的返回值</strong>该怎么理解呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">newKoa</span>();<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br><span class="hljs-title function_">awaitnext</span>();<br><span class="hljs-keyword">const</span> router = &#123;&#125;;<br>    router[<span class="hljs-string">&quot;/html&quot;</span>] = <span class="hljs-function">(<span class="hljs-params">ctx</span>) =&gt;</span> &#123;<br>        ctx.<span class="hljs-property">type</span> = <span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>;<br>        ctx.<span class="hljs-property">body</span> = <span class="hljs-string">`&lt;b&gt;my name is:<span class="hljs-subst">$&#123;ctx.body[<span class="hljs-number">0</span>].name&#125;</span>&lt;/b&gt;`</span>;<br>    &#125;;<br><span class="hljs-keyword">const</span> fun = router[ctx.<span class="hljs-property">url</span>];<br>    fun &amp;&amp; <span class="hljs-title function_">fun</span>(ctx);<br>&#125;);<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br>    ctx.<span class="hljs-property">body</span> = [<br>        &#123;<br><span class="hljs-attr">name</span>: ctx.<span class="hljs-property">url</span>,<br>        &#125;,<br>    ];<br>&#125;);<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;listening&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>上述代码中，在B中间件给ctx的body赋值为一个数组，在A组件中就能通过<strong>ctx参数</strong>拿到这个数组，进行一些操作。</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>其实配合es7的async &#x2F; await 可以很方便的实现Compose。当然，Compose只是Koa重要部分，还有一些细节也一并实现。</p><p>可以看到下面代码引入了三个包 <strong>context，request，response</strong> ，其实就是对http做了一些简单的封装。</p><h5 id="context"><a href="#context" class="headerlink" title="context"></a>context</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><span class="hljs-title function_">geturl</span>(<span class="hljs-params"></span>) &#123;<br>returnthis.<span class="hljs-property">request</span>.<span class="hljs-property">url</span>;<br>    &#125;,<br><span class="hljs-title function_">getmethod</span>(<span class="hljs-params"></span>) &#123;<br>returnthis.<span class="hljs-property">request</span>.<span class="hljs-property">method</span>;<br>    &#125;,<br><span class="hljs-title function_">getbody</span>(<span class="hljs-params"></span>) &#123;<br>returnthis.<span class="hljs-property">response</span>.<span class="hljs-property">body</span>;<br>    &#125;,<br><span class="hljs-title function_">setbody</span>(<span class="hljs-params">val</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">response</span>.<span class="hljs-property">body</span> = val;<br>    &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="request"><a href="#request" class="headerlink" title="request"></a>request</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><span class="hljs-title function_">geturl</span>(<span class="hljs-params"></span>) &#123;<br>returnthis.<span class="hljs-property">req</span>.<span class="hljs-property">url</span>;<br>    &#125;,<br><span class="hljs-title function_">getmethod</span>(<span class="hljs-params"></span>) &#123;<br>returnthis.<span class="hljs-property">req</span>.<span class="hljs-property">method</span>.<span class="hljs-title function_">toLowerCase</span>();<br>    &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="response"><a href="#response" class="headerlink" title="response"></a>response</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><span class="hljs-title function_">getbody</span>(<span class="hljs-params"></span>) &#123;<br>returnthis.<span class="hljs-property">_body</span>;<br>    &#125;,<br><span class="hljs-title function_">setbody</span>(<span class="hljs-params">val</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">_body</span> = val;<br>    &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>Compose的实现其实跟express差不多，只不过用Promise封装了一下，但是因为async，await的存在，让它和express形成了不同的执行顺序。</p><p>除此之外我们定义了一个ctx（Context）对象，对http的req，res进行了简单的封装然后进行传递。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><span class="hljs-keyword">const</span> context = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./context&quot;</span>);<br><span class="hljs-keyword">const</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./request&quot;</span>);<br><span class="hljs-keyword">const</span> response = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./response&quot;</span>);<br>classApplication &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">middlewares</span> = [];<br>    &#125;<br><span class="hljs-title function_">use</span>(<span class="hljs-params">fn</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">middlewares</span>.<span class="hljs-title function_">push</span>(fn);<br>    &#125;<br><span class="hljs-title function_">createContext</span>(<span class="hljs-params">req, res</span>) &#123;<br><span class="hljs-keyword">const</span> ctx = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(context);<br>        ctx.<span class="hljs-property">request</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(request);<br>        ctx.<span class="hljs-property">response</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(response);<br>        ctx.<span class="hljs-property">req</span> = ctx.<span class="hljs-property">request</span>.<span class="hljs-property">req</span> = req;<br>        ctx.<span class="hljs-property">res</span> = ctx.<span class="hljs-property">response</span>.<span class="hljs-property">res</span> = res;<br><span class="hljs-keyword">return</span> ctx;<br>    &#125;<br><span class="hljs-title function_">compose</span>(<span class="hljs-params">middlewares</span>) &#123;<br><span class="hljs-keyword">return</span><span class="hljs-keyword">function</span> (<span class="hljs-params">ctx</span>) &#123;<br><span class="hljs-title function_">returndispatch</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_">functiondispatch</span>(idx) &#123;<br><span class="hljs-keyword">const</span> fn = middlewares[idx];<br><span class="hljs-keyword">if</span> (!fn) &#123;<br>returnPromise.<span class="hljs-title function_">resolve</span>();<br>                &#125;<br>returnPromise.<span class="hljs-title function_">resolve</span>(<br><span class="hljs-title function_">fn</span>(ctx, <span class="hljs-title function_">functionnext</span>() &#123;<br><span class="hljs-title function_">returndispatch</span>(idx + <span class="hljs-number">1</span>);<br>                    &#125;)<br>                );<br>            &#125;<br>        &#125;;<br>    &#125;<br><span class="hljs-title function_">listen</span>(<span class="hljs-params">...args</span>) &#123;<br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br><span class="hljs-keyword">const</span> ctx = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">createContext</span>(req, res);<br><span class="hljs-keyword">const</span> fn = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">compose</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">middlewares</span>);<br><span class="hljs-title function_">awaitfn</span>(ctx);<br>            res.<span class="hljs-title function_">end</span>(ctx.<span class="hljs-property">body</span>);<br>        &#125;);<br>        server.<span class="hljs-title function_">listen</span>(...args);<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Application</span>;<br></code></pre></td></tr></table></figure><h4 id="路由机制-1"><a href="#路由机制-1" class="headerlink" title="路由机制"></a>路由机制</h4><p>Koa单独将路由拆分出来，通过use注册路由中间件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">newRouter</span>();<br><span class="hljs-comment">// 注册路由中间件</span><br>app.<span class="hljs-title function_">use</span>(router.<span class="hljs-title function_">routes</span>());<br></code></pre></td></tr></table></figure><p>Koa的路由相对于Express来说要简单很多，只是实现了基本的功能，因为它不需要支持多个handle的调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">classRouter &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span> = [];<br>    &#125;<br><span class="hljs-title function_">register</span>(<span class="hljs-params">path, method, middleware</span>) &#123;<br><span class="hljs-keyword">let</span> route = &#123; path, method, middleware &#125;;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-title function_">push</span>(route);<br>    &#125;<br><span class="hljs-title function_">get</span>(<span class="hljs-params">path, middleware</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">register</span>(path, <span class="hljs-string">&quot;get&quot;</span>, middleware);<br>    &#125;<br><span class="hljs-title function_">post</span>(<span class="hljs-params">path, middleware</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">register</span>(path, <span class="hljs-string">&quot;post&quot;</span>, middleware);<br>    &#125;<br><span class="hljs-title function_">routes</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">const</span> stack = <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>;<br>returnasync<span class="hljs-keyword">function</span> (<span class="hljs-params">ctx, next</span>) &#123;<br><span class="hljs-keyword">let</span> currUrl = ctx.<span class="hljs-property">url</span>;<br><span class="hljs-keyword">let</span> route;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; stack.<span class="hljs-property">length</span>; i++) &#123;<br><span class="hljs-keyword">const</span> item = stack[i];<br><span class="hljs-keyword">if</span> (item.<span class="hljs-property">path</span> === currUrl &amp;&amp; item.<span class="hljs-property">method</span> === ctx.<span class="hljs-property">method</span>) &#123;<br>                    route = item.<span class="hljs-property">middleware</span>;<br><span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> route === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br><span class="hljs-title function_">route</span>(ctx, next);<br><span class="hljs-keyword">return</span>;<br>            &#125;<br><span class="hljs-title function_">awaitnext</span>();<br>        &#125;;<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Router</span>;<br></code></pre></td></tr></table></figure><h3 id="Egg"><a href="#Egg" class="headerlink" title="Egg"></a>Egg</h3><p>在Koa的基础上，阿里封装了一个企业级的NodeJS框架——egg.js。将Koa的行为进一步分离成controller，service，model三层，并规范了路由的写法——约定式路由。</p><h4 id="约定式路由"><a href="#约定式路由" class="headerlink" title="约定式路由"></a>约定式路由</h4><p>实现约定式路由的核心方法是load函数，通过fs遍历约定文件夹（ <strong>controller，service，model…</strong> ）下的文件，导出文件的内容，生成一个对象挂载到Egg的实例上。</p><h5 id="load"><a href="#load" class="headerlink" title="load"></a>load</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-title function_">functionload</span>(dir, cb) &#123;<br><span class="hljs-comment">// 获取绝对路径</span><br><span class="hljs-keyword">const</span> url = path.<span class="hljs-title function_">resolve</span>(__dirname, dir);<br><span class="hljs-comment">// 读取路径下的文件</span><br><span class="hljs-keyword">const</span> files = fs.<span class="hljs-title function_">readdirSync</span>(url, &#123; <span class="hljs-attr">encoding</span>: <span class="hljs-string">&quot;ascii&quot;</span> &#125;);<br><span class="hljs-comment">// 遍历路由文件 将配置解析到路由器中</span><br>    files.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">filename</span>) =&gt;</span> &#123;<br>        filename = filename.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;.js&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">// 导入文件</span><br><span class="hljs-keyword">const</span> file = <span class="hljs-built_in">require</span>(url + <span class="hljs-string">&quot;/&quot;</span> + filename);<br><span class="hljs-comment">// 处理逻辑</span><br><span class="hljs-title function_">cb</span>(filename, file);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="initRouter"><a href="#initRouter" class="headerlink" title="initRouter"></a>initRouter</h5><p>处理routes下面的文件，约定每一个文件为一个路由，其中的每一个是对应的子路由,这里对路由简单书写，实际可能会更复杂一点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">functioninitRouter</span>(app) &#123;<br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">newRouter</span>();<br><span class="hljs-title function_">load</span>(<span class="hljs-string">&quot;routes&quot;</span>, <span class="hljs-function">(<span class="hljs-params">filename, routes</span>) =&gt;</span> &#123;<br><span class="hljs-comment">// 若是index文件 就不加前缀 如果是其他的文件 路由前缀就是文件名</span><br><span class="hljs-keyword">const</span> prefix = filename === <span class="hljs-string">&quot;index&quot;</span> ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">`/<span class="hljs-subst">$&#123;filename&#125;</span>`</span>;<br>        routes = <span class="hljs-keyword">typeof</span> routes == <span class="hljs-string">&quot;function&quot;</span> ? <span class="hljs-title function_">routes</span>(app) : routes;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(routes).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> [method, path] = key.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot; &quot;</span>);<br>            router[method](prefix + path, <span class="hljs-keyword">async</span> (ctx) =&gt; &#123;<br><span class="hljs-comment">// 传⼊ctx</span><br>                app.<span class="hljs-property">ctx</span> = ctx; <span class="hljs-comment">// 挂载⾄app</span><br><span class="hljs-keyword">await</span> routes[key](app); <span class="hljs-comment">// 路由处理器现在接收到的是app</span><br>            &#125;);<br>        &#125;);<br>    &#125;);<br><span class="hljs-keyword">return</span> router;<br>&#125;<br><span class="hljs-comment">// routes/index.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-function">(<span class="hljs-params">app</span>) =&gt;</span> (&#123;<br><span class="hljs-string">&quot;get /&quot;</span>: app.<span class="hljs-property">$controller</span>.<span class="hljs-property">home</span>.<span class="hljs-property">index</span>,<br><span class="hljs-string">&quot;get /detail&quot;</span>: app.<span class="hljs-property">$controller</span>.<span class="hljs-property">home</span>.<span class="hljs-property">detail</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h4><p><strong>controller，service，model同理。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// controller-loader.js</span><br><span class="hljs-keyword">const</span> &#123; load &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./router-loader&quot;</span>);<br><span class="hljs-title function_">functioninitController</span>(app) &#123;<br><span class="hljs-keyword">const</span> controllers = &#123;&#125;;<br><span class="hljs-title function_">load</span>(<span class="hljs-string">&quot;controller&quot;</span>, <span class="hljs-function">(<span class="hljs-params">filename, controller</span>) =&gt;</span> &#123;<br>        controllers[filename] = <span class="hljs-title function_">controller</span>(app);<br>    &#125;);<br><span class="hljs-keyword">return</span> controllers;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123; initController &#125;;<br><span class="hljs-comment">// controller/home.js</span><br><span class="hljs-comment">// 这里对controller做简单处理，egg中会继承Controller类 然后在类中书写方法，但是作用一致</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-function">(<span class="hljs-params">app</span>) =&gt;</span> (&#123;<br><span class="hljs-attr">index</span>: <span class="hljs-keyword">async</span> (ctx) =&gt; &#123;<br><span class="hljs-keyword">const</span> name = <span class="hljs-keyword">await</span> app.<span class="hljs-property">$service</span>.<span class="hljs-property">user</span>.<span class="hljs-title function_">getName</span>();<br>        app.<span class="hljs-property">ctx</span>.<span class="hljs-property">body</span> = <span class="hljs-string">&quot;ctrl user&quot;</span> + name;<br>    &#125;,<br><span class="hljs-attr">detail</span>: <span class="hljs-function">(<span class="hljs-params">ctx</span>) =&gt;</span> &#123;<br>        app.<span class="hljs-property">ctx</span>.<span class="hljs-property">body</span> = <span class="hljs-string">&quot;Home Detail&quot;</span>;<br>    &#125;,<br>&#125;);<br><span class="hljs-comment">// service-loader.js</span><br><span class="hljs-keyword">const</span> &#123; load &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./router-loader&quot;</span>);<br><span class="hljs-title function_">functioninitService</span>() &#123;<br><span class="hljs-keyword">const</span> services = &#123;&#125;;<br><span class="hljs-title function_">load</span>(<span class="hljs-string">&quot;service&quot;</span>, <span class="hljs-function">(<span class="hljs-params">filename, service</span>) =&gt;</span> &#123;<br>        services[filename] = service;<br>    &#125;);<br><span class="hljs-keyword">return</span> services;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123; initService &#125;;<br></code></pre></td></tr></table></figure><h4 id="Egg类"><a href="#Egg类" class="headerlink" title="Egg类"></a>Egg类</h4><p>本质上是对Koa的扩展，实现MVC结构。</p><ul><li><p><strong>model</strong>层即数据库实体层与数据库中的表一一对应；</p></li><li><p><strong>controller</strong>层负责前后端交互，接受前端请求，调用service层，接收service层返回的数据，最后返回具体的页面和数据到客户端；</p></li><li><p><strong>service</strong>层即业务逻辑层，完成业务的功能设计。<strong>主要是针对具体的问题的操作，把一些数据层的操作进行组合，间接与数据库打交道（提供操作数据库的方法）</strong> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> &#123; initController &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./ctrl-loader&quot;</span>);<br>constKoa = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./lib/application&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; initRouter &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./router-loader&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; initService &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./service-loader&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; loadConfig &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./config-loader&quot;</span>);<br>classEgg &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">conf</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$app</span> = <span class="hljs-title function_">newKoa</span>(conf);<br><span class="hljs-title function_">loadConfig</span>(<span class="hljs-variable language_">this</span>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$controller</span> = <span class="hljs-title function_">initController</span>(<span class="hljs-variable language_">this</span>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$service</span> = <span class="hljs-title function_">initService</span>();<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span> = <span class="hljs-title function_">initRouter</span>(<span class="hljs-variable language_">this</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-property">stack</span>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$app</span>.<span class="hljs-title function_">use</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">routes</span>());<br>    &#125;<br><span class="hljs-title function_">start</span>(<span class="hljs-params">...arg</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$app</span>.<span class="hljs-title function_">listen</span>(...arg);<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Egg</span>;<br></code></pre></td></tr></table></figure></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li><a href="https://juejin.cn/post/6903165908815904775#heading-2">深入理解Nodejs单线程实现高并发原理</a></li><li><a href="https://segmentfault.com/a/1190000041807254?utm_source=sf-similar-article">Nodejs的进程和线程</a></li><li>Next框架</li></ol><h1 id="跨端"><a href="#跨端" class="headerlink" title="跨端"></a>跨端</h1><h2 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h2><h2 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h2><h2 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h2><h2 id="Weex"><a href="#Weex" class="headerlink" title="Weex"></a>Weex</h2><h2 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h2><h1 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h1><h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><h2 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h2><h1 id="浏览器相关"><a href="#浏览器相关" class="headerlink" title="浏览器相关"></a>浏览器相关</h1><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><ol><li><a href="https://juejin.cn/post/6844903989155217421#heading-15">前端网页如何打开一个PC本地应用</a></li><li><a href="https://juejin.cn/post/6950684708443258894">手写echarts图表</a></li></ol><h1 id="CI-x2F-CD相关"><a href="#CI-x2F-CD相关" class="headerlink" title="CI&#x2F;CD相关"></a>CI&#x2F;CD相关</h1><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h2 id="SCM"><a href="#SCM" class="headerlink" title="SCM"></a>SCM</h2>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
      <tag>Node</tag>
      
      <tag>React</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
