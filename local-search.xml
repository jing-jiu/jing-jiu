<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JavaScript设计模式与开发实践（七）模板方法模式</title>
    <link href="/jing-jiu/2023/01/12/notebooks/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%AE%9E%E8%B7%B5/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%83%EF%BC%89/"/>
    <url>/jing-jiu/2023/01/12/notebooks/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%AE%9E%E8%B7%B5/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h1><p>定义一个抽象类，将部分逻辑（公共逻辑）用具体方法以及具体构造函数的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。</p><p>不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。在父类中 <strong>封装了子类的算法框架</strong> ，它作为一个算法的模板， <strong>指导子类以何种顺序去执行哪些方法</strong> 。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>比如我们在构建一系列的 UI 组件，这些组件的构建过程一般如下所示：</p><ul><li>初始化一个 div 容器；</li><li>通过 ajax 请求拉取相应的数据；</li><li>把数据渲染到 div 容器里面，完成组件的构造；</li><li>通知用户组件渲染完毕。</li></ul><p>我们看到，任何组件的构建都遵循上面的 4 步，其中第(1)步和第(4)步是相同的。第(2)步不同的地方只是请求 ajax 的远程地址，第(3)步不同的地方是渲染数据的方式。</p><p>于是我们可以把这 4 个步骤都抽象到父类的模板方法里面，父类中还可以顺便提供第(1)步和第(4)步的具体实现。当子类继承这个父类之后，会重写模板方法里面的第(2)步和第(3)步。</p><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><blockquote><p>在像Java，C++等静态类型语言中，模板方法模式的实现非常依赖抽象类，通过抽象类定义模板方法（方法的执行顺序），以及一些公共方法的实现。子类通过继承抽象类实现剩余的方法。</p><p>抽象类的模板方法也会帮我们检测子类对于剩余逻辑的实现情况（如果子类没有实现，编译器就会报错）。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Beverage</span> &#123; <span class="hljs-comment">// 饮料抽象类</span><br><br>  <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 模板方法</span><br>    boilWater();<br>    brew();<br>    pourInCup();<br>    addCondiments();<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">boilWater</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 具体方法 boilWater</span><br>    System.out.println(<span class="hljs-string">&quot;把水煮沸&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">brew</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 抽象方法 brew</span><br><br>  <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCondiments</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 抽象方法 addCondiments</span><br><br>  <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pourInCup</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 抽象方法 pourInCup</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Coffee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Beverage</span> &#123; <span class="hljs-comment">// Coffee 类</span><br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">brew</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 子类中重写 brew 方法</span><br>    System.out.println(<span class="hljs-string">&quot;用沸水冲泡咖啡&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">pourInCup</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 子类中重写 pourInCup 方法</span><br>    System.out.println(<span class="hljs-string">&quot;把咖啡倒进杯子&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCondiments</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 子类中重写 addCondiments 方法</span><br>    System.out.println(<span class="hljs-string">&quot;加糖和牛奶&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tea</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Beverage</span> &#123; <span class="hljs-comment">// Tea 类</span><br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">brew</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 子类中重写 brew 方法</span><br>    System.out.println(<span class="hljs-string">&quot;用沸水浸泡茶叶&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">pourInCup</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 子类中重写 pourInCup 方法</span><br>    System.out.println(<span class="hljs-string">&quot;把茶倒进杯子&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCondiments</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 子类中重写 addCondiments 方法</span><br>    System.out.println(<span class="hljs-string">&quot;加柠檬&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareRecipe</span><span class="hljs-params">(Beverage beverage)</span> &#123;<br>    beverage.init();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>    <span class="hljs-type">Beverage</span> <span class="hljs-variable">coffee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Coffee</span>(); <span class="hljs-comment">// 创建 coffee 对象</span><br>    prepareRecipe(coffee); <span class="hljs-comment">// 开始泡咖啡</span><br>    <span class="hljs-comment">// 把水煮沸</span><br>    <span class="hljs-comment">// 用沸水冲泡咖啡</span><br>    <span class="hljs-comment">// 把咖啡倒进杯子</span><br>    <span class="hljs-comment">// 加糖和牛奶</span><br>    <span class="hljs-type">Beverage</span> <span class="hljs-variable">tea</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tea</span>(); <span class="hljs-comment">// 创建 tea 对象</span><br>    prepareRecipe(tea); <span class="hljs-comment">// 开始泡茶</span><br>    <span class="hljs-comment">// 把水煮沸</span><br>    <span class="hljs-comment">// 用沸水浸泡茶叶</span><br>    <span class="hljs-comment">// 把茶倒进杯子</span><br>    <span class="hljs-comment">// 加柠檬</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Javascript实现"><a href="#Javascript实现" class="headerlink" title="Javascript实现"></a>Javascript实现</h2><blockquote><p>同时如果我们不想加糖，我们可以定义一个公共方法（ <strong>称为钩子方法</strong> ），在模板方法中 <strong>通过钩子方法控制是否执行某个逻辑</strong> 。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Beverage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; &#125;;<br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">boilWater</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;把水煮沸&#x27;</span>);<br>&#125;;<br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">brew</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;子类必须重写 brew 方法&#x27;</span>);<br>&#125;;<br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">pourInCup</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;子类必须重写 pourInCup 方法&#x27;</span>);<br>&#125;;<br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">addCondiments</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;子类必须重写 addCondiments 方法&#x27;</span>);<br>&#125;;<br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">customerWantsCondiments</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 默认需要调料</span><br>&#125;;<br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">init</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">boilWater</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">brew</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">pourInCup</span>();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">customerWantsCondiments</span>()) &#123; <span class="hljs-comment">// 如果挂钩返回 true，则需要调料</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addCondiments</span>();<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CoffeeWithHook</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; &#125;;<br><span class="hljs-title class_">CoffeeWithHook</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Beverage</span>();<br><span class="hljs-title class_">CoffeeWithHook</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">brew</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;用沸水冲泡咖啡&#x27;</span>);<br>&#125;;<br><span class="hljs-title class_">CoffeeWithHook</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">pourInCup</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;把咖啡倒进杯子&#x27;</span>);<br>&#125;;<br><span class="hljs-title class_">CoffeeWithHook</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">addCondiments</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;加糖和牛奶&#x27;</span>);<br>&#125;;<br><span class="hljs-title class_">CoffeeWithHook</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">customerWantsCondiments</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">confirm</span>(<span class="hljs-string">&#x27;请问需要调料吗？&#x27;</span>);<br>&#125;;<br><span class="hljs-keyword">const</span> coffeeWithHook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CoffeeWithHook</span>();<br>coffeeWithHook.<span class="hljs-title function_">init</span>(); <br></code></pre></td></tr></table></figure><p>用JavaScript模拟抽象类和子类来并不是一个很好的选择，在Javascript中我们还可以使用高阶函数的形式，将需要在子类中实现的细节通过参数的形式传入。</p><p>把 brew、pourInCup、addCondiments 这些方法依次传入 Beverage 函数，Beverage 函数被调用之后返回构造器 F。F 类中包含了“模板方法”F.prototype.init。跟继承得到的效果一样，该“模板方法”里依然封装了饮料子类的算法框架。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Beverage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">param</span>) &#123;<br>    <span class="hljs-keyword">const</span> boilWater = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;把水煮沸&#x27;</span>);<br>    &#125;;<br>    <span class="hljs-keyword">const</span> brew = param.<span class="hljs-property">brew</span> || <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;必须传递 brew 方法&#x27;</span>);<br>    &#125;;<br>    <span class="hljs-keyword">const</span> pourInCup = param.<span class="hljs-property">pourInCup</span> || <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;必须传递 pourInCup 方法&#x27;</span>);<br>    &#125;;<br>    <span class="hljs-keyword">const</span> addCondiments = param.<span class="hljs-property">addCondiments</span> || <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;必须传递 addCondiments 方法&#x27;</span>);<br>    &#125;;<br>    <span class="hljs-keyword">const</span> F = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; &#125;;<br>    F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">init</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">boilWater</span>();<br>        <span class="hljs-title function_">brew</span>();<br>        <span class="hljs-title function_">pourInCup</span>();<br>        <span class="hljs-title function_">addCondiments</span>();<br>    &#125;;<br>    <span class="hljs-keyword">return</span> F;<br>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Coffee</span> = <span class="hljs-title class_">Beverage</span>(&#123;<br>    <span class="hljs-attr">brew</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;用沸水冲泡咖啡&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-attr">pourInCup</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;把咖啡倒进杯子&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-attr">addCondiments</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;加糖和牛奶&#x27;</span>);<br>    &#125;<br>&#125;);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Tea</span> = <span class="hljs-title class_">Beverage</span>(&#123;<br>    <span class="hljs-attr">brew</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;用沸水浸泡茶叶&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-attr">pourInCup</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;把茶倒进杯子&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-attr">addCondiments</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;加柠檬&#x27;</span>);<br>    &#125;<br>&#125;);<br><span class="hljs-keyword">const</span> coffee = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Coffee</span>();<br>coffee.<span class="hljs-title function_">init</span>();<br><span class="hljs-keyword">const</span> tea = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tea</span>();<br>tea.<span class="hljs-title function_">init</span>(); <br></code></pre></td></tr></table></figure><h2 id="好莱坞原则"><a href="#好莱坞原则" class="headerlink" title="好莱坞原则"></a>好莱坞原则</h2><p>允许底层组件将自己挂钩到高层组件中，而高层组件会决定什么时候、以何种方式去使用这些底层组件。</p><p>模板方法模式是好莱坞原则的一个典型使用场景，当我们用模板方法模式编写一个程序时，就意味着子类放弃了对自己的控制权，而是改为父类通知子类，哪些方法应该在什么时候被调用。作为子类，只负责提供一些设计上的细节。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>JavaScript设计模式与开发实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3新特性总结</title>
    <link href="/jing-jiu/2023/01/11/Framework/Vue3/Vue3%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <url>/jing-jiu/2023/01/11/Framework/Vue3/Vue3%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://v3-migration.vuejs.org/zh/">https://v3-migration.vuejs.org/zh/</a> 参考Vue3迁移指南。</p></blockquote><h1 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h1><p>Composition API是一系列 API 的集合，使我们可以使用<strong>函数</strong>而不是<strong>声明选项</strong>的方式书写 Vue 组件。它是一个概括性的术语，涵盖了以下方面的 API：</p><ul><li><a href="https://cn.vuejs.org/api/reactivity-core.html">响应式 API</a>：例如 <code>ref()</code> 和 <code>reactive()</code>，使我们可以直接创建响应式状态、计算属性和侦听器。</li><li><a href="https://cn.vuejs.org/api/composition-api-lifecycle.html">生命周期钩子</a>：例如 <code>onMounted()</code> 和 <code>onUnmounted()</code>，使我们可以在组件各个生命周期阶段添加逻辑。</li><li><a href="https://cn.vuejs.org/api/composition-api-dependency-injection.html">依赖注入</a>：例如 <code>provide()</code> 和 <code>inject()</code>，使我们可以在使用响应式 API 时，利用 Vue 的依赖注入系统。</li><li>在 Vue 3 中，组合式 API 基本上都会配合 <code>&lt;a href=&quot;https://cn.vuejs.org/api/sfc-script-setup.html&quot;&gt;&amp;lt;script setup&amp;gt;&lt;/a&gt;</code> 语法在单文件组件中使用。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; ref, onMounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-comment">// 响应式状态</span><br><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><br><span class="hljs-comment">// 更改状态、触发更新的函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>  count.<span class="hljs-property">value</span>++<br>&#125;<br><br><span class="hljs-comment">// 生命周期钩子</span><br><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`计数器初始值为 <span class="hljs-subst">$&#123;count.value&#125;</span>。`</span>)<br>&#125;)<br>&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;increment&quot;</span>&gt;</span>点击了：&#123;&#123; count &#125;&#125; 次<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="更好的逻辑复用"><a href="#更好的逻辑复用" class="headerlink" title="更好的逻辑复用"></a>更好的逻辑复用</h2><p>不同于Vue2中通过Mixins进行逻辑复用，通过组合式API我们可以通过组合函数（可以称为Vue Hooks）的形式，它完美解决了Mixins存在的一些问题。</p><ol><li>不清晰的数据来源：当使用了多个 mixin 时，实例上的数据属性来自哪个 mixin 变得不清晰，这使追溯实现和理解组件行为变得困难。这也是我们推荐在组合式函数中使用 ref + 解构模式的理由：让属性的来源在消费组件时一目了然。</li><li>命名空间冲突：多个来自不同作者的 mixin 可能会注册相同的属性名，造成命名冲突。若使用组合式函数，你可以通过在解构变量时对变量进行重命名来避免相同的键名。</li><li>隐式的跨 mixin 交流：多个 mixin 需要依赖共享的属性名来进行相互作用，这使得它们隐性地耦合在一起。而一个组合式函数的返回值可以作为另一个组合式函数的参数被传入，像普通函数那样。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;error&quot;</span>&gt;</span>failed to load<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;loading&quot;</span>&gt;</span>loading...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span>hello &#123;&#123;fullName&#125;&#125;!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; createComponent, computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> useSWR <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-swr&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">createComponent</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// useSWR帮你管理好了取数、缓存、甚至标签页聚焦重新请求、甚至Suspense...</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">const</span> &#123; data, loading, error &#125; = <span class="hljs-title function_">useSWR</span>(<span class="hljs-string">&#x27;/api/user&#x27;</span>, fetcher)</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 轻松的定义计算属性</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">const</span> fullName = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> data.<span class="hljs-property">firstName</span> + data.<span class="hljs-property">lastName</span>)</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> &#123; data, fullName, loading, error &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="更灵活的代码组织"><a href="#更灵活的代码组织" class="headerlink" title="更灵活的代码组织"></a>更灵活的代码组织</h2><p>当项目非常巨大之后，Options API可能会给我们带来一些困扰：新增一个功能可能需要在data，method，template，watch，computed几处增加代码。如官网的示例（相同的逻辑关注点标上同一种颜色）：</p><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=YjUyMDhmNThlY2IyZGRkNjgzZmY1ZGUzYmQzNGMyYjJfSjlRVEhFenpOWVlXVEF0dVUyM1V6Wm9lcUF5Z3NNb0NfVG9rZW46Ym94Y251dE92ZjROS1RjOXdvandyZDkxOUplXzE2NzM1MjM3NTI6MTY3MzUyNzM1Ml9WNA"></p><ol><li>处理相同逻辑关注点的代码被强制拆分在了不同的选项中，位于文件的不同部分。</li><li>在一个几百行的大组件中，要读懂代码中的一个逻辑关注点，需要在文件中反复上下滚动，这并不理想。</li><li>如果我们想要将一个逻辑关注点抽取重构到一个可复用的工具函数中，需要从文件的多个不同部分找到所需的正确片段。</li></ol><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZWJhNDVkNTk3OWI5MTVlMDM5ZWVlMmJlYmI3NDIzMTRfOUtMb21lckNEWUYyRmtsWm9ITkZFZWZKVzdYeFNPU2JfVG9rZW46Ym94Y250TFpMYzQwTUcxNFh0cnp0OWY4cVhiXzE2NzM1MjM3NTI6MTY3MzUyNzM1Ml9WNA"></p><h2 id="更好的类型推导"><a href="#更好的类型推导" class="headerlink" title="更好的类型推导"></a>更好的类型推导</h2><blockquote><p>Vue2中使用TS会采用vue-class-component的方式，但是这种方式比较依赖装饰器，装饰器语法目前在ECMA Script经过一次很大的改动才进行到stage3.而Vue3开发的时候提案的进度是stage2。因此在Vue3中推荐使用变量和函数的形式来书写TS代码，获得更好的类型推导。</p></blockquote><h2 id="更小的生产包体积"><a href="#更小的生产包体积" class="headerlink" title="更小的生产包体积"></a>更小的生产包体积</h2><blockquote><p>搭配 <code>&lt;script setup&gt;</code> 使用组合式 API 比等价情况下的选项式 API 更高效，对代码压缩也更友好。</p><p>这是由于 <code>&lt;script setup&gt;</code> 形式书写的组件模板被编译为了一个内联函数，和 <code>&lt;script setup&gt;</code> 中的代码位于同一作用域。</p><p>不像选项式 API 需要依赖 <code>this</code> 上下文对象访问属性，被编译的模板可以直接访问 <code>&lt;script setup&gt;</code> 中定义的变量，无需一个代码实例从中代理。这对代码压缩更友好，因为本地变量的名字可以被压缩，但对象的属性名则不能。如下（通过terser压缩 <a href="https://try.terser.org/%EF%BC%89%EF%BC%9A">https://try.terser.org/）：</a></p></blockquote><h3 id="依赖this"><a href="#依赖this" class="headerlink" title="依赖this"></a>依赖this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-title function_">sayName</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>  &#125;,<br>&#125;;<br>obj.<span class="hljs-title function_">sayName</span>()<br><span class="hljs-comment">// 压缩后</span><br>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-number">1</span>,<span class="hljs-title function_">sayName</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)&#125;&#125;).<span class="hljs-title function_">sayName</span>();<br></code></pre></td></tr></table></figure><h3 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> name = <span class="hljs-number">1</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayName</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br>&#125;<br><span class="hljs-title function_">sayName</span>()<br><span class="hljs-comment">// 压缩后</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h2 id="对比React-Hooks"><a href="#对比React-Hooks" class="headerlink" title="对比React Hooks"></a>对比React Hooks</h2><p>React Hooks 在组件每次更新时都会重新调用，这会带来了一些性能问题，并且相当影响开发体验。例如：</p><ul><li>Hooks 有严格的调用顺序，并不可以写在循环，条件分支中。</li><li>React 组件中定义的变量会被一个钩子函数闭包捕获，若开发者传递了错误的依赖数组，它会变得“过期”。这导致了 React 开发者非常依赖 ESLint 规则以确保传递了正确的依赖，然而，这些规则往往不够智能，保持正确的代价过高，在一些边缘情况时会遇到令人头疼的、不必要的报错信息。</li><li>昂贵的计算需要使用 <code>useMemo</code>，这也需要传入正确的依赖数组。</li><li>在默认情况下，传递给子组件的事件处理函数会导致子组件进行不必要的更新。子组件默认更新，并需要显式的调用 <code>useCallback</code> 作优化。这个优化同样需要正确的依赖数组，并且几乎在任何时候都需要。忽视这一点会导致默认情况下对应用进行过度渲染（不正确的使用优化函数导致），并可能在不知不觉中导致性能问题。</li><li>要解决变量闭包导致的问题，再结合并发功能，使得很难推理出一段钩子代码是什么时候运行的，并且很不好处理需要在多次渲染间保持引用 (通过 <code>useRef</code>) 的可变状态。</li></ul><p>相比起来，Vue 的组合式 API：</p><ul><li>仅调用 <code>setup()</code> 或 <code>&lt;script setup&gt;</code> 的代码一次。这使得代码更符合日常 JavaScript 的直觉，不需要担心闭包变量的问题。组合式 API 也并不限制调用顺序，还可以有条件地进行调用。</li><li>Vue 的响应性系统运行时会自动收集计算属性和侦听器的依赖，因此无需手动声明依赖。</li><li>无需手动缓存回调函数来避免不必要的组件更新。Vue 细粒度的响应性系统能够确保在绝大部分情况下组件仅执行必要的更新。</li></ul><h1 id="Setup语法糖"><a href="#Setup语法糖" class="headerlink" title="Setup语法糖"></a>Setup语法糖</h1><blockquote><p>里面的代码会被编译成组件 <code>setup()</code> 函数的内容，因此 <code>&lt;script setup&gt;</code> 中的代码会在每次组件实例被创建的时候执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;script setup&gt;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello script setup&#x27;</span>)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="顶层的绑定会被暴露给模板"><a href="#顶层的绑定会被暴露给模板" class="headerlink" title="顶层的绑定会被暴露给模板"></a>顶层的绑定会被暴露给模板</h2><blockquote><p>当使用 <code>&lt;script setup&gt;</code> 的时候，任何在 <code>&lt;script setup&gt;</code> 声明的顶层的绑定 (包括变量，函数声明，以及 import 导入的内容) 都能在模板中直接使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;script setup&gt;<br><span class="hljs-comment">// import</span><br><span class="hljs-keyword">import</span> &#123; capitalize &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./helpers&#x27;</span><br><span class="hljs-comment">// 变量</span><br><span class="hljs-keyword">const</span> msg = <span class="hljs-string">&#x27;Hello!&#x27;</span><br><span class="hljs-comment">// 函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">log</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg)<br>&#125;<br>&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;log&quot;</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; capitalize(&#x27;hello&#x27;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure></blockquote><h2 id="defineProps-和-defineEmits"><a href="#defineProps-和-defineEmits" class="headerlink" title="defineProps() 和 defineEmits()"></a>defineProps() 和 defineEmits()</h2><blockquote><p>为了在声明 <code>props</code> 和 <code>emits</code> 选项时获得完整的类型推导支持，我们可以使用 <code>defineProps</code> 和 <code>defineEmits</code> API，它们将自动地在 <code>&lt;script setup&gt;</code> 中可用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;script setup&gt;<br><span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>(&#123;<br>  <span class="hljs-attr">foo</span>: <span class="hljs-title class_">String</span><br>&#125;)<br><br><span class="hljs-keyword">const</span> emit = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-string">&#x27;delete&#x27;</span>])<br><span class="hljs-comment">// setup 代码</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="defineExpose"><a href="#defineExpose" class="headerlink" title="defineExpose()"></a>defineExpose()</h2><blockquote><p>使用 <code>&lt;script setup&gt;</code> 的组件是默认关闭的——即通过模板引用或者 <code>$parent</code> 链获取到的组件的公开实例，不会暴露任何在 <code>&lt;script setup&gt;</code> 中声明的绑定。</p><p>可以通过 <code>defineExpose</code> 编译器宏来显式指定在 <code>&lt;script setup&gt;</code> 组件中要暴露出去的属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span><br><span class="hljs-keyword">const</span> b = <span class="hljs-title function_">ref</span>(<span class="hljs-number">2</span>)<br><br><span class="hljs-title function_">defineExpose</span>(&#123;<br>  a,<br>  b<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="与普通的-lt-script-gt-一起使用"><a href="#与普通的-lt-script-gt-一起使用" class="headerlink" title="与普通的 &lt;script&gt; 一起使用"></a>与普通的 <code>&lt;script&gt;</code> 一起使用</h2><p>里面的代码会被编译成组件 <code>setup()</code> 函数的内容，因此在某些场景并不适用Setup而需要使用普通的 <code>&lt;script&gt;</code>。</p><ul><li>声明无法在 <code>&lt;script setup&gt;</code> 中声明的选项，例如 <code>inheritAttrs</code> 或插件的自定义选项。</li><li>声明模块的具名导出 (named exports)。</li><li>运行只需要在模块作用域执行一次的副作用，或是创建单例对象。</li></ul><h1 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h1><blockquote><p><code>&lt;Teleport&gt;</code> 是一个内置组件，它可以将一个组件内部的一部分模板“传送”到该组件的 DOM 结构外层的位置去，类似React的Teleport组件,除了 <code>&lt;Teleport&gt;</code>，还新增了 <code>&lt;``Fragments``&gt;</code>，<code>&lt;Suspense&gt;</code>。</p><p>如果遇到这种场景：一个组件模板的一部分在逻辑上从属于该组件，但从整个应用视图的角度来看，它在 DOM 中应该被渲染在整个 Vue 应用外部的其他地方，那么 <code>&lt;Teleport&gt;</code>是一个很好的解决方案。</p></blockquote><h2 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Modal</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Modal.vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">const</span> showModal = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>)<br>&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;show-modal&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showModal = true&quot;</span>&gt;</span>Show Modal<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Teleport</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;body&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 使用这个 modal 组件，传入 prop --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Modal</span> <span class="hljs-attr">:show</span>=<span class="hljs-string">&quot;showModal&quot;</span> @<span class="hljs-attr">close</span>=<span class="hljs-string">&quot;showModal = false&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">header</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>custom header<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    &lt;/Modal &gt;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Teleport</span>&gt;</span></span><br><span class="language-xml">  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="Modal-vue"><a href="#Modal-vue" class="headerlink" title="Modal.vue"></a>Modal.vue</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;script setup&gt;<br><span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>(&#123;<br>  <span class="hljs-attr">show</span>: <span class="hljs-title class_">Boolean</span><br>&#125;)<br>&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;modal&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;show&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-mask&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-wrapper&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-container&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>default header<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;body&quot;</span>&gt;</span>default body<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span></span><br><span class="language-xml">              default footer</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-default-button&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$emit(&#x27;close&#x27;)&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              &gt;</span>OK<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Transition</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.modal-mask</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">position</span>: fixed;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">9998</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>);</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">display</span>: table;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">0.3s</span> ease;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.modal-wrapper</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">display</span>: table-cell;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">vertical-align</span>: middle;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.modal-container</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span> auto;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span> <span class="hljs-number">30px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">2px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">8px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.33</span>);</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.3s</span> ease;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.modal-header</span> <span class="hljs-selector-tag">h3</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#42b983</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.modal-body</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.modal-default-button</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">float</span>: right;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.modal-enter-from</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.modal-leave-to</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.modal-enter-from</span> <span class="hljs-selector-class">.modal-container</span>,</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.modal-leave-to</span> <span class="hljs-selector-class">.modal-container</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  -webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.1</span>);</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.1</span>);</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li><p>css中允许使用v-bind指令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;script setup&gt;<br><span class="hljs-keyword">const</span> theme = &#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span><br>&#125;<br>&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">p</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">v-bind</span>(<span class="hljs-string">&#x27;theme.color&#x27;</span>);</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>CSS Modules</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;$style.red&quot;</span>&gt;</span>This should be red<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">module</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.red</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">color</span>: red;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>生态的改变<br>Vue 3 的支持库进行了重大更新。以下是新的默认建议的摘要:</p><ul><li>新版本的 Router, Devtools &amp; test utils 来支持 Vue 3</li><li>构建工具链: Vue CLI -&gt; <a href="https://cn.vitejs.dev/">Vite</a></li><li>状态管理: Vuex -&gt; <a href="https://pinia.vuejs.org/zh/index.html">Pinia</a></li><li>IDE 支持: Vetur -&gt; <a href="https://marketplace.visualstudio.com/items?itemName=johnsoncodehk.volar">Volar</a></li><li>新的 TypeScript 命令行工具: <a href="https://github.com/johnsoncodehk/volar/tree/master/vue-language-tools/vue-tsc">vue-tsc</a></li><li>静态网站生成: VuePress -&gt; <a href="https://vitepress.vuejs.org/">VitePress</a></li><li>JSX: <code>@vue/babel-preset-jsx</code> -&gt; <code>&lt;a href=&quot;https://github.com/vuejs/babel-plugin-jsx&quot;&gt;@vue/babel-plugin-jsx&lt;/a&gt;</code></li></ul></li><li><p><a href="https://v3-migration.vuejs.org/zh/breaking-changes/">非兼容性改变</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Framework</category>
      
      <category>Vue</category>
      
      <category>Vue3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript设计模式与开发实践（六）命令模式&amp;组合模式</title>
    <link href="/jing-jiu/2023/01/10/notebooks/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%AE%9E%E8%B7%B5/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <url>/jing-jiu/2023/01/10/notebooks/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%AE%9E%E8%B7%B5/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><blockquote><p>有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么，此时希望用一种松耦合的方式来设计软件，使得请求发送者和请求接收者能够消除彼此之间的耦合关系。</p><ol><li>MenuBar 实现具体的操作</li><li><strong>RefreshMenuBarCommand</strong> 执行这个操作，但是不知道操作是什么，接收者是谁</li><li><strong>setCommand</strong> 为DOM对象绑定对应的指令</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<br><br><span class="hljs-keyword">const</span> setCommand = <span class="hljs-keyword">function</span> (<span class="hljs-params">button, command</span>) &#123;<br>    button.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        command.<span class="hljs-title function_">execute</span>();<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MenuBar</span> = &#123;<br>    <span class="hljs-attr">refresh</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;刷新菜单界面&#x27;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">RefreshMenuBarCommand</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">receiver</span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">execute</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>            receiver.<span class="hljs-title function_">refresh</span>();<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> rfCommand = <span class="hljs-title class_">RefreshMenuBarCommand</span>(<span class="hljs-title class_">MenuBar</span>);<br><br><span class="hljs-title function_">setCommand</span>(button, rfCommand);<br></code></pre></td></tr></table></figure><h2 id="撤销-amp-重做"><a href="#撤销-amp-重做" class="headerlink" title="撤销&amp;重做"></a>撤销&amp;重做</h2><blockquote><p>保存上一次做的内容，当调用undo时返回到上一次的状态。</p><ol><li>此时我们需要维护一个堆栈，因为我们可能希望撤销到很多步之前。</li><li>然后通过指针移动进行撤销操作，正常情况下指针指向当前的操作，撤销时指针回退。</li><li>既然有了指针和堆栈，那么我们也可以顺带实现重做（redo），只不过是将指针前移改成后移。</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;undo&quot;</span>&gt;</span>undo<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span>update<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> undo = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;undo&#x27;</span>);<br><span class="hljs-keyword">const</span> redo = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;redo&#x27;</span>);<br><span class="hljs-keyword">const</span> update = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;update&#x27;</span>);<br><span class="hljs-keyword">const</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;input&#x27;</span>);<br><span class="hljs-keyword">const</span> text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;text&#x27;</span>);<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InputCommand</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">receiver, dom</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">receiver</span> = receiver<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">dom</span> = dom<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = <span class="hljs-literal">null</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span> = []<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">current</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-title function_">execute</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">dom</span>.<span class="hljs-property">value</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">current</span>++<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">receiver</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)<br>    &#125;<br>    <span class="hljs-title function_">undo</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">receiver</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>[--<span class="hljs-variable language_">this</span>.<span class="hljs-property">current</span>])<br>    &#125;<br>    <span class="hljs-title function_">redo</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">receiver</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>[++<span class="hljs-variable language_">this</span>.<span class="hljs-property">current</span>])<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> inputCommand = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputCommand</span>(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    text.<span class="hljs-property">innerText</span> = value<br>&#125;, input)<br><br>update.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    inputCommand.<span class="hljs-title function_">execute</span>()<br>&#125;<br><br>undo.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    inputCommand.<span class="hljs-title function_">undo</span>()<br>&#125;<br><br>redo.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    inputCommand.<span class="hljs-title function_">redo</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><blockquote><p>一般来讲，我们会根据单一职责原则，每个命令负责一个原子化的操作，然后将这些命令组合起来。</p><ol><li>唱（sing）</li><li>跳（sang）</li><li>Rap（rap）</li><li>篮球（ball）</li></ol><p>同时我们不希望上一个命令还没有执行完的时候就执行下一个命令，我们就需要回调函数或者发布订阅的形式来保证命令的有序执行。</p><p>此外我们可能会每次执行一组命令，之后回退也希望回退的单位是按照组划分，这样的形式被我们成为 <strong>宏命令</strong> 。例如键盘或者鼠标的 <strong>宏定义</strong> ，按下某个按键执行一组动作，就是宏命令的一种体现。</p></blockquote><h1 id="延申—组合模式"><a href="#延申—组合模式" class="headerlink" title="延申—组合模式"></a>延申—组合模式</h1><blockquote><p>上面提到了宏命令，可以执行一组子命令，而在组合模式中，也可以实现相同的操作。</p></blockquote><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><blockquote><p>组合模式是对象组合成树形结构，以表示“部分-整体”的层次结构。 除了用来表示树形结构之外，组合模式的另一个好处是通过对象的多态性表现，使得用户对单个对象和组合对象的使 用具有一致性。</p><ol><li>表示树形结构。组合模式提供了一种遍历树形结构的方案，通过调用组合对象的execute方法，程序会递归调用组合对象下面的叶对象的execute方法，所以我们只需要一次操作就可以完成多件事情。组合模式可以非常方便地描述对象部分-整体层次结构。</li><li>利用对象多态性统一对待组合对象和单个对象。利用对象的多态性表现，可以使客户端忽略组合对象和单个对象的不同。在组合模式中，客户将统一地使用组合结构中的所有对象，而不需要关心它究竟是组合对象还是单个对象。</li></ol></blockquote><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><blockquote><p>由于Javascript类型判断是通过鸭子类型的方式，因此我们只需要保证调用的接口一致（均为execute），而在Java这种结构化类型语言中，需要实现一个抽象类，根节点和叶子节点的类都继承这个抽象类来实现组合模式。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">executeList</span> = [];<br>  &#125;<br>  <span class="hljs-title function_">execute</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">executeList</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>      item.<span class="hljs-title function_">execute</span>();<br>    &#125;);<br>  &#125;<br>  <span class="hljs-title function_">add</span>(<span class="hljs-params">execute</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">executeList</span>.<span class="hljs-title function_">push</span>(execute);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value;<br>  &#125;<br>  <span class="hljs-title function_">execute</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);<br>  &#125;<br>  <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;普通对象不允许添加叶子节点&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> father1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Father</span>();<br><span class="hljs-keyword">const</span> child1_1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&quot;1-1&quot;</span>);<br><span class="hljs-keyword">const</span> child1_2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&quot;1-2&quot;</span>);<br><span class="hljs-keyword">const</span> child1_3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&quot;1-3&quot;</span>);<br>father1.<span class="hljs-title function_">add</span>(child1_1);<br>father1.<span class="hljs-title function_">add</span>(child1_2);<br>father1.<span class="hljs-title function_">add</span>(child1_3);<br><span class="hljs-keyword">const</span> father2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Father</span>();<br><span class="hljs-keyword">const</span> child2_1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&quot;2-1&quot;</span>);<br><span class="hljs-keyword">const</span> child2_2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&quot;2-2&quot;</span>);<br><span class="hljs-keyword">const</span> child2_3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&quot;2-3&quot;</span>);<br>father2.<span class="hljs-title function_">add</span>(child2_1);<br>father2.<span class="hljs-title function_">add</span>(child2_2);<br>father2.<span class="hljs-title function_">add</span>(child2_3);<br><br>father1.<span class="hljs-title function_">add</span>(father2);<br><br>father1.<span class="hljs-title function_">execute</span>(); <span class="hljs-comment">// 1-1 1-2 1-3 2-1 2-2 2-3</span><br></code></pre></td></tr></table></figure><blockquote><p>此时father1就是一个树型结构，当调用father1的execute方法，会依次调用子节点的execute方法，这样可以很方便的遍历整棵树。</p></blockquote><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=YTdiYmUwN2RkN2U3MjAyMTM3OTgzNWVhYjM2YTA2NzVfODBRUmIyaGtxSkQ1NUhOSE9Xc1BUajd4dWhUOGQwR2tfVG9rZW46Ym94Y25WdmZGYk05NnQ1cWx4R29JY2l6NGpjXzE2NzM0MzY2ODg6MTY3MzQ0MDI4OF9WNA"></p><blockquote><p>同时新增和删除节点也会变得很方便，例如为father2添加一个子节点child2_4，为father1删除子节点child1_1。</p><p>只需要：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> child2_4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&quot;2-4&quot;</span>);<br>father2.<span class="hljs-title function_">add</span>(child2_4);<br>father1.<span class="hljs-title function_">remove</span>(child1_1);<br><br>father1.<span class="hljs-title function_">execute</span>(); <span class="hljs-comment">// 1-2 1-3 2-1 2-2 2-3 2-4</span><br><br><span class="hljs-comment">// Father类新增remove方法</span><br><span class="hljs-title function_">remove</span>(<span class="hljs-params">execute</span>) &#123;<br>    <span class="hljs-keyword">const</span> index = <span class="hljs-variable language_">this</span>.<span class="hljs-property">executeList</span>.<span class="hljs-title function_">indexOf</span>(execute);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">executeList</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><blockquote><ul><li>表示对象的部分—整体层次结构。</li></ul><p>组合模式可以方便地构造一棵树来表示对象的部分—整体结构。特别是我们在开发期间不确定这棵树到底存在多少层次的时候。在树的构造最终完成之后，只需要通过请求树的最顶层对象，便能对整棵树做统一的操作。在组合模式中增加和删除树的节点非常方便，并且符合开放—封闭原则。</p><ul><li>客户希望统一对待树中的所有对象。</li></ul><p>组合模式使客户可以忽略组合对象和叶对象的区别，客户在面对这棵树的时候，不用关心当前正在处理的对象是组合对象还是叶对象，也就不用写一堆 if、else 语句来分别处理它们。组合对象和叶对象会各自做自己正确的事情，这是组合模式最重要的能力。</p></blockquote><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><blockquote><ul><li>它可能会产生一个这样的系统：系统中的每个对象看起来都与其他对象差不多。它们的区别只有在运行的时候会才会显现出来，这会使代码难以理解。</li><li>如果通过组合模式创建了太多的对象，那么这些对象可能会让系统负担不起。</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>JavaScript设计模式与开发实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔试题：实现树组件handleUnCheck方法</title>
    <link href="/jing-jiu/2023/01/09/%E7%AC%94%E8%AF%95%E9%A2%98/handleUnCheck/"/>
    <url>/jing-jiu/2023/01/09/%E7%AC%94%E8%AF%95%E9%A2%98/handleUnCheck/</url>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote><p>假设我们在开发一个可check的树组件，请编写一个handleUnCheck方法，用于实现摸个树节点被取消选中后，计算整棵树的选中状态，所有子孙节点需要被取消选中。</p><p>方法参数说明：</p><ol><li>treeData - 嵌套的树结构，结构面熟见下面代码块中的TreeData。</li><li>preCheckedKeys - 之前的选中状态，值内容为选中节点的key数组。</li><li>key - 将要被取消选中的节点key。</li></ol><p>方法输出说明：取消选中之后的树选中状态，值内容为选中节点的key数组。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Key</span> = <span class="hljs-built_in">string</span>;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">TreeData</span> = <span class="hljs-title class_">Array</span>&lt;&#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-title class_">Key</span>;<br>    children?: <span class="hljs-title class_">TreeData</span>;<br>&#125;&gt;;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">CheckedKeys</span> = <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">Key</span>&gt;;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-title class_">Key</span>,<br>    <span class="hljs-attr">parent</span>: <span class="hljs-built_in">string</span> | <span class="hljs-literal">null</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleUnCheck</span>(<span class="hljs-params"></span><br><span class="hljs-params">    treeData: TreeData,</span><br><span class="hljs-params">    preCheckedKeys: CheckedKeys,</span><br><span class="hljs-params">    key: Key,</span><br><span class="hljs-params"></span>): <span class="hljs-title class_">CheckedKeys</span> &#123;<br>    <span class="hljs-comment">// 请实现</span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">TREE_DATA</span> = [&#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;a-1&#x27;</span>,<br>    <span class="hljs-attr">children</span>: [<br>        &#123;<br>            <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;b-1&#x27;</span>,<br>            <span class="hljs-attr">children</span>: [<br>                &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;c-1-1&#x27;</span> &#125;,<br>                &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;c-1-2&#x27;</span> &#125;<br>            ]<br>        &#125;,<br>        &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;b-2&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;b-3&#x27;</span> &#125;<br>    ]<br>&#125;, &#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;a-2&#x27;</span><br>&#125;];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">handleUnCheck</span>(<span class="hljs-variable constant_">TREE_DATA</span>, [<span class="hljs-string">&#x27;a-1&#x27;</span>, <span class="hljs-string">&#x27;b-1&#x27;</span>, <span class="hljs-string">&#x27;b-2&#x27;</span>, <span class="hljs-string">&#x27;c-1-1&#x27;</span>], <span class="hljs-string">&#x27;c-1-1&#x27;</span>)); <span class="hljs-comment">// [&#x27;a-1&#x27;, &#x27;b-1&#x27;, &#x27;b-2&#x27;]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">handleUnCheck</span>(<span class="hljs-variable constant_">TREE_DATA</span>, [<span class="hljs-string">&#x27;a-1&#x27;</span>, <span class="hljs-string">&#x27;b-1&#x27;</span>, <span class="hljs-string">&#x27;c-1-1&#x27;</span>, <span class="hljs-string">&#x27;a-2&#x27;</span>], <span class="hljs-string">&#x27;a-1&#x27;</span>)); <span class="hljs-comment">// [&#x27;a-2&#x27;]</span><br></code></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><blockquote><pre><code class="hljs">将TREE_DATA从树状结构转为数组，存放每个节点以及他的父节点，&#123; key:xxx,parent:xxx &#125;的形式。</code></pre><ul><li>采用递归遍历整棵树，生成对应的数组allNodes。</li><li>之后根据handleUnCheck传入的第三个参数key，在allNodes中查找对应需要删除的节点生成removeNodes。</li><li>allNodes中与其key相同或者parent相同，或者parent的parent等于key都需要删除。因此也需要递归。</li><li>之后求removeNodes和preCheckedKeys的差集。</li></ul></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Key</span> = <span class="hljs-built_in">string</span>;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">TreeData</span> = <span class="hljs-title class_">Array</span>&lt;&#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-title class_">Key</span>;<br>    children?: <span class="hljs-title class_">TreeData</span>;<br>&#125;&gt;;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">CheckedKeys</span> = <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">Key</span>&gt;;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-title class_">Key</span>,<br>    <span class="hljs-attr">parent</span>: <span class="hljs-built_in">string</span> | <span class="hljs-literal">null</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleUnCheck</span>(<span class="hljs-params"></span><br><span class="hljs-params">    treeData: TreeData,</span><br><span class="hljs-params">    preCheckedKeys: CheckedKeys,</span><br><span class="hljs-params">    key: Key,</span><br><span class="hljs-params"></span>): <span class="hljs-title class_">CheckedKeys</span> &#123;<br>    <span class="hljs-comment">// 请实现</span><br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">TreeObj</span> = <span class="hljs-title class_">TreeData</span>[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment">// 拿到所有的叶子节点</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">allNodes</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">Node</span>&gt; = []<br>    <span class="hljs-comment">// 需要删除的节点</span><br>    <span class="hljs-keyword">const</span> removeNodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([key])<br><br>    treeData.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">treeDataItem</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span><br>        <span class="hljs-title function_">getTreeNodeParent</span>(treeDataItem, count)<br>    &#125;)<br>    <span class="hljs-title function_">getRemoveTreeNodeList</span>(allNodes, key)<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">res</span>: <span class="hljs-title class_">CheckedKeys</span> = preCheckedKeys.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> !removeNodes.<span class="hljs-title function_">has</span>(item)<br>    &#125;)<br>    <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getRemoveTreeNodeList</span>(<span class="hljs-params">allNodes, removeKey: Key</span>) &#123;<br>        allNodes.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (item.<span class="hljs-property">parent</span> === removeKey) &#123;<br>                removeNodes.<span class="hljs-title function_">add</span>(item.<span class="hljs-property">key</span>)<br>                <span class="hljs-keyword">const</span> res = <span class="hljs-title function_">isParent</span>(allNodes, item.<span class="hljs-property">key</span>)<br>                <span class="hljs-keyword">if</span> (res &amp;&amp; !removeNodes.<span class="hljs-title function_">has</span>(res <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>)) &#123;<br>                    <span class="hljs-title function_">getRemoveTreeNodeList</span>(allNodes, item.<span class="hljs-property">key</span>)<br>                &#125;<br>            &#125;<br>        &#125;)<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">isParent</span>(<span class="hljs-params">arr: <span class="hljs-built_in">Array</span>&lt;Node&gt;, itemKey: Key</span>): <span class="hljs-built_in">boolean</span> | <span class="hljs-built_in">string</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i].<span class="hljs-property">parent</span> === itemKey) &#123;<br>                <span class="hljs-keyword">return</span> arr[i].<span class="hljs-property">key</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getTreeNodeParent</span>(<span class="hljs-params">parent: TreeObj, count: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-keyword">if</span> (count === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 第一层的parent为null</span><br>            allNodes.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">key</span>: parent.<span class="hljs-property">key</span>, <span class="hljs-attr">parent</span>: <span class="hljs-literal">null</span> &#125; <span class="hljs-keyword">as</span> <span class="hljs-title class_">Node</span>)<br>        &#125;<br>        count++<br>        parent.<span class="hljs-property">children</span> &amp;&amp; parent.<span class="hljs-property">children</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>            allNodes.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">key</span>: item.<span class="hljs-property">key</span>, <span class="hljs-attr">parent</span>: parent.<span class="hljs-property">key</span> &#125; <span class="hljs-keyword">as</span> <span class="hljs-title class_">Node</span>)<br>            <span class="hljs-keyword">if</span> (item.<span class="hljs-property">children</span>) &#123;<br>                <span class="hljs-title function_">getTreeNodeParent</span>(item, count++)<br>            &#125;<br>        &#125;)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">TREE_DATA</span> = [&#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;a-1&#x27;</span>,<br>    <span class="hljs-attr">children</span>: [<br>        &#123;<br>            <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;b-1&#x27;</span>,<br>            <span class="hljs-attr">children</span>: [<br>                &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;c-1-1&#x27;</span> &#125;,<br>                &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;c-1-2&#x27;</span> &#125;<br>            ]<br>        &#125;,<br>        &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;b-2&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;b-3&#x27;</span> &#125;<br>    ]<br>&#125;, &#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;a-2&#x27;</span><br>&#125;];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">handleUnCheck</span>(<span class="hljs-variable constant_">TREE_DATA</span>, [<span class="hljs-string">&#x27;a-1&#x27;</span>, <span class="hljs-string">&#x27;b-1&#x27;</span>, <span class="hljs-string">&#x27;b-2&#x27;</span>, <span class="hljs-string">&#x27;c-1-1&#x27;</span>], <span class="hljs-string">&#x27;c-1-1&#x27;</span>)); <span class="hljs-comment">// [&#x27;a-1&#x27;, &#x27;b-1&#x27;, &#x27;b-2&#x27;]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">handleUnCheck</span>(<span class="hljs-variable constant_">TREE_DATA</span>, [<span class="hljs-string">&#x27;a-1&#x27;</span>, <span class="hljs-string">&#x27;b-1&#x27;</span>, <span class="hljs-string">&#x27;c-1-1&#x27;</span>, <span class="hljs-string">&#x27;a-2&#x27;</span>], <span class="hljs-string">&#x27;a-1&#x27;</span>)); <span class="hljs-comment">// [&#x27;a-2&#x27;]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>笔试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript设计模式与开发实践（五）发布—订阅模式</title>
    <link href="/jing-jiu/2023/01/08/notebooks/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%AE%9E%E8%B7%B5/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <url>/jing-jiu/2023/01/08/notebooks/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%AE%9E%E8%B7%B5/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="发布—订阅模式"><a href="#发布—订阅模式" class="headerlink" title="发布—订阅模式"></a>发布—订阅模式</h1><blockquote><p>它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。在 JavaScript 开发中，可以用事件模型来实现。</p></blockquote><h2 id="订阅—发布"><a href="#订阅—发布" class="headerlink" title="订阅—发布"></a>订阅—发布</h2><blockquote><p>怎样实现一个简易的发布订阅模式呢？</p><ol><li>首先我们需要一个发布者，订阅者通过调用发布者提供的函数<strong>订阅</strong>某个类型的消息、消息更新后<strong>获取</strong>消息。</li><li>同时我们在JavaScript中采事件模型的方式来实现，那么我们需要一个存储订阅者回调函数的地方。</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Event</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">clientMap</span> = &#123;&#125;;<br>    &#125;<br>    <span class="hljs-title function_">listen</span>(<span class="hljs-params">key, fn</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">clientMap</span>[key]) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">clientMap</span>[key] = [];<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">clientMap</span>[key].<span class="hljs-title function_">push</span>(fn);<br>    &#125;<br>    <span class="hljs-title function_">emit</span>(<span class="hljs-params">key, ...args</span>) &#123;<br>        <span class="hljs-keyword">const</span> fns = <span class="hljs-variable language_">this</span>.<span class="hljs-property">clientMap</span>[key];<br>        <span class="hljs-keyword">if</span> (!fns || fns.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        fns.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">fn</span>) =&gt;</span> &#123;<br>            fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args);<br>        &#125;);<br>    &#125;<br>    <span class="hljs-title function_">remove</span>(<span class="hljs-params">key, fn</span>) &#123;<br>        <span class="hljs-keyword">const</span> fns = <span class="hljs-variable language_">this</span>.<span class="hljs-property">clientMap</span>[key]<br>        <span class="hljs-keyword">if</span> (!fn) &#123;<br>            fns &amp;&amp; (<span class="hljs-variable language_">this</span>.<span class="hljs-property">clientMap</span>[key].<span class="hljs-property">length</span> = <span class="hljs-number">0</span>)<br>        &#125;<br>        fns.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (fn === item || fn.<span class="hljs-property">name</span> === item.<span class="hljs-property">name</span> || fn === item.<span class="hljs-property">fn</span>) &#123;<br>                fns.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>)<br>            &#125;<br>        &#125;)<br>    &#125;<br>    <span class="hljs-comment">// 只订阅一次</span><br>    <span class="hljs-title function_">once</span>(<span class="hljs-params">key, fn</span>) &#123;<br>        <span class="hljs-comment">// 先绑定，调用后删除 我们不直接给事件绑定传入的回调 而是在外面包一层</span><br>        <span class="hljs-comment">// on.fn = fn 这行代码是为了在取消订阅中进行判断。</span><br>        <span class="hljs-keyword">let</span> _this = <span class="hljs-variable language_">this</span>;<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">on</span>(<span class="hljs-params"></span>) &#123;<br>            _this.<span class="hljs-title function_">remove</span>(key, on);<br>            fn.<span class="hljs-title function_">apply</span>(_this, <span class="hljs-variable language_">arguments</span>);<br>        &#125;<br>        on.<span class="hljs-property">fn</span> = fn;<br>        _this.<span class="hljs-title function_">emit</span>(key, on);<br>        <span class="hljs-keyword">return</span> _this;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MessageEvent</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Event</span>();<br><br><span class="hljs-comment">// 订阅</span><br><span class="hljs-title class_">MessageEvent</span>.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&#x27;create&#x27;</span>, <span class="hljs-keyword">function</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;event&#x27;</span>, name);<br>&#125;)<br><br><span class="hljs-comment">// 发布</span><br><span class="hljs-title class_">MessageEvent</span>.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;create&#x27;</span>, <span class="hljs-string">&#x27;notify&#x27;</span>)<br><br><span class="hljs-comment">// 删除订阅</span><br><span class="hljs-title class_">MessageEvent</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;create&#x27;</span>, <span class="hljs-keyword">function</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;event&#x27;</span>, name);<br>&#125;)<br><br><span class="hljs-title class_">MessageEvent</span>.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;create&#x27;</span>, <span class="hljs-string">&#x27;notify&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="发布—订阅"><a href="#发布—订阅" class="headerlink" title="发布—订阅"></a>发布—订阅</h2><blockquote><p>正常情况下我们是先订阅再发布，但是某些场景可能我们一开始并没有进行订阅，那这个时间段的消息就不会被收集，当我们订阅后自然也无法收到这些消息。因此我们需要一个缓存的数组，将消息缓存下来，当有订阅时，将缓存的消息发布。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Event</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">clientMap</span> = &#123;&#125;;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">cacheMap</span> = &#123;&#125;;<br>    &#125;<br>    <span class="hljs-title function_">listen</span>(<span class="hljs-params">key, fn</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">clientMap</span>[key]) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">clientMap</span>[key] = []<br>        &#125;<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">clientMap</span>[key].<span class="hljs-title function_">push</span>(fn);<br><br><span class="hljs-comment">// 有离线事件时，需要将缓存的离线事件也执行</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">cacheMap</span>[key] &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">cacheMap</span>[key].<span class="hljs-property">length</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">cacheMap</span>[key].<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">cacheFn</span> =&gt;</span> &#123;<br>                cacheFn.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, key)<br>            &#125;);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">cacheMap</span>[key] = <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">emit</span>(<span class="hljs-params">key, ...args</span>) &#123;<br>        <span class="hljs-keyword">const</span> fns = <span class="hljs-variable language_">this</span>.<span class="hljs-property">clientMap</span>[key];<br>        <span class="hljs-keyword">if</span> (!fns || fns.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">// 如果没有北订阅 需要将事件缓存下来，等有订阅的时候发布</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">cacheMap</span>[key]) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">cacheMap</span>[key] = []<br>            &#125;<br>constcacheFn = <span class="hljs-function">() =&gt;</span> &#123;<br>returnthis.<span class="hljs-title function_">emit</span>(key, ...args)<br>            &#125;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">cacheMap</span>[key].<span class="hljs-title function_">push</span>(cacheFn)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        fns.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">fn</span>) =&gt;</span> &#123;<br>            fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args);<br>        &#125;);<br>    &#125;<br>    <span class="hljs-title function_">remove</span>(<span class="hljs-params">key, fn</span>) &#123;<br>        <span class="hljs-keyword">const</span> fns = <span class="hljs-variable language_">this</span>.<span class="hljs-property">clientMap</span>[key]<br>        <span class="hljs-keyword">if</span> (!fn) &#123;<br>            fns &amp;&amp; (<span class="hljs-variable language_">this</span>.<span class="hljs-property">clientMap</span>[key].<span class="hljs-property">length</span> = <span class="hljs-number">0</span>)<br>        &#125;<br>        fns.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (fn === item || fn.<span class="hljs-property">name</span> === item.<span class="hljs-property">name</span> || fn === item.<span class="hljs-property">fn</span>) &#123;<br>                fns.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>)<br>            &#125;<br>        &#125;)<br>    &#125;<br>    <span class="hljs-comment">// 只订阅一次</span><br>    <span class="hljs-title function_">once</span>(<span class="hljs-params">key, fn</span>) &#123;<br>        <span class="hljs-comment">// 先绑定，调用后删除 我们不直接给事件绑定传入的回调 而是在外面包一层</span><br>        <span class="hljs-comment">// on.fn = fn 这行代码是为了在取消订阅中进行判断。</span><br>        <span class="hljs-keyword">let</span> _this = <span class="hljs-variable language_">this</span>;<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">on</span>(<span class="hljs-params"></span>) &#123;<br>            _this.<span class="hljs-title function_">remove</span>(key, on);<br>            fn.<span class="hljs-title function_">apply</span>(_this, <span class="hljs-variable language_">arguments</span>);<br>        &#125;<br>        on.<span class="hljs-property">fn</span> = fn;<br>        _this.<span class="hljs-title function_">emit</span>(key, on);<br>        <span class="hljs-keyword">return</span> _this;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MessageEvent</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Event</span>();<br><br><span class="hljs-comment">// 发布</span><br><span class="hljs-title class_">MessageEvent</span>.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;create&#x27;</span>, <span class="hljs-string">&#x27;notify&#x27;</span>)<br><br><span class="hljs-comment">// 订阅</span><br><span class="hljs-title class_">MessageEvent</span>.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&#x27;create&#x27;</span>, <span class="hljs-keyword">function</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;event&#x27;</span>, name);<br>&#125;)<br><br><span class="hljs-comment">// 订阅</span><br><span class="hljs-title class_">MessageEvent</span>.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&#x27;beforeCreated&#x27;</span>, <span class="hljs-keyword">function</span> <span class="hljs-title function_">beforeCreated</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;beforeCreated&#x27;</span>, name);<br>&#125;)<br><br><span class="hljs-title class_">MessageEvent</span>.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;beforeCreated&#x27;</span>, <span class="hljs-string">&#x27;notify&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><blockquote><p>在JavaScript很多类库中都能看到发布订阅模式的思想。例如：</p><ol><li>Vue的事件总线（Event Bus 父子组件通讯）</li><li>Vue2的响应式实现（Observer Dep Watcher类实现的观察者模式）</li><li>Mobx的发布订阅 @observer</li><li>Socket.io</li><li>……</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>JavaScript设计模式与开发实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript设计模式与开发实践（四）迭代器模式</title>
    <link href="/jing-jiu/2023/01/07/notebooks/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%AE%9E%E8%B7%B5/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/jing-jiu/2023/01/07/notebooks/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%AE%9E%E8%B7%B5/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h1><blockquote><p>迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象 的内部表示。</p><p>迭代器模式可以把迭代的过程从业务逻辑中分离出来，在使用迭代器模式之后，即使不知道对象的内部构造，也可以按顺序访问其中的每个元素。</p></blockquote><h2 id="内部迭代器"><a href="#内部迭代器" class="headerlink" title="内部迭代器"></a>内部迭代器</h2><blockquote><p>可以类比成JavaScript数组中的forEach方法。函数的内部已经定义好了迭代规则，它完全接手整个迭代过程，外部只需要一次初始调用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">forEach</span>(<span class="hljs-params">arr, callback</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (callback) &#123;<br>            <span class="hljs-title function_">callback</span>(i, arr[i])<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-title function_">forEach</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-function">(<span class="hljs-params">index, item</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index, item);<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>同时我们希望当传入的函数返回false终止迭代。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">forEach</span>(<span class="hljs-params">arr, callback</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>       <span class="hljs-keyword">if</span> (<span class="hljs-title function_">callback</span>(i, arr[i]) === <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-keyword">break</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-title function_">forEach</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-function">(<span class="hljs-params">index, item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (item &gt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item); <span class="hljs-comment">// 1 2</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="外部迭代器"><a href="#外部迭代器" class="headerlink" title="外部迭代器"></a>外部迭代器</h2><blockquote><p>外部迭代器必须显式地请求迭代下一个元素。外部迭代器增加了一些调用的复杂度，但相对也增强了迭代器的灵活性，我们可以手工控制迭代的过程或者顺序。（在JavaScript中的实现是Iterator）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Iterator</span>(<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-keyword">let</span> current = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">next</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">value</span>: obj[current++],<br>            <span class="hljs-attr">done</span>: current === obj.<span class="hljs-property">length</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>        next<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> iterator = <span class="hljs-title class_">Iterator</span>(&#123; <span class="hljs-number">0</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-attr">length</span>: <span class="hljs-number">3</span> &#125;)<br><span class="hljs-keyword">const</span> res1 = iterator.<span class="hljs-title function_">next</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res1.<span class="hljs-property">done</span>,res1.<span class="hljs-property">value</span>);<br><span class="hljs-keyword">const</span> res2 = iterator.<span class="hljs-title function_">next</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res2.<span class="hljs-property">done</span>,res2.<span class="hljs-property">value</span>);<br><span class="hljs-keyword">const</span> res3 = iterator.<span class="hljs-title function_">next</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res3.<span class="hljs-property">done</span>,res3.<span class="hljs-property">value</span>);<br></code></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><blockquote><p>在不同的浏览器环境下，选择的上传方式是不一样的。因为使用浏览器的上传控件进行上传速度快，可以暂停和续传，所以我们首先会优先使用控件上传。如果浏览器没有安装上传控件， 则使用 Flash上传，如果Flash也没安装，那就使用浏览器原生的表单上传。</p><p>但是下面的实现方式有些问题，充斥着try catch 和一些if else语句，同时后续可能会有一些新的上传方式，这显然不是我们所期望的。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> getUploadObj = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&quot;TXFTNActiveX.FTNUpload&quot;</span>); <span class="hljs-comment">// IE 上传控件</span><br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">supportFlash</span>()) &#123; <span class="hljs-comment">// supportFlash 函数未提供</span><br>            <span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;&lt;object type=&quot;application/x-shockwave-flash&quot;&gt;&lt;/object&gt;&#x27;</span>;<br>            <span class="hljs-keyword">return</span> $(str).<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&#x27;body&#x27;</span>));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;&lt;input name=&quot;file&quot; type=&quot;file&quot;/&gt;&#x27;</span>; <span class="hljs-comment">// 表单上传</span><br>            <span class="hljs-keyword">return</span> $(str).<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&#x27;body&#x27;</span>));<br>        &#125;<br>    &#125;<br>&#125;;<br><span class="hljs-title function_">getUploadObj</span>()<br></code></pre></td></tr></table></figure><blockquote><p>我们可以将不同方式的上传各自封装成函数，交给迭代器来进行迭代，选择一个可用的上传方式。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> getActiveUploadObj = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&quot;TXFTNActiveX.FTNUpload&quot;</span>); <span class="hljs-comment">// IE 上传控件</span><br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">const</span> getFlashUploadObj = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">supportFlash</span>()) &#123; <span class="hljs-comment">// supportFlash 函数未提供</span><br>        <span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;&lt;object type=&quot;application/x-shockwave-flash&quot;&gt;&lt;/object&gt;&#x27;</span>;<br>        <span class="hljs-keyword">return</span> $(str).<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&#x27;body&#x27;</span>));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br><span class="hljs-keyword">const</span> getFormUpladObj = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;&lt;input name=&quot;file&quot; type=&quot;file&quot; class=&quot;ui-file&quot;/&gt;&#x27;</span>; <span class="hljs-comment">// 表单上传</span><br>    <span class="hljs-keyword">return</span> $(str).<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&#x27;body&#x27;</span>));<br>&#125;;<br><span class="hljs-keyword">const</span> iteratorUploadObj = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, fn; fn = <span class="hljs-variable language_">arguments</span>[i++];) &#123;<br>        <span class="hljs-keyword">const</span> uploadObj = <span class="hljs-title function_">fn</span>();<br>        <span class="hljs-keyword">if</span> (uploadObj !== <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-keyword">return</span> uploadObj;<br>        &#125;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">const</span> uploadObjList = [getActiveUploadObj, getFlashUploadObj, getFormUpladObj]<br><span class="hljs-keyword">const</span> uploadObj = <span class="hljs-title function_">iteratorUploadObj</span>(...uploadObjList); <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>JavaScript设计模式与开发实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript设计模式与开发实践（三）代理模式</title>
    <link href="/jing-jiu/2023/01/06/notebooks/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%AE%9E%E8%B7%B5/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/jing-jiu/2023/01/06/notebooks/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%AE%9E%E8%B7%B5/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><blockquote><p>不方便直接访问某个对象时，使用代理对象来进行访问。</p></blockquote><h2 id="虚拟代理"><a href="#虚拟代理" class="headerlink" title="虚拟代理"></a>虚拟代理</h2><h3 id="预加载图片"><a href="#预加载图片" class="headerlink" title="预加载图片"></a>预加载图片</h3><blockquote><p>假设我们有这样一个需求：我们需要加载很多图片，期望在图片被下载之前展示loading效果，当图片下载后展示图片。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> myImage = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> imgNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;img&#x27;</span>);<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(imgNode);<br>    <span class="hljs-keyword">const</span> img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>()<br>    img.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">params</span>) &#123;<br>        imgNode.<span class="hljs-property">src</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">src</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">setSrc</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">src</span>) &#123;<br>            imgNode.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;./bg.jpg&#x27;</span>;<br>            img.<span class="hljs-property">src</span> = src<br>        &#125;<br>    &#125;<br>&#125;)();<br>myImage.<span class="hljs-title function_">setSrc</span>(<span class="hljs-string">&quot;https://jing-jiu.github.io/jing-jiu/img/avatar.jpg&quot;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>对于我们来说，把图片加载出来是我们主要的目的，而做预加载，loading只是优化的操作，因此我们应该：</p><ol><li>将预加载图片和设置图片的src这两个功能分离开来</li><li>同时我们期望不管是直接给图片设置src还是经过预加载，二者的调用方式是一致的。</li></ol><p>对于下面的代码，当我们不需要预加载图片时，我们只需要将proxyImage替换为myImage。但是显然，代理模式的代码量比不使用代理模式会多很多，但是在大型项目中这样的设计是非常有必要的。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> myImage = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> imgNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;img&#x27;</span>);<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(imgNode);<br><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">setSrc</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">src</span>) &#123;<br>            imgNode.<span class="hljs-property">src</span> = src;<br>        &#125;<br>    &#125;<br>&#125;)();<br><br><span class="hljs-keyword">const</span> proxyImage = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>;<br>    img.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        myImage.<span class="hljs-title function_">setSrc</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">src</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">setSrc</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">src</span>) &#123;<br>            myImage.<span class="hljs-title function_">setSrc</span>(<span class="hljs-string">&#x27;loading.gif&#x27;</span>);<br>            img.<span class="hljs-property">src</span> = src;<br>        &#125;<br>    &#125;<br>&#125;)();<br>proxyImage.<span class="hljs-title function_">setSrc</span>(<span class="hljs-string">&quot;https://jing-jiu.github.io/jing-jiu/img/avatar.jpg&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="合并HTTP请求"><a href="#合并HTTP请求" class="headerlink" title="合并HTTP请求"></a>合并HTTP请求</h3><blockquote><p>假设我们在做一个文件同步的功能，当我们选中一个 checkbox 的时候，它对应的文件就会被同步到另外一台备用服务器上面。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;upload-item&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span>1<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span>2<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span>3<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span>4<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span>5<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span>6<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;7&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span>7<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span>8<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;9&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span>9<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> synchronousFile = <span class="hljs-keyword">function</span> (<span class="hljs-params">id</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;开始同步文件，id 为: &#x27;</span> + id);</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> checkbox = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;input&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, c; c = checkbox[i++];) &#123;</span><br><span class="language-javascript">        c.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span> === <span class="hljs-literal">true</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">synchronousFile</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;; </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>我们期望可以收集几秒内的所有选中文件，统一发请求给后端，这样可以大大减少请求的次数。（在对于实时性要求不高的场景完全是可行的）</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;upload-item&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span>1<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span>2<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span>3<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span>4<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span>5<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span>6<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;7&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span>7<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span>8<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;9&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span>9<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> synchronousFile = <span class="hljs-keyword">function</span> (<span class="hljs-params">id</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;开始同步文件，id 为: &#x27;</span> + id);</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> proxySynchronousFile = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">id</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">            cache.<span class="hljs-title function_">add</span>(id)</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (timer) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">synchronousFile</span>([...cache].<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;,&quot;</span>))</span><br><span class="language-javascript">                <span class="hljs-built_in">clearTimeout</span>(timer)</span><br><span class="language-javascript">                timer = <span class="hljs-literal">null</span></span><br><span class="language-javascript">                cache.<span class="hljs-title function_">clear</span>()</span><br><span class="language-javascript">            &#125;, <span class="hljs-number">2000</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)()</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> checkbox = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;input&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, c; c = checkbox[i++];) &#123;</span><br><span class="language-javascript">        c.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, c; c = checkbox[i++];) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (c.<span class="hljs-property">checked</span> === <span class="hljs-literal">true</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-title function_">proxySynchronousFile</span>(c.<span class="hljs-property">id</span>);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;; </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="惰性加载"><a href="#惰性加载" class="headerlink" title="惰性加载"></a>惰性加载</h3><blockquote><p>跟加载图片类似，有一些脚本是当我们打开控制台时才会执行，因此我们不需要一开始就加载这些脚本， <strong>而是在用户按下F12打开控制台时加载脚本</strong> 。但是需要注意，我们一开始没有加载脚本，那么在代码中调用这些未加载的脚本的方法就会出现问题，因此我们需要：</p><ol><li>一个代理对象，帮我们代理需要调用的方法，在脚本加载成功后执行脚本上的方法。</li><li>并且我们希望重复按下F12时脚本只被加载一次。</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> proxyConsole = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> cache = []<br>    <span class="hljs-keyword">const</span> handler = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>        <span class="hljs-keyword">if</span> (e.<span class="hljs-property">keyCode</span> === <span class="hljs-number">113</span>) &#123;<br>            <span class="hljs-keyword">const</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;script&quot;</span>)<br>            script.<span class="hljs-property">onload</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, fn; fn = cache[i++];) &#123;<br>                    <span class="hljs-title function_">fn</span>()<br>                &#125;<br>            &#125;<br>            script.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;remoteConsole.js&#x27;</span><br>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;head&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">appendChild</span>(script)<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&quot;keydown&quot;</span>, handler) <span class="hljs-comment">// 只加载一次外部脚本</span><br>        &#125;<br>    &#125;;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;keydown&quot;</span>, handler)<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-title function_">log</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">const</span> args = <span class="hljs-variable language_">arguments</span>;<br>            <span class="hljs-comment">// 外部脚本的方法</span><br>            cache.<span class="hljs-title function_">push</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-keyword">return</span> remoteConsole.<span class="hljs-property">log</span>.<span class="hljs-title function_">apply</span>(remoteConsole, args);<br>            &#125;);<br>        &#125;<br>    &#125;<br>&#125;)()<br>proxyConsole.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>); <span class="hljs-comment">// 开始打印 log </span><br><span class="hljs-comment">// remoteConsole.js 代码</span><br>remoteConsole = &#123;<br>    <span class="hljs-attr">log</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">//  代码</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">join</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>));<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="缓存代理"><a href="#缓存代理" class="headerlink" title="缓存代理"></a>缓存代理</h2><blockquote><p>有点类似于算法中的哈希表，将结果缓存起来，下次遇到同样的请求直接返回。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> mult = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;开始计算乘积&#x27;</span>);<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, l = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i &lt; l; i++) &#123;<br>        a = a * <span class="hljs-variable language_">arguments</span>[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;;<br><span class="hljs-title function_">mult</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// 输出：6 </span><br><span class="hljs-title function_">mult</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">// 输出：24 </span><br><br><span class="hljs-keyword">var</span> proxyMult = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> cache = &#123;&#125;;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> args = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">join</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>, <span class="hljs-string">&#x27;,&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (args <span class="hljs-keyword">in</span> cache) &#123;<br>            <span class="hljs-keyword">return</span> cache[args];<br>        &#125;<br>        <span class="hljs-keyword">return</span> cache[args] = mult.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>    &#125;<br>&#125;)();<br><span class="hljs-title function_">proxyMult</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">// 输出：24 </span><br><span class="hljs-title function_">proxyMult</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">// 输出：24</span><br></code></pre></td></tr></table></figure><h2 id="其他代理模式"><a href="#其他代理模式" class="headerlink" title="其他代理模式"></a>其他代理模式</h2><ul><li>防火墙代理：控制网络资源的访问，保护主题不让“坏人”接近。</li><li>远程代理：为一个对象在不同的地址空间提供局部代表，在 Java 中，远程代理可以是另一个虚拟机中的对象。</li><li>保护代理：用于对象应该有不同访问权限的情况。</li><li>智能引用代理：取代了简单的指针，它在访问对象时执行一些附加操作，比如计算一个对象被引用的次数。</li><li>写时复制代理：通常用于复制一个庞大对象的情况。写时复制代理延迟了复制的过程，当对象被真正修改时，才对它进行复制操作。写时复制代理是虚拟代理的一种变体，DLL （操作系统中的动态链接库）是其典型运用场景。</li></ul>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>JavaScript设计模式与开发实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript设计模式与开发实践（二）策略模式</title>
    <link href="/jing-jiu/2023/01/05/notebooks/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%AE%9E%E8%B7%B5/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/jing-jiu/2023/01/05/notebooks/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%AE%9E%E8%B7%B5/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><blockquote><p>定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。</p></blockquote><h2 id="面向对象的策略模式"><a href="#面向对象的策略模式" class="headerlink" title="面向对象的策略模式"></a>面向对象的策略模式</h2><p>在上一篇提到过一种抽离执行和具体实现的例子就是一个典型的面向对象思想实现的策略模式，各种登录接口的类可以称为一组 <strong>策略类</strong> ，而调用他的<strong>Login</strong>称为 <strong>环境类Context</strong> 。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">LoginType</span> &#123;<br>  <span class="hljs-title class_">WeChat</span>,<br>  <span class="hljs-title class_">TaoBao</span>,<br>  <span class="hljs-title class_">TikTok</span>,<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WeChatHandle</span>&#123;<br>    <span class="hljs-title function_">handler</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">LoginType</span>.<span class="hljs-property">WeChat</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaoBaoHandle</span>&#123;<br>    <span class="hljs-title function_">handler</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">LoginType</span>.<span class="hljs-property">TaoBao</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TikTokHandle</span>&#123;<br>    <span class="hljs-title function_">handler</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">LoginType</span>.<span class="hljs-property">TikTok</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Login</span>(<span class="hljs-params">API</span>)&#123;<br>    <span class="hljs-variable constant_">API</span>.<span class="hljs-title function_">handler</span>()<br>&#125;<br><br><span class="hljs-title class_">Login</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TikTokHandle</span>())<br></code></pre></td></tr></table></figure><h2 id="JavaScript中的策略模式"><a href="#JavaScript中的策略模式" class="headerlink" title="JavaScript中的策略模式"></a>JavaScript中的策略模式</h2><blockquote><p>在JavaScript中不必使用类来实现一组策略类，我们完全可以把策略通过键值的方式保存在对象中，同样可以实现将实际逻辑跟执行分离。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">LoginType</span> = &#123;<br>    <span class="hljs-title class_">WeChat</span>: <span class="hljs-string">&quot;WeChat&quot;</span>,<br>    <span class="hljs-title class_">TaoBao</span>: <span class="hljs-string">&quot;TaoBao&quot;</span>,<br>    <span class="hljs-title class_">TikTok</span>: <span class="hljs-string">&quot;TikTok&quot;</span>,<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Login</span>(<span class="hljs-params">callback</span>) &#123;<br>    <span class="hljs-title function_">callback</span>()<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">API</span> = &#123;&#125;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-title class_">LoginType</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>    <span class="hljs-variable constant_">API</span>[<span class="hljs-title class_">LoginType</span>[item]] = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">LoginType</span>[item]);<br>    &#125;<br>&#125;)<br><span class="hljs-title class_">Login</span>(<span class="hljs-variable constant_">API</span>[<span class="hljs-title class_">LoginType</span>.<span class="hljs-property">WeChat</span>])<br></code></pre></td></tr></table></figure><blockquote><p>再比如一个表单校验的例子，假如我们要实现一个对表单中的某一个字段进行诸如字符长度，敏感符号之类校验的方法。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http:// xxx.com/register&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;registerForm&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    请输入用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userName&quot;</span> /&gt;</span><br>    请输入密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br>    请输入手机号码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;phoneNumber&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> registerForm = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;registerForm&#x27;</span>);</span><br><span class="language-javascript">    registerForm.<span class="hljs-property">onsubmit</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (registerForm.<span class="hljs-property">userName</span>.<span class="hljs-property">value</span> === <span class="hljs-string">&#x27;&#x27;</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;用户名不能为空&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (registerForm.<span class="hljs-property">password</span>.<span class="hljs-property">value</span>.<span class="hljs-property">length</span> &lt; <span class="hljs-number">6</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;密码长度不能少于 6 位&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.<span class="hljs-title function_">test</span>(registerForm.<span class="hljs-property">phoneNumber</span>.<span class="hljs-property">value</span>)) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;手机号码格式不正确&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125; </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>通过策略模式将代码分为策略类和环境类，并进行一些优化。</p><ol><li>通过策略类避免繁琐的if else语句</li><li>通过<strong>Validator构造函数</strong>对每个实例维护一个规则数组，通过<strong>Validator</strong>实例的add方法添加校验规则 <strong>，</strong> 通过调用<strong>Validator</strong>实例的start方法对规则依次进行校验，实现简单的可插拔的校验规则模式。</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> strategies = &#123;<br>    <span class="hljs-attr">isNonEmpty</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value, errorMsg</span>) &#123; <span class="hljs-comment">// 不为空</span><br>        <span class="hljs-keyword">if</span> (value === <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> errorMsg;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">minLength</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value, length, errorMsg</span>) &#123; <span class="hljs-comment">// 限制最小长度</span><br>        <span class="hljs-keyword">if</span> (value.<span class="hljs-property">length</span> &lt; length) &#123;<br>            <span class="hljs-keyword">return</span> errorMsg;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">isMobile</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value, errorMsg</span>) &#123; <span class="hljs-comment">// 手机号码格式</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.<span class="hljs-title function_">test</span>(value)) &#123;<br>            <span class="hljs-keyword">return</span> errorMsg;<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Validator</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span> = []; <span class="hljs-comment">// 保存校验规则</span><br>&#125;;<br><br><span class="hljs-title class_">Validator</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">add</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">dom, rule, errorMsg</span>) &#123;<br>    <span class="hljs-keyword">var</span> ary = rule.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>); <span class="hljs-comment">// 把 strategy 和参数分开</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 把校验的步骤用空函数包装起来，并且放入 cache </span><br>        <span class="hljs-keyword">var</span> strategy = ary.<span class="hljs-title function_">shift</span>(); <span class="hljs-comment">// 用户挑选的 strategy </span><br>        ary.<span class="hljs-title function_">unshift</span>(dom.<span class="hljs-property">value</span>); <span class="hljs-comment">// 把 input 的 value 添加进参数列表</span><br>        ary.<span class="hljs-title function_">push</span>(errorMsg); <span class="hljs-comment">// 把 errorMsg 添加进参数列表</span><br>        <span class="hljs-keyword">return</span> strategies[strategy].<span class="hljs-title function_">apply</span>(dom, ary);<br>    &#125;);<br>&#125;;<br><br><span class="hljs-title class_">Validator</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">start</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, validatorFunc; validatorFunc = <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>[i++];) &#123;<br>        <span class="hljs-keyword">var</span> msg = <span class="hljs-title function_">validatorFunc</span>(); <span class="hljs-comment">// 开始校验，并取得校验后的返回信息</span><br>        <span class="hljs-keyword">if</span> (msg) &#123; <span class="hljs-comment">// 如果有确切的返回值，说明校验没有通过</span><br>            <span class="hljs-keyword">return</span> msg;<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> validataFunc = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> validator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Validator</span>(); <span class="hljs-comment">// 创建一个 validator 对象</span><br>    <span class="hljs-comment">// 添加一些校验规则</span><br>    validator.<span class="hljs-title function_">add</span>(registerForm.<span class="hljs-property">userName</span>, <span class="hljs-string">&#x27;isNonEmpty&#x27;</span>, <span class="hljs-string">&#x27;用户名不能为空&#x27;</span>);<br>    validator.<span class="hljs-title function_">add</span>(registerForm.<span class="hljs-property">password</span>, <span class="hljs-string">&#x27;minLength:6&#x27;</span>, <span class="hljs-string">&#x27;密码长度不能少于 6 位&#x27;</span>);<br>    validator.<span class="hljs-title function_">add</span>(registerForm.<span class="hljs-property">phoneNumber</span>, <span class="hljs-string">&#x27;isMobile&#x27;</span>, <span class="hljs-string">&#x27;手机号码格式不正确&#x27;</span>);<br>    <span class="hljs-keyword">const</span> errorMsg = validator.<span class="hljs-title function_">start</span>(); <span class="hljs-comment">// 获得校验结果</span><br>    <span class="hljs-keyword">return</span> errorMsg; <span class="hljs-comment">// 返回校验结果</span><br>&#125;<br><br><span class="hljs-keyword">const</span> registerForm = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;registerForm&#x27;</span>);<br><br>registerForm.<span class="hljs-property">onsubmit</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> errorMsg = <span class="hljs-title function_">validataFunc</span>(); <span class="hljs-comment">// 如果 errorMsg 有确切的返回值，说明未通过校验</span><br>    <span class="hljs-keyword">if</span> (errorMsg) &#123;<br>        <span class="hljs-title function_">alert</span>(errorMsg);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 阻止表单提交</span><br>    &#125;<br>&#125;; <br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><blockquote><p>策略模式的优点：</p><ol><li>利用组合、委托和多态等技术和思想，可以有效地避免多重条件选择语句。</li><li>提供了对开放封闭原则的完美支持，将算法封装在策略类中，使得它们易于切换，易于扩展。</li><li>策略模式中的算法也可以复用在系统的其他地方，从而避免许多重复代码。</li><li>在策略模式中利用组合和委托来让<strong>Context</strong>拥有执行算法的能力（如上述代码中的 <strong>Validator构造函数</strong> ），这也是继承的一种更轻便的替代方案。</li></ol></blockquote><blockquote><p>策略模式的缺点：</p><ol><li>使用策略模式会在程序中增加许多策略类或者策略对象，但实际上这比把它们负责的逻辑堆砌在 Context 中要好。</li><li>要使用策略模式，必须了解所有的策略，必须了解各个策略之间的不同点， 这样才能选择一个合适的策略。</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>JavaScript设计模式与开发实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript设计模式与开发实践（一）单例模式</title>
    <link href="/jing-jiu/2023/01/04/notebooks/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%AE%9E%E8%B7%B5/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/jing-jiu/2023/01/04/notebooks/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%AE%9E%E8%B7%B5/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><blockquote><p>只有一个实例且全局可以访问。</p></blockquote><h2 id="面向对象的单例模式"><a href="#面向对象的单例模式" class="headerlink" title="面向对象的单例模式"></a>面向对象的单例模式</h2><blockquote><p>在面向对象语言中，我们创建一个对象是通过类，因此我们创建一个单例也是基于类进行改造</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingTon</span> &#123;<br>  instance = <span class="hljs-literal">null</span>;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">type</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> = type;<br>  &#125;<br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">getInstance</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">SingTon</span>.<span class="hljs-property">instance</span>) &#123;<br>      <span class="hljs-title class_">SingTon</span>.<span class="hljs-property">instance</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingTon</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">SingTon</span>.<span class="hljs-property">instance</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> a = <span class="hljs-title class_">SingTon</span>.<span class="hljs-title function_">getInstance</span>();<br><span class="hljs-keyword">let</span> b = <span class="hljs-title class_">SingTon</span>.<span class="hljs-title function_">getInstance</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a === b); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h2 id="JavaScript中的单例模式"><a href="#JavaScript中的单例模式" class="headerlink" title="JavaScript中的单例模式"></a>JavaScript中的单例模式</h2><blockquote><p>但是在JavaScript中，他并不是依靠类来创建对象的，因此我们也不必通过先声明一个类的方式来创建一个单例，我们只需要保证单例模式的要求：只有一个实例 + 全局可访问，我们自然的想到了 <strong>闭包</strong> 。</p><p>同时在JavaScript中的单例可能更多是一个DOM节点，譬如一个Modal或者一个Dialog一个Message组件。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">SingTon</span> = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-title class_">Modal</span> = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Modal</span>) &#123;<br>      <span class="hljs-title class_">Modal</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>      <span class="hljs-title class_">Modal</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;我是登录浮窗&quot;</span>;<br>      <span class="hljs-title class_">Modal</span>.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;none&quot;</span>;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(<span class="hljs-title class_">Modal</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Modal</span>;<br>  &#125;;<br>&#125;)()<br><br><span class="hljs-keyword">const</span> div1 = <span class="hljs-title class_">SingTon</span>();<br><span class="hljs-keyword">const</span> div2 = <span class="hljs-title class_">SingTon</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div1 === div2); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h2 id="封装变化的部分"><a href="#封装变化的部分" class="headerlink" title="封装变化的部分"></a>封装变化的部分</h2><blockquote><p>通过闭包实现的单例更好的利用了JavaScript的特性，但是这段代码有一个问题： <strong>如果现在不是Modal了呢，我可能需要创建别的元素，加入别的逻辑。</strong> 如果按照上面的代码，我们只能CV一份然后修改逻辑。</p><p>但是我们应该尝试将那些 <strong>变化的部分封装起来</strong> ，这也是封装在面向对象语言中存在的意义。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">SingTon</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-keyword">let</span> instance = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> instance || (instance = fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>));<br>    &#125;;<br>&#125;<br><br><span class="hljs-keyword">const</span> createModal = <span class="hljs-title class_">SingTon</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">Modal</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br><br>    <span class="hljs-title class_">Modal</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;我是登录浮窗&quot;</span>;<br>    <span class="hljs-title class_">Modal</span>.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;none&quot;</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(<span class="hljs-title class_">Modal</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Modal</span>;<br>&#125;)<br><br><span class="hljs-keyword">const</span> createMessage = <span class="hljs-title class_">SingTon</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">Modal</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br><br>    <span class="hljs-title class_">Modal</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;我是登录浮窗&quot;</span>;<br>    <span class="hljs-title class_">Modal</span>.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;none&quot;</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(<span class="hljs-title class_">Modal</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Modal</span>;<br>&#125;)<br><span class="hljs-keyword">const</span> modal1 = <span class="hljs-title function_">createModal</span>()<br><span class="hljs-keyword">const</span> modal2 = <span class="hljs-title function_">createModal</span>()<br><br><span class="hljs-keyword">const</span> message1 = <span class="hljs-title function_">createMessage</span>()<br><span class="hljs-keyword">const</span> message2 = <span class="hljs-title function_">createMessage</span>()<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(modal1 === modal2);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message1 === message2);<br></code></pre></td></tr></table></figure><blockquote><p>而且这个函数不止可以创建元素的单例，还可以用在其他的地方。如下代码，如果这样写click事件会被绑定三次，导致一次点击会执行三个click的回调。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> bindEvent = <span class="hljs-keyword">function</span> (<span class="hljs-params">number</span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.root&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(number);<br>    &#125;)<br>&#125;;<br><span class="hljs-keyword">const</span> render = <span class="hljs-keyword">function</span> (<span class="hljs-params">number</span>) &#123;<br>    <span class="hljs-title function_">bindEvent</span>(number);<br>&#125;;<br><span class="hljs-title function_">render</span>(<span class="hljs-number">1</span>)<br><span class="hljs-title function_">render</span>(<span class="hljs-number">2</span>)<br><span class="hljs-title function_">render</span>(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><blockquote><p>通过<strong>SingTon</strong>函数优化，使得click只会被绑定一次。但是需要注意，放在<strong>SingTon</strong>中的函数必须有返回值，这个标志着 <strong>是否是初次执行</strong> 。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">SingTon</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-keyword">let</span> instance = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> instance || (instance = fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>));<br>    &#125;;<br>&#125;<br><span class="hljs-keyword">const</span> bindEvent = <span class="hljs-title class_">SingTon</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">number</span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.root&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(number);<br>    &#125;)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;)<br><span class="hljs-keyword">const</span> render = <span class="hljs-keyword">function</span> (<span class="hljs-params">number</span>) &#123;<br>    <span class="hljs-title function_">bindEvent</span>(number);<br>&#125;;<br><span class="hljs-title function_">render</span>(<span class="hljs-number">1</span>)<br><span class="hljs-title function_">render</span>(<span class="hljs-number">2</span>)<br><span class="hljs-title function_">render</span>(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在单例模式中，除了考虑如何创建单例使得全局唯一，还需要考虑如何更好地管理单例，对于每个函数职责的划分将贯穿整个设计模式。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>JavaScript设计模式与开发实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript设计模式与开发实践（零）基础知识</title>
    <link href="/jing-jiu/2023/01/03/notebooks/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%AE%9E%E8%B7%B5/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E9%9B%B6%EF%BC%89/"/>
    <url>/jing-jiu/2023/01/03/notebooks/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%AE%9E%E8%B7%B5/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E9%9B%B6%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="从多态到开放封闭原则"><a href="#从多态到开放封闭原则" class="headerlink" title="从多态到开放封闭原则"></a>从多态到开放封闭原则</h1><blockquote><p>假设现在有一个第三方登录接口，他可以调用支付宝，微信，Tik Tok的登录接口，按照多态的原则我们可以这么实现</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">LoginType</span> &#123;<br>  <span class="hljs-title class_">WeChat</span>,<br>  <span class="hljs-title class_">TaoBao</span>,<br>  <span class="hljs-title class_">TikTok</span>,<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Login</span>(<span class="hljs-params">API</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable constant_">API</span>.<span class="hljs-property">name</span> === <span class="hljs-title class_">LoginType</span>.<span class="hljs-property">WeChat</span>)&#123;<br>        <span class="hljs-comment">// do something</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable constant_">API</span>.<span class="hljs-property">name</span> === <span class="hljs-title class_">LoginType</span>.<span class="hljs-property">TaoBao</span>)&#123;<br>        <span class="hljs-comment">// do something</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>但是这样当我们要新增一个登录接口时，就需要改动Login函数里面的代码，多增加一个if else，这显然不太优雅，也不利于维护，我们希望能将具体的实现放在函数之外，Login函数内部只负责方法的调用，而外部实现具体的方法,这样新增接口将会变得更易于维护和扩展。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">LoginType</span> &#123;<br>  <span class="hljs-title class_">WeChat</span>,<br>  <span class="hljs-title class_">TaoBao</span>,<br>  <span class="hljs-title class_">TikTok</span>,<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WeChatHandle</span>&#123;<br>    <span class="hljs-title function_">handler</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">LoginType</span>.<span class="hljs-property">WeChat</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaoBaoHandle</span>&#123;<br>    <span class="hljs-title function_">handler</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">LoginType</span>.<span class="hljs-property">TaoBao</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TikTokHandle</span>&#123;<br>    <span class="hljs-title function_">handler</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">LoginType</span>.<span class="hljs-property">TikTok</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Login</span>(<span class="hljs-params">API</span>)&#123;<br>    <span class="hljs-variable constant_">API</span>.<span class="hljs-title function_">handler</span>()<br>&#125;<br><br><span class="hljs-title class_">Login</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TikTokHandle</span>())<br></code></pre></td></tr></table></figure><blockquote><p>由于JavaScript的特殊性（ 鸭子类型 ），可以使用这种方式来实现多态，而在传统的面向对象语言（静态类型语言）中，通常通过继承的方式来实现。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">API</span> &#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handler</span><span class="hljs-params">()</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WeChat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">API</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handler</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// do something</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TaoBao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">API</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handler</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// do something</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Login</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">(API api)</span>&#123;<br>        api.handler()<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">Login</span> <span class="hljs-variable">login</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Login</span>();<br>        <span class="hljs-type">TaoBao</span> <span class="hljs-variable">taobao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TaoBao</span>();<br>        login.login(taobao);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这种方式在Java中也叫做 <strong>向上转型，</strong> 即将接受参数的类型定义为需要类以及类的超类（基类），通过继承基类来实现具体的方法。</p></blockquote><blockquote><p>这也是多态的作用： <strong>通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句</strong> 。</p></blockquote><h1 id="封装——封装变化"><a href="#封装——封装变化" class="headerlink" title="封装——封装变化"></a>封装——封装变化</h1><blockquote><p>从设计模式的角度出发，封装在更重要的层面体现为封装变化。</p></blockquote><blockquote><p>《设计模式》一书曾提到如下文字：</p><p>“考虑你的设计中哪些地方可能变化，这种方式与关注会导致重新设计的原因相反。 它不是考虑什么时候会迫使你的设计改变，而是考虑你怎样才能够在不重新设计的情况 下进行改变。这里的关键在于封装发生变化的概念，这是许多设计模式的主题。”<br>这段文字即是《设计模式》提到的“找到变化并封装之”。</p></blockquote><blockquote><p>《设计模式》一书中共归纳总结了 23 种设计模式。从意图上区分，这 23种设计模式分别被划分为创建型模式、结构型模式和行为型模式。</p></blockquote><blockquote><p>拿创建型模式来说，要创建一个对象，是一种抽象行为，而具体创建什么对象则是可以变化的，创建型模式的目的就是 <strong>封装创建对象的变化</strong> 。而结构型模式 <strong>封装的是对象之间的组合关系</strong> 。 行为型模式封装的是 <strong>对象的行为变化</strong> 。</p></blockquote><blockquote><p>通过封装变化的方式， <strong>把系统中稳定不变的部分和容易变化的部分隔离开来</strong> ，在系统的演变过程中，我们只需要替换那些容易变化的部分，如果这些部分是已经封装好的，替换起来也相对容易。这可以最大程度地保证程序的稳定性和可扩展性。</p></blockquote><h1 id="原型模式和基于原型模式的JavaScript原型系统"><a href="#原型模式和基于原型模式的JavaScript原型系统" class="headerlink" title="原型模式和基于原型模式的JavaScript原型系统"></a>原型模式和基于原型模式的JavaScript原型系统</h1><ul><li>所有的数据都是对象</li><li>要得到一个对象，不是通过实例化类，而是找到一个对象作为原型并克隆它。</li><li>对象会记住它的原型</li><li>如果对象无法响应某个请求，它会把这个请求委托给它自己的原型</li></ul><h1 id="JavaScript中的数据存储"><a href="#JavaScript中的数据存储" class="headerlink" title="JavaScript中的数据存储"></a>JavaScript中的数据存储</h1><ul><li>全局变量和被捕获变量（闭包）储存在堆中（全局中的基本类型的值是存在堆中，它的引用地址是存在全局执行上下文的栈内存中）。<ul><li><p>被捕获变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span> () &#123;<br>    <span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> string = <span class="hljs-string">&#x27;前端&#x27;</span>;<br>    <span class="hljs-keyword">let</span> bool = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">let</span> obj = &#123;<br>        <span class="hljs-attr">attr1</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">attr2</span>: <span class="hljs-string">&#x27;收割机&#x27;</span>,<br>        <span class="hljs-attr">attr3</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">attr4</span>: <span class="hljs-string">&#x27;something&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">log</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num, string, bool, obj);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDU0NjZhMjMzMjk4YmMwZGU4ODU5OTFmZmQ0MGZjOTVfSmhsTmRiNFExMERqUzdxMUl6WFBuR05mT1VQUVF6UzhfVG9rZW46Ym94Y25MVUUwdkNZeXN3ZGlORGxaSXRKNHRjXzE2NzI5MjQ2MzI6MTY3MjkyODIzMl9WNA"></p></li><li><p>全局变量<br><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTVjNWViYTljY2U5ZGRhZTBhYjc0YWZjMGU3ODg5OTRfMVJiUW1acnpJS2ZTdXRSZFpDT0VrWUl0cGc5YkZZWWhfVG9rZW46Ym94Y24zaG1Fd0VWN29YN3pqMGlzN0UzT2paXzE2NzI5MjQ2MzI6MTY3MjkyODIzMl9WNA"></p></li></ul></li><li>局部变量：如果是基础类型，那栈中储存的是数据本身。如果是对象类型，那栈中存储的是堆中对象的引用（对象本身储存在堆中）。</li></ul><blockquote><p><strong>至于为什么被捕获的变量也存在堆中，个人觉得是由于在一个作用域中被捕获的变量可能不止一个，需要把这些变量聚合起来，类似于对象，因此也被放在了堆中。</strong></p></blockquote><h1 id="AOP编程"><a href="#AOP编程" class="headerlink" title="AOP编程"></a>AOP编程</h1><blockquote><p>AOP（面向切面编程）的主要作用是把一些跟核心业务逻辑模块无关的功能抽离出来，这些 跟业务逻辑无关的功能通常包括日志统计、安全控制、异常处理等。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">before</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"> beforefn </span>)&#123; <br> <span class="hljs-keyword">var</span> __self = <span class="hljs-variable language_">this</span>; <span class="hljs-comment">// 保存原函数的引用</span><br> <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">// 返回包含了原函数和新函数的&quot;代理&quot;函数</span><br> beforefn.<span class="hljs-title function_">apply</span>( <span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span> ); <span class="hljs-comment">// 执行新函数，修正 this </span><br> <span class="hljs-keyword">return</span> __self.<span class="hljs-title function_">apply</span>( <span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span> ); <span class="hljs-comment">// 执行原函数</span><br> &#125; <br>&#125;; <br><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">after</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"> afterfn </span>)&#123; <br> <span class="hljs-keyword">var</span> __self = <span class="hljs-variable language_">this</span>; <br> <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br> <span class="hljs-keyword">var</span> ret = __self.<span class="hljs-title function_">apply</span>( <span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span> ); <br> afterfn.<span class="hljs-title function_">apply</span>( <span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span> ); <br> <span class="hljs-keyword">return</span> ret; <br> &#125; <br>&#125;; <br><br><span class="hljs-keyword">var</span> func = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-number">2</span> ); <br>&#125;; <br>func = func.<span class="hljs-title function_">before</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-number">1</span> ); <br>&#125;).<span class="hljs-title function_">after</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-number">3</span> ); <br>&#125;); <br><span class="hljs-title function_">func</span>(); <br></code></pre></td></tr></table></figure><h1 id="惰性载入函数"><a href="#惰性载入函数" class="headerlink" title="惰性载入函数"></a>惰性载入函数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> addEvent = <span class="hljs-keyword">function</span> (<span class="hljs-params">elem, type, handler</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">addEventListener</span>) &#123;<br>    addEvent = <span class="hljs-keyword">function</span> (<span class="hljs-params">elem, type, handler</span>) &#123;<br>      elem.<span class="hljs-title function_">addEventListener</span>(type, handler, <span class="hljs-literal">false</span>);<br>    &#125;;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">attachEvent</span>) &#123;<br>    addEvent = <span class="hljs-keyword">function</span> (<span class="hljs-params">elem, type, handler</span>) &#123;<br>      elem.<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&quot;on&quot;</span> + type, handler);<br>    &#125;;<br>  &#125;<br>  <span class="hljs-title function_">addEvent</span>(elem, type, handler);<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>JavaScript设计模式与开发实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TS进阶</title>
    <link href="/jing-jiu/2022/10/20/notebooks/TS%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D/%EF%BC%88%E4%BA%8C%EF%BC%89%E8%BF%9B%E9%98%B6/"/>
    <url>/jing-jiu/2022/10/20/notebooks/TS%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D/%EF%BC%88%E4%BA%8C%EF%BC%89%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h3 id="面向对象编程思想"><a href="#面向对象编程思想" class="headerlink" title="面向对象编程思想"></a>面向对象编程思想</h3><ol><li><p>TS的伪重载<br><strong>TS可以在函数前面声明重载签名</strong> ，使得在调用函数时推断出函数的返回类型，但是由于它不能重复实现同一个函数，而仅仅是对其的签名进行重载，因此称为<strong>伪重载</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">foo: <span class="hljs-built_in">number</span>, bar: <span class="hljs-literal">true</span></span>): <span class="hljs-built_in">string</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">foo: <span class="hljs-built_in">number</span>, bar?: <span class="hljs-literal">false</span></span>): <span class="hljs-built_in">number</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">foo: <span class="hljs-built_in">number</span>, bar?: <span class="hljs-built_in">boolean</span></span>): <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span> &#123;<br>    <span class="hljs-keyword">if</span> (bar) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">String</span>(foo);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> foo * <span class="hljs-number">20</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> res1 = <span class="hljs-title function_">func</span>(<span class="hljs-number">599</span>); <span class="hljs-comment">// number</span><br><span class="hljs-keyword">const</span> res2 = <span class="hljs-title function_">func</span>(<span class="hljs-number">599</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// string</span><br><span class="hljs-keyword">const</span> res3 = <span class="hljs-title function_">func</span>(<span class="hljs-number">599</span>, <span class="hljs-literal">false</span>); <span class="hljs-comment">// number</span><br></code></pre></td></tr></table></figure></li><li><p>修饰符</p><ol><li>public：此类成员在<strong>类、类的实例、子类</strong>中都能被访问。</li><li>private：此类成员仅能在<strong>类的内部</strong>被访问。</li><li>protected：此类成员仅能在<strong>类与子类中</strong>被访问，可以将类和类的实例当成两种概念，即一旦实例化完毕，那就和类没关系了，即 <strong>不允许再访问受保护的成员</strong> 。</li></ol></li><li><p>基类和派生类<br>**确保在派生类中复写的方法在基类中存在 使用override修饰符 **修饰要复写的方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 基类和派生类 </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br>    <span class="hljs-title function_">print</span>(<span class="hljs-params"></span>) &#123;<br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Base</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-title function_">print</span>(<span class="hljs-params"></span>) &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>单一功能原则<br><strong>一个类应该仅具有一种职责</strong></p><p>这也意味着只存在一种原因使得需要修改类的代码。如对于一个数据实体的操作，其读操作和写操作也应当被视为两种不同的职责，并被分配到两个类中。更进一步，对实体的业务逻辑和对实体的入库逻辑也都应该被拆分开来</p></li><li><p>开放封闭原则</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">LoginType</span> &#123;<br>    <span class="hljs-title class_">WeChat</span>,<br>    <span class="hljs-title class_">TaoBao</span>,<br>    <span class="hljs-title class_">TikTok</span>,<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginHandler</span> &#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-title function_">handler</span>(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WeChatLoginHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LoginHandler</span> &#123;<br>    <span class="hljs-title function_">handler</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">LoginType</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TikTokLoginHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LoginHandler</span> &#123;<br>    <span class="hljs-title function_">handler</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">LoginType</span>[<span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaoBaoLoginHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LoginHandler</span> &#123;<br>    <span class="hljs-title function_">handler</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">LoginType</span>[<span class="hljs-number">2</span>]);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Login</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-attr">handleMap</span>: <span class="hljs-title class_">Record</span>&lt;<span class="hljs-title class_">LoginType</span>, <span class="hljs-title class_">LoginHandler</span>&gt; = &#123;<br>        [<span class="hljs-title class_">LoginType</span>.<span class="hljs-property">WeChat</span>]: <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeChatLoginHandler</span>(),<br>        [<span class="hljs-title class_">LoginType</span>.<span class="hljs-property">TikTok</span>]: <span class="hljs-keyword">new</span> <span class="hljs-title class_">TikTokLoginHandler</span>(),<br>        [<span class="hljs-title class_">LoginType</span>.<span class="hljs-property">TaoBao</span>]: <span class="hljs-keyword">new</span> <span class="hljs-title class_">TaoBaoLoginHandler</span>(),<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title function_">handler</span>(<span class="hljs-params"><span class="hljs-keyword">type</span>: LoginType</span>) &#123;<br>        <span class="hljs-title class_">Login</span>.<span class="hljs-property">handleMap</span>[<span class="hljs-keyword">type</span>].<span class="hljs-title function_">handler</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-title class_">Login</span>.<span class="hljs-title function_">handler</span>(<span class="hljs-title class_">LoginType</span>.<span class="hljs-property">WeChat</span>)<br></code></pre></td></tr></table></figure></li><li><p>里氏替换原则<br><strong>一个派生类可以在程序的任何一处对其基类进行替换</strong></p><p>即子类完全继承了父类的一切，对父类进行了<strong>功能地扩展（而非收窄）</strong></p></li><li><p>接口分离原则<br><strong>类的实现方应当只需要实现自己需要的那部分接口</strong></p><p>比如微信登录支持指纹识别，支付宝支持指纹识别和人脸识别，这个时候微信登录的实现类应该不需要实现人脸识别方法才对。这也就意味着我们<strong>提供的抽象类应当按照功能维度拆分成粒度更小的组成</strong></p></li><li><p>依赖倒置原则<br>这是 <strong>实现开闭原则的基础</strong> ，它的核心思想即是 <strong>对功能的实现应该依赖于抽象层</strong> ，即不同的逻辑通过实现不同的抽象类。</p><p>还是登录的例子，我们的登录提供方法应该基于共同的登录抽象类实现（LoginHandler），最终调用方法也基于这个抽象类，而不是在一个高阶登录方法中去依赖多个低阶登录提供方</p></li><li><p>反射  <strong>在程序运行时去检查以及修改程序行为</strong> 。</p></li></ol><h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><ol><li><p>确保联合类型变量被妥善处理</p><ol><li>对联合类型的每种类型进行处理，如果对联合类型新增了一种类型Function，同样会被判定为never，通过下面的方法正确处理。</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">const</span> <span class="hljs-attr">strOrNumOrBool</span>: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span> | <span class="hljs-built_in">boolean</span>;<br><br><span class="hljs-comment">// 不严谨的处理</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> strOrNumOrBool === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;str!&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> strOrNumOrBool === <span class="hljs-string">&quot;number&quot;</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;num!&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> strOrNumOrBool === <span class="hljs-string">&quot;boolean&quot;</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;bool!&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`Unknown input type: <span class="hljs-subst">$&#123;strOrNumOrBool&#125;</span>`</span>);<br>&#125;<br><br><span class="hljs-comment">// 通过never的判断正确处理</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> strOrNumOrBool === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>    <span class="hljs-comment">// 一定是字符串！</span><br>    strOrNumOrBool.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">1</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> strOrNumOrBool === <span class="hljs-string">&quot;number&quot;</span>) &#123;<br>    strOrNumOrBool.<span class="hljs-title function_">toFixed</span>();<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> strOrNumOrBool === <span class="hljs-string">&quot;boolean&quot;</span>) &#123;<br>    strOrNumOrBool === <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">_exhaustiveCheck</span>: <span class="hljs-built_in">never</span> = strOrNumOrBool;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`Unknown input type: <span class="hljs-subst">$&#123;_exhaustiveCheck&#125;</span>`</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>非空断言</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#id&quot;</span>); <span class="hljs-comment">// const element: Element | null</span><br><span class="hljs-keyword">const</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#id&quot;</span>)!; <span class="hljs-comment">// const element: Element</span><br><br><span class="hljs-keyword">const</span> target = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">599</span>].<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item === <span class="hljs-number">599</span>); <span class="hljs-comment">// const target: number | undefind</span><br><span class="hljs-keyword">const</span> target = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">599</span>].<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item === <span class="hljs-number">599</span>)!; <span class="hljs-comment">// const target: number</span><br></code></pre></td></tr></table></figure></li><li><p>类型断言</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 两种书写断言的方式</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IStruct</span> &#123;<br>    <span class="hljs-attr">foo</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-attr">bar</span>: &#123;<br>        <span class="hljs-attr">barPropA</span>: <span class="hljs-built_in">string</span>;<br>        <span class="hljs-attr">barPropB</span>: <span class="hljs-built_in">number</span>;<br>        <span class="hljs-attr">barMethod</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>;<br>        <span class="hljs-attr">baz</span>: &#123;<br>            <span class="hljs-attr">handler</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt;;<br>        &#125;;<br>    &#125;;<br>&#125;<br><span class="hljs-keyword">const</span> struct = &#123;&#125;<br>struct <span class="hljs-keyword">as</span> <span class="hljs-title class_">IStruct</span><br><br><span class="hljs-keyword">const</span> istruct = &lt;<span class="hljs-title class_">IStruct</span>&gt;&#123;&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="类型工具"><a href="#类型工具" class="headerlink" title="类型工具"></a>类型工具</h3><ol><li><p>基本使用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript">typeMaybeNull&lt;T&gt; = T | <span class="hljs-literal">null</span>;<br><br><span class="hljs-title function_">functionfun</span>(<span class="hljs-attr">input</span>: <span class="hljs-title class_">MaybeNull</span>&lt;&#123; <span class="hljs-attr">handler</span>: <span class="hljs-function">() =&gt;</span> &#123;&#125; &#125;&gt;) &#123;<br>    input?.<span class="hljs-title function_">handler</span>()<br>&#125;<br><br><span class="hljs-comment">// 函数泛型</span><br>typeMaybeArray&lt;T&gt; = T | T[];<br><br><span class="hljs-keyword">function</span> ensureArray&lt;T&gt;(<span class="hljs-attr">input</span>: <span class="hljs-title class_">MaybeArray</span>&lt;T&gt;): T[] &#123;<br>returnArray.<span class="hljs-title function_">isArray</span>(input) ? input : [input];<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>索引类型</p><ol><li>索引签名类型</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">AllStringTypes</span> &#123;<br>    [<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span>;<br>&#125;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">PropType1</span> = <span class="hljs-title class_">AllStringTypes</span>[<span class="hljs-string">&#x27;linbudu&#x27;</span>]; <span class="hljs-comment">// string</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">PropType2</span> = <span class="hljs-title class_">AllStringTypes</span>[<span class="hljs-string">&#x27;599&#x27;</span>]; <span class="hljs-comment">// string</span><br></code></pre></td></tr></table></figure><ol><li>索引类型查询 <strong>keyof</strong><br>它可以将对象中的所有键转换为对应字面量类型，然后再组合成联合类型</li><li>索引类型访问<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Foo</span> &#123;<br>    <span class="hljs-attr">propA</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><br>typePropAType = <span class="hljs-title class_">Foo</span>[<span class="hljs-string">&#x27;propA&#x27;</span>];  <span class="hljs-comment">// type PropAType = number</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p>类型守卫</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">let</span> res = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">assertIsNumber</span>(<span class="hljs-params">val: <span class="hljs-built_in">any</span></span>): asserts val is <span class="hljs-built_in">number</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> val !== <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Not a number!&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-title function_">assertIsNumber</span>(res);<br>res.<span class="hljs-title function_">toFixed</span>();<br></code></pre></td></tr></table></figure></li></ol><h3 id="内置工具类型及实现"><a href="#内置工具类型及实现" class="headerlink" title="内置工具类型及实现"></a>内置工具类型及实现</h3><ul><li><p>修饰工具类型</p><ul><li>Partial<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">MyParital</span>&lt;T&gt; = &#123;<br>    [K <span class="hljs-keyword">in</span> keyof T]+?: T[K]<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">TestType</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>,<br>    <span class="hljs-attr">male</span>: <span class="hljs-built_in">boolean</span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">res_Parital</span>: <span class="hljs-title class_">TestType</span> = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">male</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>Require<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Required</span>&lt;T&gt; = &#123;<br>    [P <span class="hljs-keyword">in</span> keyof T]-?: T[P];<br>&#125;;<br><br><span class="hljs-comment">// -?表示如果有问号就去掉问号</span><br></code></pre></td></tr></table></figure></li><li>Readonly<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Readonly</span>&lt;T&gt; = &#123;<br>    +<span class="hljs-keyword">readonly</span> [K <span class="hljs-keyword">in</span> keyof T]: T[K]<br>&#125;<br></code></pre></td></tr></table></figure></li><li>MarkPropsAsOptional 部分修饰<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Res</span> &#123;<br>    <span class="hljs-attr">code</span>: <span class="hljs-number">10000</span> | <span class="hljs-number">10001</span> | <span class="hljs-number">50000</span>;<br>    <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;success&quot;</span> | <span class="hljs-string">&quot;failure&quot;</span>;<br>    <span class="hljs-attr">data</span>: <span class="hljs-built_in">any</span>;<br>&#125;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">MarkPropsAsOptional</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">object</span>, U <span class="hljs-keyword">extends</span> keyof T&gt; = <span class="hljs-title class_">Partial</span>&lt;<span class="hljs-title class_">Pick</span>&lt;T, U&gt;&gt; &amp; <span class="hljs-title class_">Omit</span>&lt;T, U&gt;<br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Flutten</span>&lt;T&gt; = &#123;<br>    [K <span class="hljs-keyword">in</span> keyof T]: T[K]<br>&#125;<br><span class="hljs-keyword">type</span> res_MarkProps = <span class="hljs-title class_">Flutten</span>&lt;<span class="hljs-title class_">MarkPropsAsOptional</span>&lt;<span class="hljs-title class_">Res</span>, <span class="hljs-string">&quot;code&quot;</span> | <span class="hljs-string">&#x27;data&#x27;</span>&gt;&gt;<br><br><span class="hljs-comment">// type res_MarkProps = &#123;</span><br><span class="hljs-comment">//     code?: 10000 | 10001 | 50000;</span><br><span class="hljs-comment">//     data?: any;</span><br><span class="hljs-comment">//     status: &quot;success&quot; | &quot;failure&quot;;</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>结构工具类型</p><ul><li>Record<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Record</span>&lt;K <span class="hljs-keyword">extends</span> keyof <span class="hljs-built_in">any</span>, T&gt; = &#123;<br>    [P <span class="hljs-keyword">in</span> K]: T<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Pick<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 从对象身上提取属性的类型</span><br>typePick&lt;T, K <span class="hljs-keyword">extends</span> keyof T&gt; = &#123;<br>    [P <span class="hljs-keyword">in</span> K]: T[P]<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Foo</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>    <span class="hljs-attr">hello</span>: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-variable language_">this</span>: Foo</span>) =&gt;</span> <span class="hljs-built_in">string</span>;<br>&#125;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">PickedFoo</span> = <span class="hljs-title class_">Pick</span>&lt;<span class="hljs-title class_">Foo</span>, <span class="hljs-string">&quot;name&quot;</span> | <span class="hljs-string">&quot;hello&quot;</span>&gt;<br><span class="hljs-comment">// type PickedFoo = &#123;</span><br><span class="hljs-comment">//     name: string;</span><br><span class="hljs-comment">//     hello: (this: Foo) =&gt; string;</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure></li><li>Omit<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 剔除T在U中有的类型 --&gt; 差集</span><br>typeExclude&lt;T, U&gt; = T <span class="hljs-keyword">extends</span> U ? <span class="hljs-built_in">never</span> : T;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Tmp1</span> = <span class="hljs-title class_">Exclude</span>&lt;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&gt;; <span class="hljs-comment">// 1</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Tmp2</span> = <span class="hljs-title class_">Exclude</span>&lt;<span class="hljs-number">1</span> | <span class="hljs-number">2</span>, <span class="hljs-number">2</span>&gt;; <span class="hljs-comment">// 1</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Tmp3</span> = <span class="hljs-title class_">Exclude</span>&lt;<span class="hljs-number">1</span> | <span class="hljs-number">2</span> | <span class="hljs-number">3</span>, <span class="hljs-number">2</span> | <span class="hljs-number">3</span>&gt;; <span class="hljs-comment">// 1</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Tmp4</span> = <span class="hljs-title class_">Exclude</span>&lt;<span class="hljs-number">1</span> | <span class="hljs-number">2</span> | <span class="hljs-number">3</span>, <span class="hljs-number">2</span> | <span class="hljs-number">4</span>&gt;; <span class="hljs-comment">// 1 | 3</span><br><br><span class="hljs-comment">// 剔除对象身上对应属性类型</span><br>typeOmit&lt;T, K <span class="hljs-keyword">extends</span> keyof <span class="hljs-built_in">any</span>&gt; = <span class="hljs-title class_">Pick</span>&lt;T, <span class="hljs-title class_">Exclude</span>&lt;keyof T, K&gt;&gt;;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>集合工具类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 并集</span><br>exporttypeConcurrence&lt;A, B&gt; = A | B;<br><br><span class="hljs-comment">// 交集</span><br>exporttypeIntersection&lt;A, B&gt; = A <span class="hljs-keyword">extends</span> B ? A : <span class="hljs-built_in">never</span>;<br><br><span class="hljs-comment">// 差集</span><br>exporttypeDifference&lt;A, B&gt; = A <span class="hljs-keyword">extends</span> B ? <span class="hljs-built_in">never</span> : A;<br><br><span class="hljs-comment">// 补集</span><br>exporttypeComplement&lt;A, B <span class="hljs-keyword">extends</span> A&gt; = <span class="hljs-title class_">Difference</span>&lt;A, B&gt;;<br><span class="hljs-comment">//补集基于差集实现，我们只需要约束集合 B 为集合 A 的子集即可</span><br></code></pre></td></tr></table></figure></li><li><p>提取工具类型<br><strong>Typescript 类型的模式匹配是通过 extends 对类型参数做匹配，结果保存到通过 infer 声明的局部类型变量里，如果匹配就能从该局部变量里拿到提取出的类型。</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">type</span> p = <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-string">&#x27;test&#x27;</span>&gt;<br><span class="hljs-keyword">type</span> getValueType&lt;P&gt; = P <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Promise</span>&lt;infer T&gt; ? T : <span class="hljs-built_in">never</span><br><span class="hljs-keyword">type</span> res_Type = getValueType&lt;p&gt; <span class="hljs-comment">// type res_Type = &quot;test&quot;</span><br></code></pre></td></tr></table></figure><ul><li><p>提取数组第一个 &#x2F; 最后一个元素的类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">type</span> arr = [<span class="hljs-built_in">number</span>, <span class="hljs-built_in">string</span>, <span class="hljs-built_in">boolean</span>]<br><span class="hljs-keyword">type</span> <span class="hljs-title class_">GetFirstType</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">unknown</span>[]&gt; = T <span class="hljs-keyword">extends</span> [infer F,...<span class="hljs-built_in">unknown</span>[]] ? F : <span class="hljs-built_in">never</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">GetLastType</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">unknown</span>[]&gt; = T <span class="hljs-keyword">extends</span> [...<span class="hljs-built_in">unknown</span>[],infer F] ? F : <span class="hljs-built_in">never</span><br><span class="hljs-keyword">type</span> res_First = <span class="hljs-title class_">GetFirstType</span>&lt;arr&gt; <span class="hljs-comment">// type res_First = number</span><br><span class="hljs-keyword">type</span> res_Last = <span class="hljs-title class_">GetLastType</span>&lt;arr&gt; <span class="hljs-comment">// type res_Last = boolean</span><br></code></pre></td></tr></table></figure></li><li><p>提取数组剩余元素类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">GetRestType</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">unknown</span>[]&gt; = T <span class="hljs-keyword">extends</span> [...infer F, <span class="hljs-built_in">unknown</span>] ? F : <span class="hljs-built_in">never</span><br><span class="hljs-keyword">type</span> res_Rest = <span class="hljs-title class_">GetRestType</span>&lt;arr&gt; <span class="hljs-comment">// type res_Rest = [number, string]</span><br></code></pre></td></tr></table></figure><ul><li>替换字符串 <strong>replaceStr</strong><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 匹配字符串开头结尾</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">str</span>: <span class="hljs-string">`#<span class="hljs-subst">$&#123;<span class="hljs-built_in">string</span>&#125;</span>$`</span> = <span class="hljs-string">&#x27;#str$&#x27;</span><br><br><span class="hljs-comment">// 替换字符串</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">ReplaceStrType</span>&lt;<br>    <span class="hljs-title class_">Str</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>,<br>    <span class="hljs-title class_">From</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>,<br>    <span class="hljs-title class_">To</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span><br>&gt; = <span class="hljs-title class_">Str</span> <span class="hljs-keyword">extends</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;infer PreFix&#125;</span><span class="hljs-subst">$&#123;From&#125;</span><span class="hljs-subst">$&#123;infer EndFix&#125;</span>`</span> ? <span class="hljs-string">`<span class="hljs-subst">$&#123;PreFix&#125;</span><span class="hljs-subst">$&#123;To&#125;</span><span class="hljs-subst">$&#123;EndFix&#125;</span>`</span> : <span class="hljs-built_in">never</span><br><br><span class="hljs-keyword">type</span> str = <span class="hljs-title class_">ReplaceStrType</span>&lt;<span class="hljs-string">&#x27;my name is xxx&#x27;</span>, <span class="hljs-string">&#x27;xxx&#x27;</span>, <span class="hljs-string">&#x27;TypeScript&#x27;</span>&gt; <br><span class="hljs-comment">// type str = &quot;my name is TypeScript&quot;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>去除字符串两边的空白 <strong>Trim</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 递归删除空格 换行符等</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">TrimLeft</span>&lt;<span class="hljs-title class_">Str</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>&gt; = <span class="hljs-title class_">Str</span> <span class="hljs-keyword">extends</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-string">&#x27; &#x27;</span> | <span class="hljs-string">&#x27;\n&#x27;</span> | <span class="hljs-string">&#x27;\t&#x27;</span>&#125;</span><span class="hljs-subst">$&#123;infer Rest&#125;</span>`</span> ? <span class="hljs-title class_">TrimLeft</span>&lt;<span class="hljs-title class_">Rest</span>&gt; : <span class="hljs-title class_">Str</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">TrimRight</span>&lt;<span class="hljs-title class_">Str</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>&gt; = <span class="hljs-title class_">Str</span> <span class="hljs-keyword">extends</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;infer Rest&#125;</span><span class="hljs-subst">$&#123;<span class="hljs-string">&#x27; &#x27;</span> | <span class="hljs-string">&#x27;\n&#x27;</span> | <span class="hljs-string">&#x27;\t&#x27;</span>&#125;</span>`</span> ? <span class="hljs-title class_">TrimRight</span>&lt;<span class="hljs-title class_">Rest</span>&gt; : <span class="hljs-title class_">Str</span><br><span class="hljs-keyword">type</span> res_Trim = <span class="hljs-title class_">TrimRight</span>&lt;<span class="hljs-title class_">TrimLeft</span>&lt;<span class="hljs-string">&#x27; 123 &#x27;</span>&gt;&gt; <span class="hljs-comment">// type res_Trim = &quot;123&quot;</span><br></code></pre></td></tr></table></figure><ul><li>函数提取参数，返回值类型<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 提取参数</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">GetParams</span>&lt;<span class="hljs-title class_">Func</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Function</span>&gt; = <span class="hljs-title class_">Func</span> <span class="hljs-keyword">extends</span> (...<span class="hljs-attr">args</span>: infer <span class="hljs-title class_">Args</span>) =&gt; <span class="hljs-built_in">unknown</span> ? <span class="hljs-title class_">Args</span> : <span class="hljs-built_in">never</span><br><span class="hljs-keyword">type</span> res_Func = <span class="hljs-title class_">GetParams</span>&lt;<span class="hljs-function">(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">boolean</span>&gt; <br><span class="hljs-comment">// type res_Func = [name: string, age: number]</span><br><br><span class="hljs-comment">// 提取返回值</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">GetReturns</span>&lt;<span class="hljs-title class_">Func</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Function</span>&gt; = <span class="hljs-title class_">Func</span> <span class="hljs-keyword">extends</span> (...<span class="hljs-attr">args</span>: <span class="hljs-built_in">any</span>[]) =&gt; infer <span class="hljs-title class_">Return</span> ? <span class="hljs-title class_">Return</span> : <span class="hljs-built_in">never</span><br><span class="hljs-keyword">type</span> res_Return = <span class="hljs-title class_">GetReturns</span>&lt;<span class="hljs-function">(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">boolean</span>&gt;<br><span class="hljs-comment">// type res_Return = boolean</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>规定this指向 提取this类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;dong&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-title function_">hello</span>(<span class="hljs-params"><span class="hljs-variable language_">this</span>: Foo</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello, I\&#x27;m &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> foo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>()<br><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;<br>foo.<span class="hljs-property">hello</span>.<span class="hljs-title function_">apply</span>(obj)<br><span class="hljs-comment">// 类型“&#123; a: number; &#125;”的参数不能赋给类型“Foo”的参数。</span><br><span class="hljs-comment">// 类型“&#123; a: number; &#125;”缺少类型“Foo”中的以下属性: name, hello</span><br><br><span class="hljs-comment">// tsconfig.json</span><br>&#123;<br>    <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;ES2019&quot;</span>, <span class="hljs-comment">// 目标语言的版本</span><br>        <span class="hljs-string">&quot;preserveConstEnums&quot;</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 保留 const 和 enum 声明</span><br>        <span class="hljs-string">&quot;sourceMap&quot;</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 生成目标文件的sourceMap文件</span><br>        <span class="hljs-string">&quot;strictBindCallApply&quot;</span>: <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 提取this类型</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">GetThisType</span>&lt;<span class="hljs-title class_">Func</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Function</span>&gt; = <span class="hljs-title class_">Func</span> <span class="hljs-keyword">extends</span> (<span class="hljs-attr">this</span>: infer T, ...<span class="hljs-attr">args</span>: <span class="hljs-built_in">any</span>[]) =&gt; <span class="hljs-built_in">unknown</span> ? T : <span class="hljs-built_in">unknown</span><br><span class="hljs-keyword">type</span> res_This = <span class="hljs-title class_">GetThisType</span>&lt;<span class="hljs-keyword">typeof</span> foo.<span class="hljs-property">hello</span>&gt; <span class="hljs-comment">// type res_This = Foo</span><br></code></pre></td></tr></table></figure></li><li><p>构造器的类型推断</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 定义class接口</span><br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>;<br>    <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PointConstructor</span> &#123;<br>    <span class="hljs-title function_">new</span>(<span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span>)<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> x: <span class="hljs-built_in">number</span>, <span class="hljs-keyword">public</span> y: <span class="hljs-built_in">number</span></span>) &#123;<br>    &#125;<br>    <span class="hljs-title function_">sum</span>(): <span class="hljs-built_in">number</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myPoint</span>(<span class="hljs-params"></span><br><span class="hljs-params">    Constructor: PointConstructor,</span><br><span class="hljs-params">    x: <span class="hljs-built_in">number</span>,</span><br><span class="hljs-params">    y: <span class="hljs-built_in">number</span></span><br><span class="hljs-params"></span>): <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Constructor</span>(x, y)<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">p</span>: <span class="hljs-title class_">Point</span> = <span class="hljs-title function_">myPoint</span>(<span class="hljs-title class_">Point</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p.<span class="hljs-title function_">sum</span>()); <span class="hljs-comment">// 3</span><br><br><span class="hljs-comment">// 构造器</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>;<br>    <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PointConstructor</span> &#123;<br>    <span class="hljs-title function_">new</span>(<span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span>): <span class="hljs-title class_">Point</span><br>&#125;<br><br><span class="hljs-comment">// 提取返回类型</span><br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">GetInstanceType</span>&lt;<span class="hljs-title class_">Constructor</span> <span class="hljs-keyword">extends</span> <span class="hljs-keyword">new</span> (...<span class="hljs-attr">args</span>: <span class="hljs-built_in">any</span>[]) =&gt; <span class="hljs-built_in">unknown</span>&gt; = <span class="hljs-title class_">Constructor</span> <span class="hljs-keyword">extends</span> <span class="hljs-keyword">new</span> (...<span class="hljs-attr">args</span>: <span class="hljs-built_in">any</span>[]) =&gt; infer <span class="hljs-title class_">Instance</span> ? <span class="hljs-title class_">Instance</span> : <span class="hljs-built_in">any</span><br><span class="hljs-keyword">type</span> res_Instance = <span class="hljs-title class_">GetInstanceType</span>&lt;<span class="hljs-title class_">PointConstructor</span>&gt; <span class="hljs-comment">// type res_Instance = Point</span><br><br><span class="hljs-comment">// 提取参数类型</span><br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">GetParamsType</span>&lt;<span class="hljs-title class_">Constructor</span> <span class="hljs-keyword">extends</span> <span class="hljs-keyword">new</span> (...<span class="hljs-attr">args</span>: <span class="hljs-built_in">any</span>[]) =&gt; <span class="hljs-built_in">unknown</span>&gt; = <span class="hljs-title class_">Constructor</span> <span class="hljs-keyword">extends</span> <span class="hljs-keyword">new</span> (...<span class="hljs-attr">args</span>: infer <span class="hljs-title class_">Rest</span>) =&gt; <span class="hljs-built_in">any</span> ? <span class="hljs-title class_">Rest</span> : <span class="hljs-built_in">any</span><br><span class="hljs-keyword">type</span> res_Params = <span class="hljs-title class_">GetParamsType</span>&lt;<span class="hljs-title class_">PointConstructor</span>&gt; <span class="hljs-comment">// res_Params = [x: number, y: number]</span><br></code></pre></td></tr></table></figure></li><li><p>应用 提取Ref &#x3D;&gt; PropsWithRef</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">GetRefProps</span>&lt;<span class="hljs-title class_">Props</span>&gt; = <span class="hljs-string">&#x27;ref&#x27;</span> <span class="hljs-keyword">extends</span> keyof <span class="hljs-title class_">Props</span> ? <span class="hljs-title class_">Props</span> <span class="hljs-keyword">extends</span> &#123; ref?: infer <span class="hljs-title class_">Value</span> &#125; ? <span class="hljs-title class_">Value</span> : <span class="hljs-built_in">never</span> : <span class="hljs-built_in">never</span> <span class="hljs-comment">// &#x27;ref&#x27; extends keyof Props 将Props遍历成联合类型 再查看里面是否右ref属性</span><br><span class="hljs-keyword">type</span> res_Ref = <span class="hljs-title class_">GetRefProps</span>&lt;&#123; ref?: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">props</span>: <span class="hljs-built_in">string</span> &#125;&gt; <span class="hljs-comment">// type res_Ref = Point</span><br></code></pre></td></tr></table></figure></li><li><p>翻转键值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 反转键名与键值</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Reverse</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">unknown</span>&gt;&gt; = T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Record</span>&lt;infer K, infer V&gt; ? <span class="hljs-title class_">Record</span>&lt;V &amp; <span class="hljs-built_in">string</span>, K&gt; : <span class="hljs-built_in">never</span><br><br><span class="hljs-keyword">type</span> res_Reverse = <span class="hljs-title class_">Reverse</span>&lt;&#123; <span class="hljs-string">&quot;key&quot;</span>: <span class="hljs-string">&quot;value&quot;</span> &#125;&gt;; <span class="hljs-comment">// &#123; &quot;value&quot;: &quot;key&quot; &#125;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="常用自定义工具类型"><a href="#常用自定义工具类型" class="headerlink" title="常用自定义工具类型"></a>常用自定义工具类型</h3><ol><li>IRes<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 给实际的响应数据预留坑位</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">IRes</span>&lt;<span class="hljs-title class_">Data</span>&gt; = &#123;<br>    <span class="hljs-attr">code</span>: <span class="hljs-built_in">number</span>,<br>    error?: <span class="hljs-built_in">string</span>,<br>    <span class="hljs-attr">data</span>: <span class="hljs-title class_">Data</span><br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUserRes</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-attr">homepage</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-attr">avatar</span>: <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IPaginationRes</span>&lt;<span class="hljs-title class_">TItem</span> = <span class="hljs-built_in">unknown</span>&gt; &#123;<br>    <span class="hljs-attr">data</span>: <span class="hljs-title class_">TItem</span>[];<br>    <span class="hljs-attr">page</span>: <span class="hljs-built_in">number</span>;<br>    <span class="hljs-attr">totalCount</span>: <span class="hljs-built_in">number</span>;<br>    <span class="hljs-attr">hasNextPage</span>: <span class="hljs-built_in">boolean</span>;<br>&#125;<br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">const</span> <span class="hljs-attr">res_List</span>: <span class="hljs-title class_">IRes</span>&lt;<span class="hljs-title class_">IPaginationRes</span>&lt;<span class="hljs-title class_">IUserRes</span>&gt;&gt;<br><br><span class="hljs-keyword">const</span> &#123; data, code &#125; = res_List<br><span class="hljs-keyword">const</span> &#123; name, avatar, homepage &#125; = data.<span class="hljs-property">data</span>[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure></li><li></li></ol><h3 id="鸭子类型"><a href="#鸭子类型" class="headerlink" title="鸭子类型"></a>鸭子类型</h3><ol><li>结构化类型系统 只会比较结构是一致 如果结构一致 则认为输入的就是这个类型<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>) &#123; &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>) &#123; &#125;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">animal</span>(<span class="hljs-params">cat: Cat</span>) &#123;<br>&#125;<br><span class="hljs-title function_">animal</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>())<br><span class="hljs-comment">// 无报错</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>) &#123; &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>) &#123; &#125;<br>    <span class="hljs-title function_">eat</span>(<span class="hljs-params"></span>) &#123; &#125;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">animal</span>(<span class="hljs-params">cat: Cat</span>) &#123; &#125;<br><span class="hljs-title function_">animal</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>())<br><span class="hljs-comment">// 类型“Dog”的参数不能赋给类型“Cat”的参数。</span><br><span class="hljs-comment">// 类型 &quot;Dog&quot; 中缺少属性 &quot;eat&quot;，但类型 &quot;Cat&quot; 中需要该属性</span><br></code></pre></td></tr></table></figure></li><li>标称类型系统 通过类型 &#x2F; 逻辑来模拟标称类型系统<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tag</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>&gt;&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-attr">__tag__</span>: T<br>&#125;<br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Normial</span>&lt;T, U <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>&gt; = T &amp; <span class="hljs-title class_">Tag</span>&lt;U&gt;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-variable constant_">CNY</span> = <span class="hljs-title class_">Normial</span>&lt;<span class="hljs-built_in">number</span>, <span class="hljs-string">&#x27;CNY&#x27;</span>&gt;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-variable constant_">USD</span> = <span class="hljs-title class_">Normial</span>&lt;<span class="hljs-built_in">number</span>, <span class="hljs-string">&#x27;USD&#x27;</span>&gt;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CNYCount</span> = <span class="hljs-number">100</span> <span class="hljs-keyword">as</span> <span class="hljs-variable constant_">CNY</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">USDCount</span> = <span class="hljs-number">100</span> <span class="hljs-keyword">as</span> <span class="hljs-variable constant_">USD</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">addCNY</span>(<span class="hljs-params">source: CNY, input: CNY</span>) &#123;<br>    <span class="hljs-keyword">return</span> (source + input) <span class="hljs-keyword">as</span> <span class="hljs-variable constant_">CNY</span>;<br>&#125;<br><span class="hljs-title function_">addCNY</span>(<span class="hljs-title class_">CNYCount</span>, <span class="hljs-title class_">CNYCount</span>);<br><span class="hljs-comment">// 报错了！</span><br><span class="hljs-title function_">addCNY</span>(<span class="hljs-title class_">CNYCount</span>, <span class="hljs-title class_">USDCount</span>);<br></code></pre></td></tr></table></figure></li><li>类型层级 Top Type &amp; Bottom Type<br><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=MDE3YmU5YzYyMjJkYzIyODI5NjQ2ZWE5ZDQ2N2U2MGJfdVlpWFVSdWY0QzhIRjNxMEVVQWpaSExiUnNXT1FuMDdfVG9rZW46Ym94Y25yM3RHYjBqQ2NPWDVrUDV5dVk0QzVlXzE2NzMwNjgxMTc6MTY3MzA3MTcxN19WNA"></li></ol><h3 id="函数类型的协变与逆变"><a href="#函数类型的协变与逆变" class="headerlink" title="函数类型的协变与逆变"></a>函数类型的协变与逆变</h3><p>在tsconfig.json开启<strong>strictFunctionTypes</strong>的情况下，TS会开启逆变。其作用在两个函数进行类型比较的情况下，对于参数的比较遵循类型系统的逆向，即： <strong>函数类型的参数类型使用子类型逆变的方式确定是否成立，而返回值类型使用子类型协变的方式确定</strong> 。</p><p>  不开<strong>strictFunctionTypes</strong>的情况下，TS默认双变。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-title function_">animal</span>(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-title function_">bark</span>(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">let</span> haveAnimal = <span class="hljs-keyword">function</span> <span class="hljs-title function_">haveAnimal</span>(<span class="hljs-params">animal: Animal</span>) &#123;<br>    animal.<span class="hljs-title function_">animal</span>()<br>&#125;<br><span class="hljs-keyword">let</span> haveDog = <span class="hljs-keyword">function</span> <span class="hljs-title function_">haveDog</span>(<span class="hljs-params">dog: Dog</span>) &#123;<br>    dog.<span class="hljs-title function_">animal</span>()<br>    dog.<span class="hljs-title function_">bark</span>()<br>&#125;<br>haveAnimal = haveDog<br><span class="hljs-comment">// 不能将类型“(dog: Dog) =&gt; void”分配给类型“(animal: Animal) =&gt; void”</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">dog</span>: <span class="hljs-title class_">Dog</span> = &#123;<br>    <span class="hljs-title function_">bark</span>(<span class="hljs-params"></span>) &#123;<br>    &#125;,<br>    <span class="hljs-title function_">animal</span>(<span class="hljs-params"></span>) &#123;<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_">haveAnimal</span>(dog)<br></code></pre></td></tr></table></figure><h3 id="TS工程化"><a href="#TS工程化" class="headerlink" title="TS工程化"></a>TS工程化</h3><ul><li><p>类型检查指令</p><ul><li>ts-ignore</li><li>ts-except-error  二者均为忽略下一行的错误 但是ts-except-error更严谨</li><li>ts-check &amp; ts-nocheck</li><li>……</li></ul></li><li><p>类型声明<br><strong>通过额外的类型声明文件，在核心代码文件以外去提供对类型的进一步补全</strong> 。类型声明文件，即 <code>.d.ts</code> 结尾的文件，它会自动地被 TS 加载到环境中，实现对应部分代码的类型补全。</p><ul><li>无类型定义的npm包<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// index.ts</span><br><span class="hljs-keyword">import</span> foo <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pkg&#x27;</span>;<br><span class="hljs-keyword">const</span> res = foo.<span class="hljs-title function_">handler</span>();<br><span class="hljs-comment">// index.d.ts</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable language_">module</span> <span class="hljs-string">&#x27;pkg&#x27;</span> &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">handler</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">boolean</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>非代码文件（png svg md module.scss等）<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// index.ts</span><br><span class="hljs-keyword">import</span> raw <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./note.md&#x27;</span>;<br><br><span class="hljs-keyword">const</span> content = raw.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;NOTE&#x27;</span>, <span class="hljs-string">`NOTE<span class="hljs-subst">$&#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getDay()&#125;</span>`</span>);<br><br><span class="hljs-comment">// declare.d.ts</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable language_">module</span> <span class="hljs-string">&#x27;*.md&#x27;</span> &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">raw</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> raw;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>命名空间</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">namespace</span> <span class="hljs-title class_">RealCurrency</span> &#123;<br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WeChatPaySDK</span> &#123;&#125;<br><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ALiPaySDK</span> &#123;&#125;<br><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MeiTuanPaySDK</span> &#123;&#125;<br><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CreditCardPaySDK</span> &#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">namespace</span> <span class="hljs-title class_">VirtualCurrency</span> &#123;<br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QQCoinPaySDK</span> &#123;&#125;<br><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BitCoinPaySDK</span> &#123;&#125;<br><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ETHPaySDK</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>TypeScript 全面进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Front End Review</title>
    <link href="/jing-jiu/2022/10/10/review/Front%20End%20Review/"/>
    <url>/jing-jiu/2022/10/10/review/Front%20End%20Review/</url>
    
    <content type="html"><![CDATA[<h1 id="基础回顾"><a href="#基础回顾" class="headerlink" title="基础回顾"></a>基础回顾</h1><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><ol><li><p><a href="https://juejin.cn/post/6844903968292749319">js事件循环</a></p></li><li><p>Promise静态方法</p><ol><li><strong>race</strong> 有一个状态敲定就返回<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">functionrace</span>(promises) &#123;<br><span class="hljs-title function_">returnnewPromise</span>(<span class="hljs-function">(<span class="hljs-params">re, rj</span>) =&gt;</span> &#123;<br>        promises.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(item).<span class="hljs-title function_">then</span>(re, rj)<br>        &#125;)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li>all 所有promise都返回成功或者有一个失败<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">functionall</span>(arr) &#123;<br><span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span><br><span class="hljs-keyword">const</span> res = []<br><span class="hljs-title function_">returnnewPromise</span>(<span class="hljs-function">(<span class="hljs-params">re, rj</span>) =&gt;</span> &#123;<br>        arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, i</span>) =&gt;</span> &#123;<br>            count++<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(item).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> &#123;<br>                res[i] = val<br><span class="hljs-keyword">if</span> (res.<span class="hljs-property">length</span> === count) <span class="hljs-title function_">re</span>(res)<br>            &#125;, rj)<br>        &#125;);<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><strong>allSettled</strong> 所有状态都敲定<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">functionallSettled</span>(promises) &#123;<br><span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span><br><span class="hljs-keyword">const</span> res = []<br><span class="hljs-title function_">returnnewPromise</span>(<span class="hljs-function">(<span class="hljs-params">re, rj</span>) =&gt;</span> &#123;<br>        arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, i</span>) =&gt;</span> &#123;<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(item).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> &#123;<br>                count++<br>                res[i] = &#123; <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;fulfilled&#x27;</span>, <span class="hljs-attr">val</span>: val &#125;<br><span class="hljs-keyword">if</span> (promises.<span class="hljs-property">length</span> === count) <span class="hljs-title function_">re</span>(res)<br>            &#125;, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>                count++<br>                res[i] = &#123; <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;rejected&#x27;</span>, <span class="hljs-attr">err</span>: err &#125;<br><span class="hljs-keyword">if</span> (promises.<span class="hljs-property">length</span> === count) <span class="hljs-title function_">rj</span>(res)<br>            &#125;)<br>        &#125;);<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><strong>any</strong>  返回第一个结果是成功的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">functionany</span>(promises) &#123;<br><span class="hljs-keyword">let</span> arr = [],<br>        count = <span class="hljs-number">0</span><br><span class="hljs-title function_">returnnewPromise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        promises.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, i</span>) =&gt;</span> &#123;<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(item).<span class="hljs-title function_">then</span>(resolve, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>                arr[i] = &#123; <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;rejected&#x27;</span>, <span class="hljs-attr">val</span>: err &#125;<br>                count += <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> (count === promises.<span class="hljs-property">length</span>) <span class="hljs-title function_">reject</span>(<span class="hljs-title function_">newError</span>(<span class="hljs-string">&#x27;没有promise成功&#x27;</span>))<br>            &#125;)<br>        &#125;)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>链式调用</p><ol><li>JQuery形式  把当前的实例返回出去<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> user = <span class="hljs-keyword">function</span> (<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;;<br>user.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;姓名是&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>&#125;;<br>user.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getAge</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;年龄是&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>&#125;;<br><span class="hljs-keyword">var</span> user1 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">user</span>(<span class="hljs-string">&quot;zjf&quot;</span>, <span class="hljs-number">22</span>);<br>user1.<span class="hljs-title function_">getAge</span>().<span class="hljs-title function_">getName</span>()Ï<br></code></pre></td></tr></table></figure></li><li>Koa形式 中间件 通过next调用下一个<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">compose</span>(<span class="hljs-params">middlewares</span>) &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">ctx</span>) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-number">0</span>);<br>           <span class="hljs-keyword">function</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">idx</span>) &#123;<br>               <span class="hljs-keyword">const</span> fn = middlewares[idx];<br>               <span class="hljs-keyword">if</span> (!fn) &#123;<br>                   <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>();<br>               &#125;<br>               <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<br>                   <span class="hljs-title function_">fn</span>(ctx, <span class="hljs-keyword">function</span> <span class="hljs-title function_">next</span>(<span class="hljs-params"></span>) &#123;<br>                       <span class="hljs-keyword">return</span> <span class="hljs-title function_">dispatch</span>(idx + <span class="hljs-number">1</span>);<br>                   &#125;)<br>               );<br>           &#125;<br>       &#125;;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p><strong>instanceof</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">new_instance_of</span>(<span class="hljs-params">leftVaule, rightVaule</span>) &#123;<br>    <span class="hljs-keyword">let</span> rightProto = rightVaule.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>; <span class="hljs-comment">// 取右表达式的 prototype 值</span><br>    leftVaule = leftVaule.<span class="hljs-property">__proto__</span>; <span class="hljs-comment">// 取左表达式的__proto__值</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">if</span> (leftVaule === <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (leftVaule === rightProto) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        leftVaule = leftVaule.<span class="hljs-property">__proto__</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>new</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">newFn</span>(<span class="hljs-params">fn, ...args</span>) &#123;<br>    <span class="hljs-keyword">let</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    obj.<span class="hljs-property">__proto__</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(fn.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br>    <span class="hljs-keyword">const</span> res = fn.<span class="hljs-title function_">apply</span>(obj, args)<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> res === <span class="hljs-string">&quot;object&quot;</span> ? res : obj<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>call、bind、apply</p></li><li><p>Event Bus</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EventBus</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventObj</span> = &#123;&#125;; <span class="hljs-comment">// 用于存储所有订阅事件</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">callbcakId</span> = <span class="hljs-number">0</span>; <span class="hljs-comment">// 每个函数的ID</span><br>    &#125;<br>    <span class="hljs-comment">// 订阅事件,类似监听事件$on(&#x27;key&#x27;,()=&gt;&#123;&#125;)</span><br>    $on(name, callbcak) &#123;<br>        <span class="hljs-comment">// 判断是否存储过</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">eventObj</span>[name]) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventObj</span>[name] = &#123;&#125;;<br>        &#125;<br>        <span class="hljs-comment">// 定义当前回调函数id</span><br>        <span class="hljs-keyword">const</span> id = <span class="hljs-variable language_">this</span>.<span class="hljs-property">callbcakId</span>++;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventObj</span>[name][id] = callbcak; <span class="hljs-comment">// 以键值对的形式存储回调函数</span><br>        <span class="hljs-keyword">return</span> id; <span class="hljs-comment">// 将id返回出去，可以利用该id取消订阅</span><br>    &#125;<br>    <span class="hljs-comment">// 发布事件,类似于触发事件$emit(&#x27;key&#x27;)</span><br>    $emit(name, ...args) &#123;<br>        <span class="hljs-comment">// 获取存储的事件回调函数数组</span><br>        <span class="hljs-keyword">const</span> eventList = <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventObj</span>[name];<br>        <span class="hljs-comment">// 执行所有回调函数且传入参数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> id <span class="hljs-keyword">in</span> eventList) &#123;<br>            eventList[id](...args);<br>            <span class="hljs-comment">// 如果是订阅一次，则删除</span><br>            <span class="hljs-keyword">if</span> (id.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;D&#x27;</span>) !== -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">delete</span> eventList[id];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 取消订阅函数，类似于$off(&#x27;key1&#x27;, id)</span><br>    $off(name, id) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">eventObj</span>)<br>        <span class="hljs-comment">// 删除存储在事件列表中的该事件</span><br>        <span class="hljs-keyword">delete</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventObj</span>[name][id];<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;id&#125;</span>id事件已被取消订阅`</span>)<br>        <span class="hljs-comment">// 如果这是最后一个订阅者，则删除整个对象</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">eventObj</span>[name]).<span class="hljs-property">length</span>) &#123;<br>            <span class="hljs-keyword">delete</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventObj</span>[name];<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 订阅事件，只会执行一次，为了方便，id上直接加上一个标识d</span><br>    $once(name, callbcak) &#123;<br>        <span class="hljs-comment">// 判断是否存储过</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">eventObj</span>[name]) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventObj</span>[name] = &#123;&#125;;<br>        &#125;<br>        <span class="hljs-comment">// 定义当前回调函数id,添加D则代表只执行一次</span><br>        <span class="hljs-keyword">const</span> id = <span class="hljs-string">&quot;D&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">callbcakId</span>++;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventObj</span>[name][id] = callbcak; <span class="hljs-comment">// 以键值对的形式存储回调函数</span><br>        <span class="hljs-keyword">return</span> id; <span class="hljs-comment">// 将id返回出去，可以利用该id取消订阅</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 初始化EventBus</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable constant_">EB</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventBus</span>();<br><br><span class="hljs-comment">// 订阅事件</span><br><span class="hljs-variable constant_">EB</span>.$on(<span class="hljs-string">&#x27;key1&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;A:&quot;</span>, name, age);<br>&#125;)<br><span class="hljs-variable constant_">EB</span>.$once(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;B:&quot;</span>, name, age);<br>&#125;)<br><span class="hljs-variable constant_">EB</span>.$on(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;C:&quot;</span>, name);<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p><strong>不可变对象</strong></p><ol><li>seal 会使对象的所有属性的<strong>configurable为</strong>false，但是仍然可以修改现有的属性，因为<strong>writable</strong>为true。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">author</span>: <span class="hljs-string">&quot;DevPoint&quot;</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptors</span>(obj));<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">  author: &#123;</span><br><span class="hljs-comment">    value: &#x27;DevPoint&#x27;,</span><br><span class="hljs-comment">    writable: true,</span><br><span class="hljs-comment">    enumerable: true,</span><br><span class="hljs-comment">   configurable: true</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">seal</span>(obj)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptors</span>(obj));<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">  author: &#123;</span><br><span class="hljs-comment">    value: &#x27;DevPoint&#x27;,</span><br><span class="hljs-comment">    writable: true,</span><br><span class="hljs-comment">    enumerable: true,</span><br><span class="hljs-comment">    configurable: false</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li><li>freeze 同理，使得<strong>writable，configurable</strong>均为false，使得其不可修改和扩展。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">author</span>: <span class="hljs-string">&quot;DevPoint&quot;</span> &#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(obj)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptors</span>(obj));<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">  author: &#123;</span><br><span class="hljs-comment">    value: &#x27;DevPoint&#x27;,</span><br><span class="hljs-comment">    writable: false,</span><br><span class="hljs-comment">    enumerable: true,</span><br><span class="hljs-comment">    configurable: false</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li><li>缺点 二者均只能监控第一层，对于有多层嵌套的对象，可以采用<strong>递归</strong>的方式进行封闭 &#x2F; 冻结。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> obj = &#123;<br>    <span class="hljs-attr">author</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;author&quot;</span>,<br>    &#125;,<br>&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(obj);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptors</span>(obj.<span class="hljs-property">author</span>));<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">  name: &#123;</span><br><span class="hljs-comment">    value: &#x27;author&#x27;,</span><br><span class="hljs-comment">   writable: true,</span><br><span class="hljs-comment">enumerable: true,</span><br><span class="hljs-comment">    configurable: true</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// deepSeal同理</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepFreeze</span>(<span class="hljs-params">object</span>) &#123;<br>    <span class="hljs-keyword">const</span> propsNames = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(object);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> name <span class="hljs-keyword">of</span> propsNames) &#123;<br>        <span class="hljs-keyword">const</span> value = object[name];<br>        <span class="hljs-keyword">if</span> (value &amp;&amp; <span class="hljs-keyword">typeof</span> value === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>            <span class="hljs-title function_">deepFreeze</span>(value);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(object);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p><a href="https://segmentfault.com/a/1190000039042550">闭包</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">fn, wait</span>) &#123;<br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">clearTimeout</span>(timer);<br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            fn.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, ...<span class="hljs-variable language_">arguments</span>);<br>        &#125;, wait);<br>    &#125;;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">fn, delay = <span class="hljs-number">500</span></span>) &#123;<br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!timer) &#123;<br>            timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args);<br>                timer = <span class="hljs-literal">null</span>;<br>            &#125;, delay);<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>defer async区别</p><ol><li>async js脚本的加载不会阻塞渲染，但是当js加载完成会立即运行，此时会阻塞html的渲染，而且多个async脚本的执行顺序不一致</li><li>defer与async类似，但是它会在html加载完成后才执行，且保证执行顺序。</li></ol></li><li><p>数组的filter、every、flat</p><ol><li><p>filter</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myFilter</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">fn, thisValue</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> fn !== <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;fn&#125;</span> 不是一个函数`</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ([<span class="hljs-literal">null</span>, <span class="hljs-literal">undefined</span>].<span class="hljs-title function_">includes</span>(<span class="hljs-variable language_">this</span>)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`this 是null 或者 undefined`</span>);<br>    &#125;<br>    <span class="hljs-keyword">const</span> arr = <span class="hljs-title class_">Object</span>(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-keyword">const</span> filterArr = []; <span class="hljs-comment">// 没有符合条件的返回空数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">const</span> res = fn.<span class="hljs-title function_">call</span>(thisValue, arr[i], i, arr);<br>        <span class="hljs-keyword">if</span> (res) &#123;<br>            filterArr.<span class="hljs-title function_">push</span>(arr[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> filterArr;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>every<strong>如果所有元素都通过检测返回 true，否则返回 false</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myEvery</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">fn, thisValue</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> fn !== <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;fn&#125;</span> 不是一个函数`</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ([<span class="hljs-literal">null</span>, <span class="hljs-literal">undefined</span>].<span class="hljs-title function_">includes</span>(<span class="hljs-variable language_">this</span>)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`this 是null 或者 undefined`</span>);<br>    &#125;<br>    <span class="hljs-keyword">const</span> arr = <span class="hljs-title class_">Object</span>(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">const</span> res = fn.<span class="hljs-title function_">call</span>(thisValue, arr[i], i, arr);<br>        <span class="hljs-keyword">if</span> (!res) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>flat 数组扁平化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">Myflat</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">dep = <span class="hljs-number">1</span></span>) &#123;<br>    <span class="hljs-keyword">let</span> res = [];<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(item) &amp;&amp; dep &gt; <span class="hljs-number">0</span>) &#123;<br>            dep--;<br>            res = res.<span class="hljs-title function_">concat</span>(item.<span class="hljs-title class_">Myflat</span>(dep));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            res.<span class="hljs-title function_">push</span>(item);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ol></li><li><p><a href="https://juejin.cn/post/7077430645844082702">Map和Set,Object的区别</a></p></li><li><p>JS场景手写题目</p><ol><li><p>数组转树</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 把平铺的数组结构转成树形结构</span><br><span class="hljs-comment">        */</span><br><span class="hljs-keyword">const</span> arr = [<br>            &#123; <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;29&#x27;</span>, <span class="hljs-string">&#x27;pid&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;总裁办&#x27;</span> &#125;,<br>            &#123; <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;2c&#x27;</span>, <span class="hljs-string">&#x27;pid&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;财务部&#x27;</span> &#125;,<br>            &#123; <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;2d&#x27;</span>, <span class="hljs-string">&#x27;pid&#x27;</span>: <span class="hljs-string">&#x27;2c&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;财务核算部&#x27;</span> &#125;,<br>            &#123; <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;2f&#x27;</span>, <span class="hljs-string">&#x27;pid&#x27;</span>: <span class="hljs-string">&#x27;2c&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;薪资管理部&#x27;</span> &#125;,<br>            &#123; <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;d2&#x27;</span>, <span class="hljs-string">&#x27;pid&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;技术部&#x27;</span> &#125;,<br>            &#123; <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;d3&#x27;</span>, <span class="hljs-string">&#x27;pid&#x27;</span>: <span class="hljs-string">&#x27;d2&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Java研发部&#x27;</span> &#125;<br>        ]<br><br><span class="hljs-title function_">functiontranListToTreeData</span>(list) &#123;<br><span class="hljs-comment">// 1. 定义两个中间变量</span><br><span class="hljs-keyword">const</span> treeList = [],  <span class="hljs-comment">// 最终要产出的树状数据的数组</span><br>                map = &#123;&#125;        <span class="hljs-comment">// 存储映射关系</span><br><span class="hljs-comment">// 2. 建立一个映射关系，并给每个元素补充children属性.</span><br><span class="hljs-comment">// 映射关系: 目的是让我们能通过id快速找到对应的元素</span><br><span class="hljs-comment">// 补充children：让后边的计算更方便</span><br>            list.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (!item.<span class="hljs-property">children</span>) &#123;<br>                    item.<span class="hljs-property">children</span> = []<br>                &#125;<br>                map[item.<span class="hljs-property">id</span>] = item<br>            &#125;)<br><span class="hljs-comment">//  &#123;</span><br><span class="hljs-comment">//    &quot;29&quot;: &#123; &#x27;id&#x27;: &#x27;29&#x27;, &#x27;pid&#x27;: &#x27;&#x27;,     &#x27;name&#x27;: &#x27;总裁办&#x27;, children:[] &#125;,</span><br><span class="hljs-comment">//    &#x27;2c&#x27;: &#123; &#x27;id&#x27;: &#x27;2c&#x27;, &#x27;pid&#x27;: &#x27;&#x27;,     &#x27;name&#x27;: &#x27;财务部&#x27;, children:[] &#125;,</span><br><span class="hljs-comment">//    &#x27;2d&#x27;: &#123; &#x27;id&#x27;: &#x27;2d&#x27;, &#x27;pid&#x27;: &#x27;2c&#x27;, &#x27;name&#x27;: &#x27;财务核算部&#x27;, children:[]&#125;,</span><br><span class="hljs-comment">//    &#x27;2f&#x27;: &#123; &#x27;id&#x27;: &#x27;2f&#x27;, &#x27;pid&#x27;: &#x27;2c&#x27;, &#x27;name&#x27;: &#x27;薪资管理部&#x27;, children:[]&#125;,</span><br><span class="hljs-comment">//    &#x27;d2&#x27;: &#123; &#x27;id&#x27;: &#x27;d2&#x27;, &#x27;pid&#x27;: &#x27;&#x27;,     &#x27;name&#x27;: &#x27;技术部&#x27;, children:[]&#125;,</span><br><span class="hljs-comment">//    &#x27;d3&#x27;: &#123; &#x27;id&#x27;: &#x27;d3&#x27;, &#x27;pid&#x27;: &#x27;d2&#x27;, &#x27;name&#x27;: &#x27;Java研发部&#x27;, children:[]&#125;</span><br><span class="hljs-comment">//  &#125;</span><br><br><span class="hljs-comment">// 3. 循环</span><br>            list.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br><span class="hljs-comment">// 对于每一个元素来说，先找它的上级</span><br><span class="hljs-comment">//    如果能找到，说明它有上级，则要把它添加到上级的children中去</span><br><span class="hljs-comment">//    如果找不到，说明它没有上级，直接添加到 tree3List</span><br><span class="hljs-keyword">const</span> parent = map[item.<span class="hljs-property">pid</span>]<br><span class="hljs-keyword">if</span> (parent) &#123;<br>                    parent.<span class="hljs-property">children</span>.<span class="hljs-title function_">push</span>(item)<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    treeList.<span class="hljs-title function_">push</span>(item)<br>                &#125;<br>            &#125;)<br><span class="hljs-comment">// 4. 返回出去</span><br><span class="hljs-keyword">return</span> treeList<br>        &#125;<br><br><span class="hljs-keyword">const</span> treeList = <span class="hljs-title function_">tranListToTreeData</span>(arr)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(treeList);<br></code></pre></td></tr></table></figure></li><li><p>数组洗牌</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">randRom</span>(<span class="hljs-params">arr</span>) &#123;<br><span class="hljs-keyword">var</span> res = []<br> <span class="hljs-keyword">while</span> (arr.<span class="hljs-property">length</span>&gt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">let</span> index = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*arr.<span class="hljs-property">length</span>)<br>     res.<span class="hljs-title function_">push</span>(arr[index])<br>     arr.<span class="hljs-title function_">splice</span>(index,<span class="hljs-number">1</span>)<br> &#125;<br> <span class="hljs-keyword">return</span> res<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">randRom</span>(arr))<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">randRom3</span>(<span class="hljs-params">arr</span>)&#123;<br>    arr.<span class="hljs-title function_">sort</span>(<span class="hljs-number">0.5</span> - <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>())<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><a href="https://juejin.cn/post/7041515221625602055">Promise并发控制</a></p></li></ol></li><li><p>compose</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params">fn1</span>) &#123;<br>    <span class="hljs-keyword">return</span> fn1 + <span class="hljs-string">&quot;fn2&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn3</span>(<span class="hljs-params">fn2</span>) &#123;<br>    <span class="hljs-keyword">return</span> fn2 + <span class="hljs-string">&quot;fn3&quot;</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">componse</span>(<span class="hljs-params">...fns</span>) &#123;<br>    <span class="hljs-keyword">const</span> lastFn = fns.<span class="hljs-title function_">pop</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-keyword">const</span> res = <span class="hljs-title function_">lastFn</span>(...args);<br>        <span class="hljs-keyword">return</span> fns.<span class="hljs-title function_">reduceRight</span>(<span class="hljs-function">(<span class="hljs-params">pre, curr</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">curr</span>(pre);<br>        &#125;, res);<br>    &#125;;<br>&#125;<br><span class="hljs-keyword">let</span> res = <span class="hljs-title function_">componse</span>(fn3, fn2, fn1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">res</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure></li><li><p>Proxy拦截Map，Set</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> targetMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br><span class="hljs-keyword">const</span> interceptor = &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">key</span>) &#123;<br>        <span class="hljs-keyword">const</span> target = targetMap.<span class="hljs-title function_">get</span>(<span class="hljs-variable language_">this</span>);<br>        <span class="hljs-keyword">return</span> target.<span class="hljs-title function_">get</span>(key);<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">key, value</span>) &#123;<br>        <span class="hljs-keyword">const</span> target = targetMap.<span class="hljs-title function_">get</span>(<span class="hljs-variable language_">this</span>);<br>        <span class="hljs-keyword">return</span> target.<span class="hljs-title function_">set</span>(key, value);<br>    &#125;,<br>    <span class="hljs-title function_">delete</span>(<span class="hljs-params">key</span>) &#123;<br>        <span class="hljs-keyword">const</span> target = targetMap.<span class="hljs-title function_">get</span>(<span class="hljs-variable language_">this</span>);<br>        <span class="hljs-keyword">return</span> target.<span class="hljs-title function_">delete</span>(key);<br>    &#125;,<br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createProxy</span>(<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(obj, &#123;<br>        <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key, receiver</span>) &#123;<br>            target = interceptor.<span class="hljs-title function_">hasOwnProperty</span>(key)<br>                ? interceptor<br>                : target;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, key, receiver);<br>        &#125;,<br>    &#125;);<br>    targetMap.<span class="hljs-title function_">set</span>(proxy, obj);<br>    <span class="hljs-keyword">return</span> proxy;<br>&#125;<br><span class="hljs-keyword">let</span> map = <span class="hljs-title function_">createProxy</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>());<br></code></pre></td></tr></table></figure></li><li><p>内存相关</p><ol><li>全局变量和被捕获变量（闭包）储存在堆中（全局中的基本类型的值是存在堆中，它的引用地址是存在全局执行上下文的栈内存中）。<ul><li><p>被捕获变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span> () &#123;<br>    <span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> string = <span class="hljs-string">&#x27;前端&#x27;</span>;<br>    <span class="hljs-keyword">let</span> bool = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">let</span> obj = &#123;<br>        <span class="hljs-attr">attr1</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">attr2</span>: <span class="hljs-string">&#x27;收割机&#x27;</span>,<br>        <span class="hljs-attr">attr3</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">attr4</span>: <span class="hljs-string">&#x27;something&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">log</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num, string, bool, obj);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=YTMwYTFkZDQwMjI0ZTYyZjJmNGU3ZmNjNTA0NWNlNDhfd21uY2NYVW84RWxmTWdqaVB5cEpkS01SalZDM2I5MmFfVG9rZW46Ym94Y243SzJrQllKdTdhWTF0WGVvd2dDMXpnXzE2Njk2MDYzMzM6MTY2OTYwOTkzM19WNA"></p></li><li><p>全局变量<br><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=MTI4YzYyNDY5Yzk5NDlkZTE3YmZmOWQ0N2I1MGQ3NzFfeXpCR1RyMG5rdW85T00wcGF5bkQwSGg4RXVqT3RJT3RfVG9rZW46Ym94Y25UTzdSeTFHUHk2R1B0VGk1NkIwTWZlXzE2Njk2MDYzMzM6MTY2OTYwOTkzM19WNA"></p></li></ul></li><li>局部变量：如果是基础类型，那栈中储存的是数据本身。如果是对象类型，那栈中存储的是堆中对象的引用（对象本身储存在堆中）。</li></ol></li><li><p><a href="https://segmentfault.com/a/1190000014093547">拖拽性能优化</a></p><ol><li>弃用html5的drag，改用mouse事件</li><li>mousedown的时候clone当前点击的元素为ghost并将原来的元素visibility:hidden;visibility让原来的元素依然占据着位置，是拖拽中不改变dom的关键。</li><li>设置ghost的position为fixed，脱离文档流，这样无论怎么拖拽都不会影响到布局。</li><li>将mousemove和mouseend事件添加到window上，这样无论鼠标怎么移动ghost都流畅跟随。mousemove的时候判断ghost与其他元素的位置，只使用translate去改变，直到真正拖拽结束才进行一次排序。</li><li>优化后的自定义ghost能让人清晰得看到正在移动的元素。</li></ol></li><li><p><a href="https://juejin.cn/post/6973946041691275271">浏览器运行机制</a></p></li></ol><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ol><li><p><strong>display:none opacity:0 以及visibility:hidden区别</strong></p><ol><li>display不会被子元素继承 但是父元素不在了，子元素也就不在了</li><li>opacity可以被子元素继承，但是不能设置子元素opacity:1使子元素显示</li><li>visibility可以被子元素继承，子元素设置visibility:visibile显示</li></ol></li><li><p><strong>flex:1</strong></p><ol><li>flex-grow 定义放大比例 默认为0 不放大</li><li>flex-shrink 定义缩小比例 默认为1  空间不足就缩小</li><li>flex-basis 定义分配多余空间之前，项目占据的主轴空间 默认auto 即元素本来的大小| <strong>语法</strong> | <strong>等值</strong> |<br>| ————– | ————– |<br>| flex: initial  | flex: 0 1 auto |<br>| flex: 0        | flex: 0 1 0%   |<br>| flex: none     | flex: 0 0 auto |<br>| flex: 1        | flex: 1 1 0%   |<br>| flex: auto     | flex: 1 1 auto |</li></ol></li><li><p>0.5px的线  transform: scaleY(0.5);</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">BFC</a></p><ol><li><a href="https://juejin.cn/post/6950082193632788493">面试官：请说说什么是BFC？大白话讲清楚</a></li><li>三栏布局<ol><li>浮动方式<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.left</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: <span class="hljs-number">#f66</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">float</span>: right;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: <span class="hljs-number">#f66</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.main</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: <span class="hljs-number">#fcc</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>flex布局</li><li>绝对定位</li></ol></li></ol></li><li><p>选择器权重 !important &gt; 内联 &gt; id &gt; 类 伪类 属性 &gt; 标签 伪元素 &gt; 通配符 兄弟选择器</p></li><li><p><a href="https://juejin.cn/post/6844903667175260174">z-index</a></p></li><li><p>浮动的产生、浮动带来的影响、消除影响的方式</p></li><li><p><a href="https://juejin.cn/post/6844903667175260174">-index</a></p></li><li><p><a href="https://juejin.cn/post/6844903702172532744">浏览器GPU加速</a></p></li></ol><h2 id="智力题"><a href="#智力题" class="headerlink" title="智力题"></a>智力题</h2><ul><li>赛马</li><li>变色龙</li></ul><h2 id="H5"><a href="#H5" class="headerlink" title="H5"></a>H5</h2><h3 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API">Canvas</a></h3><ul><li><p><a href="https://www.grapecity.com.cn/blogs/spreadjs-advantages-and-practical-applications-of-canvas">Canvas，DOM，SVG性能对比</a><br>Google Docs宣布将会把HTML迁移到基于Canvas渲染，这一消息的出现再次把几年前随HTML5诞生的标签重新推到了人们视线之中。Canvas在刚推出时主打的优势就是更快的渲染速度，堪称HTML届的“苏炳添”，刷新了人们对Web页面元素绘制速度的印象。但Canvas的优势仅限于此吗？</p><p><strong>HTML绘图届的前辈：SVG</strong></p><p>Canvas是HTML5时代引入的“新”标签。与很多标签不同，Canvas不具有自己的行为，只将一组API 展现给客户端 JavaScript ，让开发者使用脚本把想绘制的东西画到一张画布上。</p><p>在HTML5之前，人们通常使用SVG来在页面上绘制出图形。SVG使用XML来定义图形，就像使用HTML标签和样式定义DIV一样，我们也可以将一个空白的DIV想象为长方形的SVG，两者的设计思想是相通的，SVG的本质就是一个DOM元素。而Canvas则不同，Canvas提供的是 JavaScript 的绘图 API，而不是像 SVG那样使用XML 描述绘图，通过JavaScript API直接完成绘制，比起修改XML来说要更简便、更直接。</p><p>除了定义的方式不同，Canvas和DOM（当然也包含SVG）的差异更多的体现在浏览器的渲染方式上。</p><p>浏览器在做页面渲染时，Dom元素是作为矢量图进行渲染的。每一个元素的边距都需要单独处理，浏览器需要将它们全都处理成像素才能输出到屏幕上，计算量十分庞大。当页面上内容非常多，存在大量DOM元素的时候，这些内容的渲染速度就会变得很慢。</p><p>而Canvas与DOM的区别则是Canvas的本质就是一张位图，类似img标签，或者一个div加了一张背景图（background-image）。所以，DOM那种矢量图在渲染中存在的问题换到Canvas身上就完全不同了。在渲染Canvas时，浏览器只需要在JavaScript引擎中执行绘制逻辑，在内存中构建出画布，然后遍历整个画布里所有像素点的颜色，直接输出到屏幕就可以了。不管Canvas里面的元素有多少个，浏览器在渲染阶段也仅需要处理一张画布。</p><p>然而这样更加强大的功能，不可避免的让使用canvas渲染有很高的门槛。Google Docs在构建Canvas的过程中重新定义了往常已经被人们所熟悉的内容，例如精确定位、文本选择、拼写检查、重画调优等。为什么更多开发者还是选择了接纳Canvas这个门槛更高的技术路线呢？这就得回到Canvas的最大优势：渲染性能。</p><p><strong>Canvas的渲染模式</strong></p><p>这里的渲染是指浏览器将页面的代码呈现为屏幕上内容的过程。Canvas和Dom的渲染模式完全不同，搞清楚这个差异对理解Canvas的性能优势至关重要。</p><p><strong>DOM：驻留模式</strong></p><p>驻留模式（Retained Mode）是Dom在浏览器中的渲染模式。下图粗略展示了这一过程的工作流程。</p><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTkzMGU4MGQyMGY1YzJjYjAxOTlmNmQzMzk1YzI5MzVfTHA0SWw0WWRkOGFCcmVHeDdxUHdDNlk5cHhwbXpkajZfVG9rZW46Ym94Y25qQlg3QzdWN2F4bUtXTHVrdzlkV1RoXzE2Njk2MDY0MTc6MTY2OTYxMDAxN19WNA"></p><p>DOM的核心是标签，一种文本标记型语言，多样性很强且多个标签之间存在各种关联（如在同一个DIV下设置为float的子DIV）。浏览器为了更好的处理这些DOM元素，减少对绘制API的调用，就设计了一套将中间结果存放于内存的“驻留模式”。首先，浏览器会将解析DOM相关的全部内容（包含HTML标签、样式和JavaScript），将其转化为场景（scene）和模型（model）存储到内存中，然后再调用系统的绘制API（如Windows程序员熟悉的GDI&#x2F;GDI+），把这些中间产物绘制到屏幕。</p><p>驻留模式通过场景和模型缓存减少了对绘制API的调用频次，将性能压力转移到场景和模型生成阶段，即浏览器需要根据DOM上下文和BOM中的尺寸数据，“自行判断”每一个元素的绘制结果。</p><p><strong>Canvas：快速模式</strong></p><p>Canvas采用了和DOM不同的快速模式（Immediate Mode），让我们先来看看快速模式是如工作的：</p><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=YWQzZTdmZGYxODFlNzUzZDE4YmFlMzI2YjhlZDEzZjJfRlNGa241aVVHTGliZzl6VjhBMkJKeWxDNkJaNmdiMzJfVG9rZW46Ym94Y25yaFZQNUhVYWRxbWE0RUQ0aTg5UWlkXzE2Njk2MDY0MTc6MTY2OTYxMDAxN19WNA"></p><p>与驻留模式相比，快速模式将场景和模型的生成从浏览器移交给了开发者。开发者在设计页面时，就通过Canvas的JavaScript API定义了画布内所有元素的绘制方式。浏览器只需要简单的执行这些脚本即可，而不需要像渲染DOM一样逐个处理子元素了。</p><p>在快速模式中，页面的绘制性能得到了大幅提升。但开发者不仅需要指定什么需要画，还要创建和维护一个模型。此外，开发者还需要管理好当前场景重绘时带来的改变，以及响应用户的点击或输入操作等。</p><p><strong>Canvas的应用优点</strong></p><p>上面介绍的两种不同的模式直接造成了Dom和Canvas的性能差异。对于使用快速模式渲染的Canvas而言，浏览器的每次重绘都是基于代码的，不存在能让处理流程变慢的多层解析，所以它真的很快。除了快之外，Canvas的灵活性也大大超出DOM。我们可以通过代码精确的控制如何、何时绘制出我们想要的效果。</p><p>在资源消耗上，DOM的驻留模式意味着场景中每增加一点东西就需要额外消耗一些内存，而Canvas并没有这个问题。这个差异会随着页面元素的数量增多而愈加明显。以B端的企业应用场景为例，表单那种数据量比较小的场景，不同渲染模式带来的效果差异并不明显；但在工业制造、金融财会等类Excel电子表格操作的场景下，单元格数量动辄便是上百万（5万行x 20列）甚至上亿个，浏览器需要对表格所有单元格本身内容进行渲染，同时还涉及到丰富的数据处理，情况就完全不同了。</p><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=NTlkZjg0YjUzOGY3NDJhNGViNDE3ODU2YTZkNDZlZjVfVTRPZlJia1dkSkNhejFFRlg5UXk0VFhkUW5tWXhndTBfVG9rZW46Ym94Y25DcGo4MzUwbFZoYmEzaUlNSXhTemZjXzE2Njk2MDY0MTc6MTY2OTYxMDAxN19WNA"></p><p>（Web页面上的电子表格，包含1百万个单元格）</p><p>在Canvas出现之前，在前端渲染表格时只能通过构建复杂的DOM来实现。这种方式下，浏览器的性能成为了Web应用瓶颈，让很多开发者放弃了在浏览器上实现电子表格的想法。</p><p>在Canvas出现后，快速模式带来的性能优势无疑是一个巨大的亮点，大量、复杂的DOM渲染处理带来的性能问题终于有了解决途径。</p><p>回到电子表格的应用场景，业内已经出现了使用Canvas绘制画布的<a href="https://www.grapecity.com.cn/developer/spreadjs">表格组件</a>，这类组件在渲染数据层时不仅无需重复创建和销毁DOM元素，在画布的绘制过程中，也比Dom元素渲染的限制更少。除了表格之外，Canvas也为数字孪生可视化大屏、页面游戏等场景带来了变革。</p><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjNiNDRkY2ZkZDM1Zjk5M2EyMWFhY2FkY2UyY2ZlMWVfcFl1cHBRY0NBS0FwcEhSdTdEdFhPbXpQMDBVTXE2VE5fVG9rZW46Ym94Y25qbG04MWZMdDMzTGxJZ2VHNGVZS01jXzE2Njk2MDY0MTc6MTY2OTYxMDAxN19WNA"></p><p>（数字孪生大屏，精确控制各种形状、样式）</p><p><strong>总结</strong></p><p>总结一下，在渲染模式上，Canvas站在了DOM的对面，浏览器对其内容一无所知，一切渲染的权利回到了开发者的手上，这个改变带来了显著的性能优势。此外，我们可以使用Canvas绘制种类更为丰富的UI元素，如线形、特殊图形等，通过画法逻辑，还可以实现更加精准的UI界面渲染，解决了浏览器差异造成的样式误差，让更多应用场景可以顺利迁移到Web平台上来。</p></li><li><p><a href="https://juejin.cn/post/7119495608938790942#heading-1">基本使用</a></p></li><li><p><a href="https://juejin.cn/post/7016559372331401253">Canvas如何实现DOM事件的监听-Konva原理</a></p></li><li><p><a href="https://juejin.cn/post/6950684708443258894">手写echarts图表</a></p></li></ul><h3 id="web安全"><a href="#web安全" class="headerlink" title="web安全"></a><a href="https://juejin.cn/post/7118917161262776356">web安全</a></h3><h3 id="WebGL"><a href="#WebGL" class="headerlink" title="WebGL"></a><a href="https://juejin.cn/post/7035567609563054094#heading-9">WebGL</a></h3><h3 id="WebWorker"><a href="#WebWorker" class="headerlink" title="WebWorker"></a><a href="https://juejin.cn/post/6844903736238669837">WebWorker</a></h3><h1 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h1><h2 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h2><ol><li><p><a href="https://juejin.cn/post/6844903974437388295#heading-0">前端框架用vue还是react？清晰对比两者差异</a></p></li><li><p>依赖收集</p><ol><li>每个属性都拥有自己的 <code>dep</code>属性，存放他所依赖的watcher，当属性变化后会通知自己对应的watcher去更新</li><li>每个属性都拥有自己的 <code>dep</code>属性，存放他所依赖的watcher，当属性变化后会通知自己对应的watcher去更新</li><li>默认在初始化时会调用render函数，此时会触发属性依赖收集 <code>dep.depend</code></li><li>当属性发生修改时会触发 <code>watcher</code>更新 <code>dep.notify()</code><br><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=NTAxMDcyZmMwOTNjMGU3OTExMmM0NjQ0MDdhODU5ODBfejRCV2N2aDlUa0lIY1ROVEpuTmRJcXdGQUQ5RVpJczZfVG9rZW46Ym94Y256bWhMRlNtdTBXZVc1YUV0QUgxTDdiXzE2Njk2MDY0NDA6MTY2OTYxMDA0MF9WNA"></li></ol></li><li><p>Diff算法</p><ol><li>新前：newChildren中所有未处理的第一个节点<br>新后：newChildren中所有未处理的最后一个节点<br>旧前：oldChildren中所有未处理的第一个节点<br>旧后：oldChildren中所有未处理的最后一个节点</li><li>新前与旧前 新后与旧后 新后与旧前 新前与旧后<br><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=YjY0NGJlNWYzNTExYzA4NmRjOTI2MWIxYTAxMWMzZjdfZWFWT3dROE1NVkVhWUNCSWlEV3hNdjdsR2VNTEQ2UjBfVG9rZW46Ym94Y25rUDFNdXhWT01JZ21zcnBKS29LejdlXzE2Njk2MDY0NDA6MTY2OTYxMDA0MF9WNA"></li></ol></li></ol><h2 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h2><ol><li><p>依赖收集</p><ol><li>Proxy + Reflect进行代理 &#x3D;&gt; reactive  （只能让对象成为依赖收集的对象 因为proxy第一个参数只接受对象）</li><li>ref可以将基本类型数据包裹成响应式，其实就是封装了一个类 调用类的set和get 转成es5其实还是definePrototy</li><li>在get中调用 <code>track</code>收集依赖 在set中调用 <code>trigger</code>触发更新 更新的其实是副作用effect 区别于Vue2的watcher</li><li>对于map，set数据结构的处理 由于二者的proxy只会监听到get事件，因此只能根据value进行判断处理</li></ol></li><li><p>Diff算法</p><ol><li>快速diff算法 + 最长递增子序列<ul><li>相同前置节点处理</li><li>相同后置节点处理</li><li>剩余节点的处理<ul><li>只有新的一组的子节点有剩余</li><li>只有老的一组的子节点有剩余</li><li>新老都有剩余</li></ul></li></ul></li><li>静态标记</li><li>区别<br>在 vue2 中是通过对旧节点列表建立一个 { key, oldVnode }的映射表，然后遍历新节点列表的剩余节点，根据newVnode.key在旧映射表中寻找可复用的节点，然后打补丁并且移动到正确的位置。<br>而在 vue3 中是建立一个存储新节点数组中的剩余节点在旧节点数组上的索引的映射关系数组，建立完成这个数组后也即找到了可复用的节点，然后通过这个数组计算得到最长递增子序列，这个序列中的节点保持不动，然后将新节点数组中的剩余节点移动到正确的位置。<br><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=NWUyZTg5ZTM2ZDk4ZTg4NDQxNjgyMDMzOTI0NjFlYzBfTWlGY1BPOFhucHd4RGpkbTFhRHhodm56a3hRbEFnN1hfVG9rZW46Ym94Y25nUTJLMGRuaGFmVHdIY1hlc3N5bnNjXzE2Njk2MDY0NDA6MTY2OTYxMDA0MF9WNA"></li></ol></li></ol><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><h2 id="SoildJS"><a href="#SoildJS" class="headerlink" title="SoildJS"></a>SoildJS</h2><h1 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h1><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><h3 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h3><h4 id="路由机制"><a href="#路由机制" class="headerlink" title="路由机制"></a>路由机制</h4><p>一个简单的express使用例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/home&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;home&quot;</span>);<br>&#125;);<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/users&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;users&quot;</span>);<br>&#125;);<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;listening&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>分析app应该是一个构造函数的实例，身上应该有get，listen方法.而且我们可以定义多个路由，应该单独抽离出来管理这些路由。因此需要两个构造函数（  **Application 负责新增路由，启动服务，Router 管理路由 ** ）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//Application.js</span><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br>constRouter = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./router/index&quot;</span>);<br><span class="hljs-title function_">functionApplication</span>() &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">router</span> = <span class="hljs-title function_">newRouter</span>();<br>&#125;<br><span class="hljs-title class_">Application</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">listen</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">const</span> _this = <span class="hljs-variable language_">this</span>;<br><span class="hljs-title function_">functiondone</span>(req, res) &#123;<br>        res.<span class="hljs-title function_">end</span>(<span class="hljs-string">`Connot <span class="hljs-subst">$&#123;req.method&#125;</span><span class="hljs-subst">$&#123;req.url&#125;</span>`</span>);<br>    &#125;<br><span class="hljs-keyword">let</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>        _this.<span class="hljs-property">router</span>.<span class="hljs-title function_">handle</span>(req, res, done);<br>    &#125;);<br>    server.<span class="hljs-property">listen</span>.<span class="hljs-title function_">apply</span>(server, <span class="hljs-variable language_">arguments</span>);<br>&#125;;<br><span class="hljs-title class_">Application</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">get</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">path, handler</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">router</span>.<span class="hljs-title function_">get</span>(path, handler);<br>&#125;;<br><span class="hljs-comment">//Router.js</span><br><span class="hljs-keyword">const</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;url&quot;</span>);<br><span class="hljs-title function_">functionRouter</span>() &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span> = [];<br>&#125;<br><span class="hljs-title class_">Router</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">get</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">path, handler</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-title function_">push</span>(&#123;<br>        path,<br><span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span>,<br>        handler,<br>    &#125;);<br>&#125;;<br><span class="hljs-title class_">Router</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">handle</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, out</span>) &#123;<br><span class="hljs-keyword">const</span> &#123; pathname &#125; = url.<span class="hljs-title function_">parse</span>(req.<span class="hljs-property">url</span>);<br><span class="hljs-keyword">const</span> reqMethod = req.<span class="hljs-property">method</span>.<span class="hljs-title function_">toLowerCase</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-property">length</span>; i++) &#123;<br><span class="hljs-keyword">const</span> &#123; path, method, handler &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>[i];<br><span class="hljs-keyword">if</span> (path === pathname &amp;&amp; method === reqMethod) &#123;<br><span class="hljs-title function_">returnhandler</span>(req, res);<br>        &#125;<br>    &#125;<br><span class="hljs-title function_">out</span>(req, res);<br>&#125;;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Router</span>;<br></code></pre></td></tr></table></figure><p>而有时候我们还会这么写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br><span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;wrong&#x27;</span>);<br>&#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">11</span>);<br><span class="hljs-title function_">next</span>();<br>&#125;).<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br><span class="hljs-title function_">next</span>();<br>&#125;).<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;ok&#x27;</span>);<br>&#125;).<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">err,req,res,next</span>)&#123;<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;catch: &#x27;</span>+err);<br>&#125;);<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><p>显然之前的架构处理这样的书写就会很臃肿，因此我们还需要单独再抽象出两个类，<strong>Layer （负责管理路由） 和 Route（负责管理一个路由下的所有函数）类。同时原来的Router类也需要进行改进。</strong></p><h5 id="Router-js"><a href="#Router-js" class="headerlink" title="Router.js"></a>Router.js</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//Router.js</span><br><span class="hljs-comment">// 由于不停地在Router原型上加方法，可以定义一个对象，在这个对象身上加，最后让Router返回的实例原型指向这个对象  Object.setPrototypeOf(router, proto)</span><br>letLayer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./layer&#x27;</span>);<br>letRoute = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./route&#x27;</span>);<br><span class="hljs-title function_">functionRouter</span>()&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span> = [];<br>&#125;<br><span class="hljs-title class_">Router</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">route</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">path</span>)&#123;<br><span class="hljs-comment">// layer 和 route之间的关系</span><br><span class="hljs-keyword">let</span> route = <span class="hljs-title function_">newRoute</span>();<br><span class="hljs-keyword">let</span> layer = <span class="hljs-title function_">newLayer</span>(path,route.<span class="hljs-property">dispatch</span>.<span class="hljs-title function_">bind</span>(route)); <span class="hljs-comment">// 将路径存储到layer中</span><br>    layer.<span class="hljs-property">route</span> = route;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-title function_">push</span>(layer);<br><span class="hljs-keyword">return</span> route;<br>&#125;<br><span class="hljs-comment">// 创建 Route 将handler传入到route中</span><br><span class="hljs-title class_">Router</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">get</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">path,...handlers</span>)&#123;<br><span class="hljs-keyword">let</span> route = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">route</span>(path); <span class="hljs-comment">// 将路径存入layer中</span><br>    route.<span class="hljs-title function_">get</span>(handlers);<span class="hljs-comment">// 将handler存入到route中</span><br>&#125;<br><span class="hljs-comment">// 每当浏览器发送请求 处理请求</span><br><span class="hljs-title class_">Router</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">handle</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, out</span>) &#123;<br><span class="hljs-keyword">let</span> &#123; pathname &#125; = url.<span class="hljs-title function_">parse</span>(req.<span class="hljs-property">url</span>);<br><span class="hljs-keyword">let</span> idx = <span class="hljs-number">0</span>;<br>letnext = <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (idx &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-property">length</span>) <span class="hljs-title function_">returnout</span>(); <span class="hljs-comment">// 匹配不到调用not found</span><br><span class="hljs-keyword">let</span> layer = <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>[idx++];<br><span class="hljs-keyword">if</span> (layer.<span class="hljs-title function_">match</span>(pathname)) &#123;<br><span class="hljs-comment">// 如果路径匹配到了 调用route的dispatch方法</span><br>            layer.<span class="hljs-title function_">handle_request</span>(req, res, next);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">next</span>(); <span class="hljs-comment">// 匹配不到找下一层</span><br>        &#125;<br>    &#125;;<br><span class="hljs-title function_">next</span>();<br>&#125;;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Router</span>;js<br></code></pre></td></tr></table></figure><h5 id="Route-js"><a href="#Route-js" class="headerlink" title="Route.js"></a>Route.js</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//Route.js</span><br>letLayer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./layer&quot;</span>);<br><span class="hljs-title function_">functionRoute</span>() &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span> = [];<br>&#125;<br><span class="hljs-title class_">Route</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">get</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">handlers</span>) &#123;<br>    handlers.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">handler</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">let</span> layer = <span class="hljs-title function_">newLayer</span>(<span class="hljs-string">&quot;/&quot;</span>, handler);<br>        layer.<span class="hljs-property">method</span> = <span class="hljs-string">&quot;get&quot;</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-title function_">push</span>(layer);<br>    &#125;);<br>&#125;;<br><span class="hljs-title class_">Route</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">dispatch</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, out</span>) &#123;<br><span class="hljs-keyword">let</span> idx = <span class="hljs-number">0</span>;<br>letnext = <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (idx &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-property">length</span>) <span class="hljs-title function_">returnout</span>();<br><span class="hljs-keyword">let</span> layer = <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>[idx++];<br><span class="hljs-comment">// 如果方法匹配打牌了</span><br><span class="hljs-keyword">if</span> (layer.<span class="hljs-property">method</span> === req.<span class="hljs-property">method</span>.<span class="hljs-title function_">toLowerCase</span>()) &#123;<br>            layer.<span class="hljs-title function_">handle_request</span>(req, res, next); <span class="hljs-comment">// 内部匹配完了在出来</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">next</span>();<br>        &#125;<br>    &#125;;<br><span class="hljs-title function_">next</span>();<br>&#125;;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Route</span>;<br></code></pre></td></tr></table></figure><h5 id="Layer-js"><a href="#Layer-js" class="headerlink" title="Layer.js"></a>Layer.js</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//Layer.js</span><br><span class="hljs-title function_">functionLayer</span>(path,handler)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">path</span> = path;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">handler</span> = handler;<br>&#125;<br><span class="hljs-comment">// 匹配路由</span><br><span class="hljs-title class_">Layer</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">match</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">pathname</span>)&#123;<br>returnthis.<span class="hljs-property">path</span> == pathname<br>&#125;<br><span class="hljs-title class_">Layer</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">handle_request</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br><span class="hljs-comment">// 调用dispatch方法</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">handler</span>(req,res,next);<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Layer</span>;<br></code></pre></td></tr></table></figure><h4 id="中间件原理"><a href="#中间件原理" class="headerlink" title="中间件原理"></a>中间件原理</h4><p>其实已经在路由中用到过，只不过Express中中间件又分为好几种：</p><ul><li><p><strong>应用级别的中间件 app.use()</strong></p></li><li><p><strong>路由中间件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">  app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/home&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span>);<br><span class="hljs-title function_">next</span>()<br>  &#125;);<br>  app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/home&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>      res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;home&quot;</span>);<br>  &#125;);<br></code></pre></td></tr></table></figure></li><li><p><strong>错误处理中间件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>      res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;这个是404 没有路由匹配到！&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p><strong>内置中间件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/static&#x27;</span>,express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&quot;public&quot;</span>));<br></code></pre></td></tr></table></figure></li><li><p><strong>不过原理都差不多</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// use方法</span><br><span class="hljs-title class_">Application</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">use</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">_router</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">_router</span> = <span class="hljs-title function_">newRouter</span>();<br>      &#125;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">_router</span>.<span class="hljs-title function_">use</span>(...<span class="hljs-variable language_">arguments</span>); <span class="hljs-comment">// 交给路由处理</span><br>  &#125;;<br><span class="hljs-comment">//Router.js</span><br><span class="hljs-title class_">Router</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">use</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">path, handler</span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> handler !== <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>          handler = path;<br>          path = <span class="hljs-string">&quot;/&quot;</span>;<br>      &#125;<br><span class="hljs-keyword">let</span> layer = <span class="hljs-title function_">newLayer</span>(path, handler);<br>      layer.<span class="hljs-property">route</span> = <span class="hljs-literal">undefined</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-title function_">push</span>(layer); <span class="hljs-comment">// 将当前层放到stack中</span><br>  &#125;;<br><span class="hljs-title class_">Router</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">handle</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, out</span>) &#123;<br><span class="hljs-keyword">let</span> &#123; pathname &#125; = url.<span class="hljs-title function_">parse</span>(req.<span class="hljs-property">url</span>);<br><span class="hljs-keyword">let</span> idx = <span class="hljs-number">0</span>;<br>      letnext = <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (idx &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-property">length</span>) <span class="hljs-title function_">returnout</span>(); <span class="hljs-comment">// 匹配不到调用not found</span><br><span class="hljs-keyword">let</span> layer = <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>[idx++];<br><span class="hljs-comment">// 如果匹配到</span><br><span class="hljs-keyword">if</span> (layer.<span class="hljs-title function_">match</span>(pathname)) &#123;<br><span class="hljs-keyword">if</span> (!layer.<span class="hljs-property">route</span>) &#123;<br><span class="hljs-comment">// 中间件</span><br>                  layer.<span class="hljs-title function_">handle_request</span>(req, res, next);<br>              &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 路由</span><br><span class="hljs-keyword">if</span> (layer.<span class="hljs-property">route</span>.<span class="hljs-property">methods</span>[req.<span class="hljs-property">method</span>.<span class="hljs-title function_">toLowerCase</span>()]) &#123;<br>                      layer.<span class="hljs-title function_">handle_request</span>(req, res, next);<br>                  &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">next</span>();<br>                  &#125;<br>              &#125;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">next</span>(); <span class="hljs-comment">// 匹配不到找下一层</span><br>          &#125;<br>      &#125;;<br>  &#125;;<br></code></pre></td></tr></table></figure></li></ul><h4 id="params解析"><a href="#params解析" class="headerlink" title="params解析"></a>params解析</h4><p>当我们编写路由的时候会有如下写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user/:name/:id&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;OK&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>而当我们在浏览器输入路由是这样的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-attr">localhost</span>:<span class="hljs-number">3000</span>/user/hxh/<span class="hljs-number">0522</span><br></code></pre></td></tr></table></figure><p>首先会将app.get定义的路由用正则表达式进行替换，将:xxx部分替换成正则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> path = <span class="hljs-string">&quot;/user/:name/:id&quot;</span>;<br><span class="hljs-keyword">const</span> paramsName = [];<br><span class="hljs-keyword">const</span> regStr = path.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/:(\w+)/g</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">matchChar, group1</span>) &#123;<br>    paramsName.<span class="hljs-title function_">push</span>(group1);<br><span class="hljs-keyword">return</span> (<span class="hljs-string">&#x27;(\\w+)&#x27;</span>)<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(regStr);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(regStr);<span class="hljs-comment">///user/(\w+)/(\w+)</span><br></code></pre></td></tr></table></figure><p>这样就得到了一个匹配url的正则字符串，再用这个字符串生成正则去匹配我们的路由，就能提取出params，最后把提取出来的值跟变量对应起来就好。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> reg = <span class="hljs-title function_">newRegExp</span>(regStr);<br><span class="hljs-keyword">const</span> url = <span class="hljs-string">&quot;localhost:3000/user/hxh/0522&quot;</span>;<br><span class="hljs-keyword">const</span> res = url.<span class="hljs-title function_">match</span>(reg);<br><span class="hljs-keyword">const</span> params = &#123;&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; paramsName.<span class="hljs-property">length</span>; i++) &#123;<br>    params[paramsName[i]] = res[i + <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(params);<br></code></pre></td></tr></table></figure><h3 id="Koa"><a href="#Koa" class="headerlink" title="Koa"></a>Koa</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>** Koa中间件机制就是组合函数（Compose）的概念,** 将⼀组需要<strong>顺序执行</strong>的函数<strong>复合</strong>为⼀个函数，<strong>外层函数的参数</strong>实际是内层函数的 <strong>返回值</strong> 。洋葱圈模型可以形象表示这种机制，这也是Koa的 核心 。</p><p>如下图，假设我们注册中间件的顺序是A,B,C，那么中间件的执行顺序是，ABCBA。</p><p><strong>暂时无法在飞书文档外展示此内容</strong></p><p>那么<strong>外层函数的参数是内层函数的返回值</strong>该怎么理解呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">newKoa</span>();<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br><span class="hljs-title function_">awaitnext</span>();<br><span class="hljs-keyword">const</span> router = &#123;&#125;;<br>    router[<span class="hljs-string">&quot;/html&quot;</span>] = <span class="hljs-function">(<span class="hljs-params">ctx</span>) =&gt;</span> &#123;<br>        ctx.<span class="hljs-property">type</span> = <span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>;<br>        ctx.<span class="hljs-property">body</span> = <span class="hljs-string">`&lt;b&gt;my name is:<span class="hljs-subst">$&#123;ctx.body[<span class="hljs-number">0</span>].name&#125;</span>&lt;/b&gt;`</span>;<br>    &#125;;<br><span class="hljs-keyword">const</span> fun = router[ctx.<span class="hljs-property">url</span>];<br>    fun &amp;&amp; <span class="hljs-title function_">fun</span>(ctx);<br>&#125;);<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br>    ctx.<span class="hljs-property">body</span> = [<br>        &#123;<br><span class="hljs-attr">name</span>: ctx.<span class="hljs-property">url</span>,<br>        &#125;,<br>    ];<br>&#125;);<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;listening&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>上述代码中，在B中间件给ctx的body赋值为一个数组，在A组件中就能通过<strong>ctx参数</strong>拿到这个数组，进行一些操作。</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>其实配合es7的async &#x2F; await 可以很方便的实现Compose。当然，Compose只是Koa重要部分，还有一些细节也一并实现。</p><p>可以看到下面代码引入了三个包 <strong>context，request，response</strong> ，其实就是对http做了一些简单的封装。</p><h5 id="context"><a href="#context" class="headerlink" title="context"></a>context</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><span class="hljs-title function_">geturl</span>(<span class="hljs-params"></span>) &#123;<br>returnthis.<span class="hljs-property">request</span>.<span class="hljs-property">url</span>;<br>    &#125;,<br><span class="hljs-title function_">getmethod</span>(<span class="hljs-params"></span>) &#123;<br>returnthis.<span class="hljs-property">request</span>.<span class="hljs-property">method</span>;<br>    &#125;,<br><span class="hljs-title function_">getbody</span>(<span class="hljs-params"></span>) &#123;<br>returnthis.<span class="hljs-property">response</span>.<span class="hljs-property">body</span>;<br>    &#125;,<br><span class="hljs-title function_">setbody</span>(<span class="hljs-params">val</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">response</span>.<span class="hljs-property">body</span> = val;<br>    &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="request"><a href="#request" class="headerlink" title="request"></a>request</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><span class="hljs-title function_">geturl</span>(<span class="hljs-params"></span>) &#123;<br>returnthis.<span class="hljs-property">req</span>.<span class="hljs-property">url</span>;<br>    &#125;,<br><span class="hljs-title function_">getmethod</span>(<span class="hljs-params"></span>) &#123;<br>returnthis.<span class="hljs-property">req</span>.<span class="hljs-property">method</span>.<span class="hljs-title function_">toLowerCase</span>();<br>    &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="response"><a href="#response" class="headerlink" title="response"></a>response</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><span class="hljs-title function_">getbody</span>(<span class="hljs-params"></span>) &#123;<br>returnthis.<span class="hljs-property">_body</span>;<br>    &#125;,<br><span class="hljs-title function_">setbody</span>(<span class="hljs-params">val</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">_body</span> = val;<br>    &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>Compose的实现其实跟express差不多，只不过用Promise封装了一下，但是因为async，await的存在，让它和express形成了不同的执行顺序。</p><p>除此之外我们定义了一个ctx（Context）对象，对http的req，res进行了简单的封装然后进行传递。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><span class="hljs-keyword">const</span> context = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./context&quot;</span>);<br><span class="hljs-keyword">const</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./request&quot;</span>);<br><span class="hljs-keyword">const</span> response = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./response&quot;</span>);<br>classApplication &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">middlewares</span> = [];<br>    &#125;<br><span class="hljs-title function_">use</span>(<span class="hljs-params">fn</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">middlewares</span>.<span class="hljs-title function_">push</span>(fn);<br>    &#125;<br><span class="hljs-title function_">createContext</span>(<span class="hljs-params">req, res</span>) &#123;<br><span class="hljs-keyword">const</span> ctx = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(context);<br>        ctx.<span class="hljs-property">request</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(request);<br>        ctx.<span class="hljs-property">response</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(response);<br>        ctx.<span class="hljs-property">req</span> = ctx.<span class="hljs-property">request</span>.<span class="hljs-property">req</span> = req;<br>        ctx.<span class="hljs-property">res</span> = ctx.<span class="hljs-property">response</span>.<span class="hljs-property">res</span> = res;<br><span class="hljs-keyword">return</span> ctx;<br>    &#125;<br><span class="hljs-title function_">compose</span>(<span class="hljs-params">middlewares</span>) &#123;<br><span class="hljs-keyword">return</span><span class="hljs-keyword">function</span> (<span class="hljs-params">ctx</span>) &#123;<br><span class="hljs-title function_">returndispatch</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_">functiondispatch</span>(idx) &#123;<br><span class="hljs-keyword">const</span> fn = middlewares[idx];<br><span class="hljs-keyword">if</span> (!fn) &#123;<br>returnPromise.<span class="hljs-title function_">resolve</span>();<br>                &#125;<br>returnPromise.<span class="hljs-title function_">resolve</span>(<br><span class="hljs-title function_">fn</span>(ctx, <span class="hljs-title function_">functionnext</span>() &#123;<br><span class="hljs-title function_">returndispatch</span>(idx + <span class="hljs-number">1</span>);<br>                    &#125;)<br>                );<br>            &#125;<br>        &#125;;<br>    &#125;<br><span class="hljs-title function_">listen</span>(<span class="hljs-params">...args</span>) &#123;<br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br><span class="hljs-keyword">const</span> ctx = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">createContext</span>(req, res);<br><span class="hljs-keyword">const</span> fn = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">compose</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">middlewares</span>);<br><span class="hljs-title function_">awaitfn</span>(ctx);<br>            res.<span class="hljs-title function_">end</span>(ctx.<span class="hljs-property">body</span>);<br>        &#125;);<br>        server.<span class="hljs-title function_">listen</span>(...args);<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Application</span>;<br></code></pre></td></tr></table></figure><h4 id="路由机制-1"><a href="#路由机制-1" class="headerlink" title="路由机制"></a>路由机制</h4><p>Koa单独将路由拆分出来，通过use注册路由中间件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">newRouter</span>();<br><span class="hljs-comment">// 注册路由中间件</span><br>app.<span class="hljs-title function_">use</span>(router.<span class="hljs-title function_">routes</span>());<br></code></pre></td></tr></table></figure><p>Koa的路由相对于Express来说要简单很多，只是实现了基本的功能，因为它不需要支持多个handle的调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">classRouter &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span> = [];<br>    &#125;<br><span class="hljs-title function_">register</span>(<span class="hljs-params">path, method, middleware</span>) &#123;<br><span class="hljs-keyword">let</span> route = &#123; path, method, middleware &#125;;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-title function_">push</span>(route);<br>    &#125;<br><span class="hljs-title function_">get</span>(<span class="hljs-params">path, middleware</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">register</span>(path, <span class="hljs-string">&quot;get&quot;</span>, middleware);<br>    &#125;<br><span class="hljs-title function_">post</span>(<span class="hljs-params">path, middleware</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">register</span>(path, <span class="hljs-string">&quot;post&quot;</span>, middleware);<br>    &#125;<br><span class="hljs-title function_">routes</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">const</span> stack = <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>;<br>returnasync<span class="hljs-keyword">function</span> (<span class="hljs-params">ctx, next</span>) &#123;<br><span class="hljs-keyword">let</span> currUrl = ctx.<span class="hljs-property">url</span>;<br><span class="hljs-keyword">let</span> route;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; stack.<span class="hljs-property">length</span>; i++) &#123;<br><span class="hljs-keyword">const</span> item = stack[i];<br><span class="hljs-keyword">if</span> (item.<span class="hljs-property">path</span> === currUrl &amp;&amp; item.<span class="hljs-property">method</span> === ctx.<span class="hljs-property">method</span>) &#123;<br>                    route = item.<span class="hljs-property">middleware</span>;<br><span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> route === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br><span class="hljs-title function_">route</span>(ctx, next);<br><span class="hljs-keyword">return</span>;<br>            &#125;<br><span class="hljs-title function_">awaitnext</span>();<br>        &#125;;<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Router</span>;<br></code></pre></td></tr></table></figure><h3 id="Egg"><a href="#Egg" class="headerlink" title="Egg"></a>Egg</h3><p>在Koa的基础上，阿里封装了一个企业级的NodeJS框架——egg.js。将Koa的行为进一步分离成controller，service，model三层，并规范了路由的写法——约定式路由。</p><h4 id="约定式路由"><a href="#约定式路由" class="headerlink" title="约定式路由"></a>约定式路由</h4><p>实现约定式路由的核心方法是load函数，通过fs遍历约定文件夹（ <strong>controller，service，model…</strong> ）下的文件，导出文件的内容，生成一个对象挂载到Egg的实例上。</p><h5 id="load"><a href="#load" class="headerlink" title="load"></a>load</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-title function_">functionload</span>(dir, cb) &#123;<br><span class="hljs-comment">// 获取绝对路径</span><br><span class="hljs-keyword">const</span> url = path.<span class="hljs-title function_">resolve</span>(__dirname, dir);<br><span class="hljs-comment">// 读取路径下的文件</span><br><span class="hljs-keyword">const</span> files = fs.<span class="hljs-title function_">readdirSync</span>(url, &#123; <span class="hljs-attr">encoding</span>: <span class="hljs-string">&quot;ascii&quot;</span> &#125;);<br><span class="hljs-comment">// 遍历路由文件 将配置解析到路由器中</span><br>    files.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">filename</span>) =&gt;</span> &#123;<br>        filename = filename.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;.js&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">// 导入文件</span><br><span class="hljs-keyword">const</span> file = <span class="hljs-built_in">require</span>(url + <span class="hljs-string">&quot;/&quot;</span> + filename);<br><span class="hljs-comment">// 处理逻辑</span><br><span class="hljs-title function_">cb</span>(filename, file);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="initRouter"><a href="#initRouter" class="headerlink" title="initRouter"></a>initRouter</h5><p>处理routes下面的文件，约定每一个文件为一个路由，其中的每一个是对应的子路由,这里对路由简单书写，实际可能会更复杂一点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">functioninitRouter</span>(app) &#123;<br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">newRouter</span>();<br><span class="hljs-title function_">load</span>(<span class="hljs-string">&quot;routes&quot;</span>, <span class="hljs-function">(<span class="hljs-params">filename, routes</span>) =&gt;</span> &#123;<br><span class="hljs-comment">// 若是index文件 就不加前缀 如果是其他的文件 路由前缀就是文件名</span><br><span class="hljs-keyword">const</span> prefix = filename === <span class="hljs-string">&quot;index&quot;</span> ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">`/<span class="hljs-subst">$&#123;filename&#125;</span>`</span>;<br>        routes = <span class="hljs-keyword">typeof</span> routes == <span class="hljs-string">&quot;function&quot;</span> ? <span class="hljs-title function_">routes</span>(app) : routes;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(routes).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> [method, path] = key.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot; &quot;</span>);<br>            router[method](prefix + path, <span class="hljs-keyword">async</span> (ctx) =&gt; &#123;<br><span class="hljs-comment">// 传⼊ctx</span><br>                app.<span class="hljs-property">ctx</span> = ctx; <span class="hljs-comment">// 挂载⾄app</span><br><span class="hljs-keyword">await</span> routes[key](app); <span class="hljs-comment">// 路由处理器现在接收到的是app</span><br>            &#125;);<br>        &#125;);<br>    &#125;);<br><span class="hljs-keyword">return</span> router;<br>&#125;<br><span class="hljs-comment">// routes/index.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-function">(<span class="hljs-params">app</span>) =&gt;</span> (&#123;<br><span class="hljs-string">&quot;get /&quot;</span>: app.<span class="hljs-property">$controller</span>.<span class="hljs-property">home</span>.<span class="hljs-property">index</span>,<br><span class="hljs-string">&quot;get /detail&quot;</span>: app.<span class="hljs-property">$controller</span>.<span class="hljs-property">home</span>.<span class="hljs-property">detail</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h4><p><strong>controller，service，model同理。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// controller-loader.js</span><br><span class="hljs-keyword">const</span> &#123; load &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./router-loader&quot;</span>);<br><span class="hljs-title function_">functioninitController</span>(app) &#123;<br><span class="hljs-keyword">const</span> controllers = &#123;&#125;;<br><span class="hljs-title function_">load</span>(<span class="hljs-string">&quot;controller&quot;</span>, <span class="hljs-function">(<span class="hljs-params">filename, controller</span>) =&gt;</span> &#123;<br>        controllers[filename] = <span class="hljs-title function_">controller</span>(app);<br>    &#125;);<br><span class="hljs-keyword">return</span> controllers;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123; initController &#125;;<br><span class="hljs-comment">// controller/home.js</span><br><span class="hljs-comment">// 这里对controller做简单处理，egg中会继承Controller类 然后在类中书写方法，但是作用一致</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-function">(<span class="hljs-params">app</span>) =&gt;</span> (&#123;<br><span class="hljs-attr">index</span>: <span class="hljs-keyword">async</span> (ctx) =&gt; &#123;<br><span class="hljs-keyword">const</span> name = <span class="hljs-keyword">await</span> app.<span class="hljs-property">$service</span>.<span class="hljs-property">user</span>.<span class="hljs-title function_">getName</span>();<br>        app.<span class="hljs-property">ctx</span>.<span class="hljs-property">body</span> = <span class="hljs-string">&quot;ctrl user&quot;</span> + name;<br>    &#125;,<br><span class="hljs-attr">detail</span>: <span class="hljs-function">(<span class="hljs-params">ctx</span>) =&gt;</span> &#123;<br>        app.<span class="hljs-property">ctx</span>.<span class="hljs-property">body</span> = <span class="hljs-string">&quot;Home Detail&quot;</span>;<br>    &#125;,<br>&#125;);<br><span class="hljs-comment">// service-loader.js</span><br><span class="hljs-keyword">const</span> &#123; load &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./router-loader&quot;</span>);<br><span class="hljs-title function_">functioninitService</span>() &#123;<br><span class="hljs-keyword">const</span> services = &#123;&#125;;<br><span class="hljs-title function_">load</span>(<span class="hljs-string">&quot;service&quot;</span>, <span class="hljs-function">(<span class="hljs-params">filename, service</span>) =&gt;</span> &#123;<br>        services[filename] = service;<br>    &#125;);<br><span class="hljs-keyword">return</span> services;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123; initService &#125;;<br></code></pre></td></tr></table></figure><h4 id="Egg类"><a href="#Egg类" class="headerlink" title="Egg类"></a>Egg类</h4><p>本质上是对Koa的扩展，实现MVC结构。</p><ul><li><p><strong>model</strong>层即数据库实体层与数据库中的表一一对应；</p></li><li><p><strong>controller</strong>层负责前后端交互，接受前端请求，调用service层，接收service层返回的数据，最后返回具体的页面和数据到客户端；</p></li><li><p><strong>service</strong>层即业务逻辑层，完成业务的功能设计。<strong>主要是针对具体的问题的操作，把一些数据层的操作进行组合，间接与数据库打交道（提供操作数据库的方法）</strong> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> &#123; initController &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./ctrl-loader&quot;</span>);<br>constKoa = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./lib/application&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; initRouter &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./router-loader&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; initService &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./service-loader&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; loadConfig &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./config-loader&quot;</span>);<br>classEgg &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">conf</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$app</span> = <span class="hljs-title function_">newKoa</span>(conf);<br><span class="hljs-title function_">loadConfig</span>(<span class="hljs-variable language_">this</span>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$controller</span> = <span class="hljs-title function_">initController</span>(<span class="hljs-variable language_">this</span>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$service</span> = <span class="hljs-title function_">initService</span>();<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span> = <span class="hljs-title function_">initRouter</span>(<span class="hljs-variable language_">this</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-property">stack</span>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$app</span>.<span class="hljs-title function_">use</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">routes</span>());<br>    &#125;<br><span class="hljs-title function_">start</span>(<span class="hljs-params">...arg</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$app</span>.<span class="hljs-title function_">listen</span>(...arg);<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Egg</span>;<br></code></pre></td></tr></table></figure></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li><a href="https://juejin.cn/post/6903165908815904775#heading-2">深入理解Nodejs单线程实现高并发原理</a></li><li><a href="https://segmentfault.com/a/1190000041807254?utm_source=sf-similar-article">Nodejs的进程和线程</a></li><li>Next框架</li></ol><h1 id="跨端"><a href="#跨端" class="headerlink" title="跨端"></a>跨端</h1><h2 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h2><h2 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h2><h2 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h2><h2 id="Weex"><a href="#Weex" class="headerlink" title="Weex"></a>Weex</h2><h2 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h2><h1 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h1><h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><h2 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h2><h1 id="浏览器相关"><a href="#浏览器相关" class="headerlink" title="浏览器相关"></a>浏览器相关</h1><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><ol><li><a href="https://juejin.cn/post/6844903989155217421#heading-15">前端网页如何打开一个PC本地应用</a></li><li><a href="https://juejin.cn/post/6950684708443258894">手写echarts图表</a></li></ol><h1 id="CI-x2F-CD相关"><a href="#CI-x2F-CD相关" class="headerlink" title="CI&#x2F;CD相关"></a>CI&#x2F;CD相关</h1><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h2 id="SCM"><a href="#SCM" class="headerlink" title="SCM"></a>SCM</h2>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
      <tag>JS</tag>
      
      <tag>React</tag>
      
      <tag>Vue</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TS基础</title>
    <link href="/jing-jiu/2022/10/10/notebooks/TS%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D/%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80/"/>
    <url>/jing-jiu/2022/10/10/notebooks/TS%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D/%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><ol><li>JS的运行时类型 <strong>Boolean Number String undefind null Bigint Symbol</strong> ts都支持</li><li>复杂类型** Class Array** 元组（ <strong>Tuple</strong> ） 接口（ <strong>Interface</strong> ）枚举（ <strong>Enum</strong> ）</li><li>特殊类型<ol><li>模板字面量定义类型<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">let</span> <span class="hljs-attr">str</span>: <span class="hljs-string">`#<span class="hljs-subst">$&#123;<span class="hljs-built_in">string</span>&#125;</span>`</span> = <span class="hljs-string">&#x27;#str&#x27;</span> <span class="hljs-comment">// 匹配 # 开头的字符串</span><br></code></pre></td></tr></table></figure></li><li><strong>never</strong> 代表不可达，比如函数抛异常的时候，返回值就是 never。</li><li><strong>void</strong> 代表空，可以是 undefined 或 never。</li><li><strong>any</strong> 是任意类型，任何类型都可以赋值给它，它也可以赋值给任何类型（除了 never）。</li><li><strong>unknown</strong> 是未知类型，任何类型都可以赋值给它，但是它不可以赋值给别的类型。</li></ol></li><li>Type 和 interface的区别<ol><li>type可以 <strong>定义基本类型的别名</strong> ，如 type myString &#x3D; string</li><li>interface可以  <strong>声明合并</strong> ，这种情况下，如果是type的话，就会报 <strong>重复定义</strong> 的警告</li></ol></li></ol><ul><li>用interface描述 <strong>数据结构</strong> ，用type描述<strong>类型关系</strong></li><li>类型层级 never - 1 | 2 | “3” - string - String - Object - any &#x2F; unknow</li></ul><h1 id="类型运算"><a href="#类型运算" class="headerlink" title="类型运算"></a>类型运算</h1><ol><li><p>extends</p><ol><li>条件判断 一般用于动态类型的判断<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">type</span> isString&lt;T&gt; = T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">type</span> res_False = isString&lt;<span class="hljs-number">1</span>&gt; <span class="hljs-comment">// false</span><br><span class="hljs-keyword">type</span> res_True = isString&lt;<span class="hljs-string">&#x27;1&#x27;</span>&gt; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li>对类型进行约束（第一个extends）<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ExampleType</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>&gt; = T <span class="hljs-keyword">extends</span> <span class="hljs-string">&quot;5&quot;</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span><br><span class="hljs-keyword">type</span> isFive = <span class="hljs-title class_">ExampleType</span>&lt;<span class="hljs-string">&#x27;4&#x27;</span>&gt; <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p>infer</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">FirstType</span>&lt;<span class="hljs-title class_">Tuple</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">unknown</span>[]&gt; = <span class="hljs-title class_">Tuple</span> <span class="hljs-keyword">extends</span> [infer T, ...infer rest] ? T : <span class="hljs-built_in">never</span>; <span class="hljs-comment">// 提取第一个的类型</span><br><span class="hljs-keyword">type</span> res = <span class="hljs-title class_">FirstType</span>&lt;[<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>, <span class="hljs-built_in">boolean</span>]&gt;; <span class="hljs-comment">// string </span><br></code></pre></td></tr></table></figure></li><li><p>联合 |  交叉 &amp;</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 联合</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">NumberType</span> = <span class="hljs-number">1</span> | <span class="hljs-number">2</span> | <span class="hljs-number">3</span> | <span class="hljs-number">4</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">one</span>:<span class="hljs-title class_">NumberType</span> = <span class="hljs-number">5</span> <span class="hljs-comment">// error: 不能将类型“5”分配给类型“NumberType”。</span><br><br><span class="hljs-comment">// 交叉</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">NumOrStrType</span> = &#123; <span class="hljs-attr">num</span>: <span class="hljs-built_in">number</span> &#125; &amp; &#123; <span class="hljs-attr">str</span>: <span class="hljs-built_in">string</span> &#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">foo</span>: <span class="hljs-title class_">NumOrStrType</span> = &#123;<br>    <span class="hljs-attr">num</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">str</span>: <span class="hljs-string">&#x27;str&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>keyof<br>keyof T 是查询索引类型中所有的索引，叫做 <code>索引查询</code>。</p><p>T[Key] 是取索引类型某个索引的值，叫做 <code>索引访问</code>。</p><p>in 是用于遍历联合类型的运算符。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 修改值</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">MapType</span>&lt;T&gt; = &#123;<br>    [key <span class="hljs-keyword">in</span> keyof T]: [T[key]]<br>&#125;<br><span class="hljs-keyword">type</span> res_Map = <span class="hljs-title class_">MapType</span>&lt;&#123; <span class="hljs-attr">num</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">str</span>: <span class="hljs-built_in">string</span> &#125;&gt;<br><span class="hljs-comment">//type res_Map = &#123;</span><br><span class="hljs-comment">//     num: [number];</span><br><span class="hljs-comment">//     str: [string];</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// 修改索引</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">MapType</span>&lt;T&gt; = &#123;<br>    [key <span class="hljs-keyword">in</span> keyof T <span class="hljs-keyword">as</span> <span class="hljs-string">`my<span class="hljs-subst">$&#123;key &amp; <span class="hljs-built_in">string</span>&#125;</span>`</span>]: [T[key]]<br>&#125;<br><span class="hljs-keyword">type</span> res_Map = <span class="hljs-title class_">MapType</span>&lt;&#123; <span class="hljs-attr">num</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">str</span>: <span class="hljs-built_in">string</span> &#125;&gt;<br><span class="hljs-comment">// type res_Map = &#123;</span><br><span class="hljs-comment">//     mynum: [number];</span><br><span class="hljs-comment">//     mystr: [string];</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// 遍历</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Ref</span>&lt;<span class="hljs-title class_">Props</span>&gt; = keyof <span class="hljs-title class_">Props</span><br><span class="hljs-keyword">type</span> res_Union = <span class="hljs-title class_">Ref</span>&lt;&#123; ref?: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">props</span>: <span class="hljs-built_in">string</span> &#125;&gt; <span class="hljs-comment">// type res_Union = &quot;ref&quot; | &quot;props&quot;</span><br></code></pre></td></tr></table></figure><p><strong>&amp; string操作</strong></p><p>因为索引类型（对象、class 等）可以用 string、number 和 symbol 作为 key，这里 keyof T 取出的索引就是 string | number | symbol 的联合类型，和 string 取交叉部分就只剩下 string 了。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>TypeScript 全面进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打包工具</title>
    <link href="/jing-jiu/2022/10/05/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    <url>/jing-jiu/2022/10/05/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="Rollup"><a href="#Rollup" class="headerlink" title="Rollup"></a>Rollup</h1><ul><li>利用 ES6 模块设计，利用 tree-shaking生成更简洁、更简单的代码</li><li>一般而言，对于应用使用 Webpack，对于类库使用 Rollup</li><li>需要代码拆分(Code Splitting)，或者很多静态资源需要处理，再或者构建的项目需要引入很多 CommonJS 模块的依赖时，使用 webpack</li><li>代码库是基于 ES6 模块，而且希望代码能够被其他人直接使用，使用 Rollup</li><li>打包出的文件仍具有可读性</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>输出结果更加扁平，执行效率更高</li><li>自动移除未引用的代码</li><li>打包结果依然完全可读</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>加载非ESM的第三方模块比较复杂</li><li>模块最终都会被打包到一个函数中，无法实现HMR</li><li>浏览器环境中，代码拆分功能依赖AMD库</li><li>需要代码拆分，或者很多静态资源需要处理，再或者构建的项目需要引入很多 CommonJS 模块的依赖时，使用 webpack</li></ul><h1 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h1><ul><li>基于 nodejs 的 <code>steam</code> 流打包</li><li>定位是基于任务流的自动化构建工具</li><li>Gulp是通过task对整个开发过程进行构建</li></ul><h2 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a><strong>优点</strong></h2><ul><li>流式的写法简单直观</li><li>API简单,代码量少</li><li>易于学习和使用</li><li>适合多页面应用开发</li></ul><h2 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h2><ul><li>异常处理比较麻烦</li><li>工作流程顺序难以精细控制</li><li>不太适合单页或者自定义模块的开发</li></ul><h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><ul><li>一切皆模块，它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源</li><li>它定位是模块打包器，而 Gulp&#x2F;Grunt 属于构建工具。Webpack 可以代替 Gulp&#x2F;Grunt 的一些功能，但不是一个职能的工具，可以配合使用</li></ul><h4 id="1-3-1-优点"><a href="#1-3-1-优点" class="headerlink" title="1.3.1 优点"></a><strong>1.3.1 优点</strong></h4><ul><li>可以模块化的打包任何资源</li><li>适配任何模块系统</li><li>适合SPA单页应用的开发</li></ul><h4 id="1-3-2-缺点"><a href="#1-3-2-缺点" class="headerlink" title="1.3.2 缺点"></a><strong>1.3.2 缺点</strong></h4><ul><li>通过babel编译后的js代码打包后体积过大</li></ul><p><strong>Webpack</strong> <strong>大而全，</strong> <strong>Rollup小而美</strong></p><h1 id="Parcel"><a href="#Parcel" class="headerlink" title="Parcel"></a>Parcel</h1><ul><li>Parcel 是快速、零配置的 Web 应用程序打包器</li><li>目前 Parcel 只能用来构建用于运行在浏览器中的网页，这也是他的出发点和专注点</li></ul><h4 id="1-5-1-优点"><a href="#1-5-1-优点" class="headerlink" title="1.5.1 优点"></a><strong>1.5.1 优点</strong></h4><ul><li>Parcel 内置了常见场景的构建方案及其依赖，无需再安装各种依赖</li><li>Parcel 能以 HTML 为入口，自动检测和打包依赖资源</li><li>Parcel 默认支持模块热替换，真正的开箱即用</li></ul><h4 id="1-5-2-缺点"><a href="#1-5-2-缺点" class="headerlink" title="1.5.2 缺点"></a><strong>1.5.2 缺点</strong></h4><ul><li>不支持 SourceMap</li><li>不支持 TreeShaking</li><li>配置不灵活</li></ul><p><strong>对于相同体量的项目进行打包，Parcel会比Webpack快很多，因为在Parcel内部使用的是多进程同时去工作，充分发挥了多核CPU的性能，而Webpack中可以使用happypack插件实现这一点。</strong></p><h1 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h1><ul><li><a href="https://cn.vitejs.dev/">Vite (法语意为 &amp;#34;快速的&amp;#34;，发音 &#x2F;vit&#x2F;) </a>是下一代前端开发与构建工具</li><li>💡 极速的服务启动 使用原生 ESM 文件，无需打包</li><li>⚡️ 轻量快速的热重载 无论应用程序大小如何，都始终极快的模块热重载（HMR）</li><li>🛠️ 丰富的功能 对 TypeScript、JSX、CSS 等支持开箱即用。</li><li>📦 优化的构建 可选 “多页应用” 或 “库” 模式的预配置 Rollup 构建</li><li>🔩 通用的插件 在开发和构建之间共享 Rollup-superset 插件接口。</li><li>🔑 完全类型化的API 灵活的 API 和完整 TypeS</li></ul><h2 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h2><p>1.使用 <code>esbuild</code>构建依赖比webpack快得多</p><p>2.使用ESM在开发环境 <code>使用源码</code>而不进行打包，省略打包步骤</p><p>3.使用HTTP头，源码模块使用 <code>304 Not Modified</code> 进行协商缓存，依赖模块使用 <code>Cache-Control: max-age=31536000,immutable</code> 进行强缓存</p><h2 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h2><ul><li>生态</li><li>应用于生产需要考量</li><li>打包用的Rollup，因为esbuild对css等代码的分割能力不好</li></ul>]]></content>
    
    
    <categories>
      
      <category>工程化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工程化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Webpack工作流程</title>
    <link href="/jing-jiu/2022/09/21/%E5%B7%A5%E7%A8%8B%E5%8C%96/Webpack%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
    <url>/jing-jiu/2022/09/21/%E5%B7%A5%E7%A8%8B%E5%8C%96/Webpack%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h1><p>在VSCode中调用webpack进行构建，熟悉webpack的整体构建流程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;webpack&quot;</span>);<br><span class="hljs-keyword">const</span> config = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./webpack.config.js&quot;</span>); <span class="hljs-comment">//1.读取配置文件</span><br><span class="hljs-keyword">debugger</span>;<br><span class="hljs-keyword">const</span> compiler = <span class="hljs-title function_">webpack</span>(config);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">compilerCallback</span>(<span class="hljs-params">err, stats</span>) &#123;<br>    <span class="hljs-keyword">const</span> statsString = stats.<span class="hljs-title function_">toString</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(statsString);<br>&#125;<br><span class="hljs-keyword">debugger</span>;<br>compiler.<span class="hljs-title function_">run</span>(<span class="hljs-function">(<span class="hljs-params">err, stats</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">compilerCallback</span>(err, stats);<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><ul><li>初始化参数：从配置文件和Shell语句中读取与合并参数，得出最终的参数；</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">在命令行执行webpack的时候可以外加一些参数，webpack执行前会将这些参数与config文件中的参数进行merge。<br></code></pre></td></tr></table></figure><ul><li>开始编译：用上一步得到的参数初始化Compiler对象，加载所有配置的插件，执行对象的run方法开始执行编译； 确定入口：根据配置中的entry找出所有的入口文件</li></ul><p><strong>可以看到这里生成了一个Compiler对象，之后判断如果存在plugins对象，就会遍历加载所有的插件，插件会传入compiler实例，在实例上有插件需要的钩子</strong></p><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=OWQwYmZhYWQxOWFlOTliZDZiYjRkZDI0MDc1MTFiZTZfR3NkVTMyTkxmbU02OWNDVnE5djYzM2M1VXhwSWNZaFRfVG9rZW46Ym94Y25BZzR3UUd4blFsdW1vR2ZVbFBUS2pZXzE2NzMwNjkzMTM6MTY3MzA3MjkxM19WNA"></p><p>这里是compiler抛出去的钩子</p><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=MzUzMWJjYjM3MDhkYTJkN2VlNjE2ODkyN2Y0ZTExMzFfaTZWMVBBelBHZjhkeklHWnFoc2V3R2RGZ3NpNUFPQ09fVG9rZW46Ym94Y25Zbk9SU203R3diQlZXaTFndGtCNUJpXzE2NzMwNjkzMTM6MTY3MzA3MjkxM19WNA"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;webpack&quot;</span>);<br><span class="hljs-keyword">const</span> config = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./webpack.config.js&quot;</span>); <span class="hljs-comment">//1.读取配置文件</span><br><span class="hljs-keyword">const</span> compiler = <span class="hljs-title function_">webpack</span>(config);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">compilerCallback</span>(<span class="hljs-params">err, stats</span>) &#123;<br>    <span class="hljs-keyword">const</span> statsString = stats.<span class="hljs-title function_">toString</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(statsString);<br>&#125;<br>compiler.<span class="hljs-title function_">run</span>(<span class="hljs-function">(<span class="hljs-params">err, stats</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">compilerCallback</span>(err, stats);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>编译模块：从入口文件出发，调用所有配置的Loader对模块进行编译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；</li></ul><p>经过一顿操作，会在这里加载loader构建内容，这里将文件转为ast，遍历ast触发各种loader</p><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=NjFlODQ5ODc2Y2MxYTY3NDc0OTBkMjJmNDFiMTMxOWFfUE9IeGY5RGt3aUNzZnBQbnAzY1ZmYWZpQUlvTlF2SmxfVG9rZW46Ym94Y25mRFZDWDlpMjVjald3bDVnazY3aXRnXzE2NzMwNjkzMTM6MTY3MzA3MjkxM19WNA"></p><ul><li>完成模块编译：在经过第 4 步使用Loader翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系 输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个Chunk转换成一个单独的文件加入到输出列表。</li><li>输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</li></ul><blockquote><p>在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>工程化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工程化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vite工作流程</title>
    <link href="/jing-jiu/2022/09/19/%E5%B7%A5%E7%A8%8B%E5%8C%96/Vite%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
    <url>/jing-jiu/2022/09/19/%E5%B7%A5%E7%A8%8B%E5%8C%96/Vite%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ol><li>Vite通过服务端将首页（index.html）返回，首页中加载<strong>main.js</strong></li></ol><p><strong>HTTP缓存：</strong> 充分利用 <code>http</code>缓存做优化，依赖（不会变动的代码）部分用max-age&#x3D;0,immutable <strong>强缓存</strong> ，源码部分用304 <strong>协商缓存</strong> ，提升页面打开速度</p><blockquote><p>max-age&#x3D;0 表示使用强缓存，但是使用前会给服务器发请求确认文件是否改变。</p></blockquote><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=YWVhZGFlMTkzNDhmMTNmOGY2ZDk4Mjg5MTBmMDA3YzZfZnNpOHE3NGRpYTI5bHNHbWpKR2x5MVFLT3Y0Y1lLblJfVG9rZW46Ym94Y25LRmJlcGNZWktHZVZNVldjYzV1ck5lXzE2NzMwNjkyNzI6MTY3MzA3Mjg3Ml9WNA"></p><ol><li><strong>main.js</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span><br><br><span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p>有几处需要作出说明：</p><ol><li>es6Module不支持直接导入第三方模块，路径必须是 .&#x2F; 或者 &#x2F; 才会发起请求。</li><li>对比源码中的main.js可以看到，将vue的引入做了处理， <strong>import { createApp } from ‘vue’</strong> 变成了 ** ‘&#x2F;@modules&#x2F;vue.js’** ，表示是第三方依赖，会去node_modules下面找。</li><li>当扫描到<strong>import语句</strong>时，会向服务器发送请求，返回需要的文件，这也是为什么vite启动速度比webpack快很多的原因， <strong>因为webpack在一开始就会对所有文件进行打包编译，而vite则不会打包，使用源文件，通过请求的方式按需动态加载</strong> 。</li><li>对.vue服务器会内部进行处理，分成多import（也就是多个请求），将template，css转成对象最终导出。</li></ol><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZmM2ZWE4NGIxNWYzYmQzODE1NmNhYmYzNmFiYmI5NGFfZ0NUTG5DQ2tGNkJNSkRDdDcwRkxlRzZ3RWZXOWc4VzNfVG9rZW46Ym94Y242YzRDN0FWTmNqaG1yWDR6RWk3THVlXzE2NzMwNjkyNzI6MTY3MzA3Mjg3Ml9WNA"></p><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=MmRmZjc2NDE2ZDM2YjdlYTIxOWVkZDFmMzFhMWQzZTNfSjEwSFpPczN6bVpQTW1BTzczSllzMDN3Z0ZhRFExVzBfVG9rZW46Ym94Y240cFkzcEk3cjZmcng3enl0V0JLd1FoXzE2NzMwNjkyNzI6MTY3MzA3Mjg3Ml9WNA"></p><ol><li>HMR同webpack类似，也是用的websocket当文件1内容修改进行局部更新。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h1><ul><li>在 <code>koa</code> 中间件里获取请求 body</li><li>通过 <a href="https://www.npmjs.com/package/es-module-lexer">es-module-lexer</a> 解析资源 <code>ast</code> 拿到 import 的内容</li><li>判断 import 的资源是否是 <code>npm</code> 模块</li><li>返回处理后的资源路径：<code>&quot;vue&quot; =&gt; &quot;/@modules/vue&quot;</code></li></ul><p>将处理的template,script,style等所需的依赖以 <code>http</code>请求的形式，通过query参数形式区分并加载 <code>SFC</code>文件各个模块内容。</p>]]></content>
    
    
    <categories>
      
      <category>工程化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工程化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置React工程化环境</title>
    <link href="/jing-jiu/2022/09/15/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E9%85%8D%E7%BD%AEReact%E5%B7%A5%E7%A8%8B%E5%8C%96%E7%8E%AF%E5%A2%83/"/>
    <url>/jing-jiu/2022/09/15/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E9%85%8D%E7%BD%AEReact%E5%B7%A5%E7%A8%8B%E5%8C%96%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<blockquote><p>通过手动配置React开发环境了解常用webpack的loader &amp; plugin。</p></blockquote><h1 id="处理常见资源"><a href="#处理常见资源" class="headerlink" title="处理常见资源"></a>处理常见资源</h1><blockquote><p>众所周知，webpack只能识别js，其他文件如果直接引入是无法识别的，那么就需要借助loader &amp; plugin的能力帮助webpack处理这些文件。</p></blockquote><ol><li>图片资源<ol><li>File-loader<br>在JS代码中import&#x2F;require文件时，会将该文件生成到输出目录,默认文件名是哈希值，可以自定义文件名。</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(png|jpg|gif)$/</span>,<br>    <span class="hljs-attr">use</span>: &#123;<br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;file-loader&#x27;</span>,<br>        <span class="hljs-attr">options</span>: &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;[name].[ext]&#x27;</span>,<br>            <span class="hljs-attr">outputPath</span>: <span class="hljs-string">&#x27;images&#x27;</span>,<br>        &#125;<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><ol><li>Url-loader<br>功能与File-loader类似，但是在设定limit字段后，当引入的文件小于指定大小会将文件转为Base64格式。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(png|jpg|gif)$/i</span>,<br>    <span class="hljs-attr">use</span>: [&#123;<br>      <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>      <span class="hljs-attr">options</span>: &#123;<br>        <span class="hljs-attr">limit</span>: <span class="hljs-number">8192</span>,<br>      &#125;,<br>    &#125;]<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>svg-inline-loader<br>会将 SVG 文件内联为模块。</li><li>css文件<ol><li>Css-loader<br>解析@import&#x2F;url()引入的文件。</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>    <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>&#125;,<br></code></pre></td></tr></table></figure><ol><li>style-loader<br>配合css-loader使用，将css插入到dom中。</li><li>html文件<ol><li>HtmlWebpackPlugin<br>当使用webpack打包时，创建 &#x2F; 引用一个html 文件，并把webpack 打包后的静态文件自动插入到这个html 文件当中。</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;/public/index.html&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><ol><li>jsx or tsx<ol><li>Babel-loader + @babel&#x2F;preset-react &#x2F; @babel&#x2F;preset-typescript<br>将jsx &#x2F; tsx文件使用babel-loader，React 预设规则集 @babel&#x2F;preset-react ，完成 JSX 到 JS 的转换。</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.tsx$/</span>,<br>    <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>    <span class="hljs-attr">options</span>: &#123;<br>        <span class="hljs-attr">presets</span>: [[<span class="hljs-string">&#x27;@babel/preset-react&#x27;</span>, &#123;<br>            <span class="hljs-string">&#x27;runtime&#x27;</span>: <span class="hljs-string">&#x27;automatic&#x27;</span><br>        &#125;], <span class="hljs-string">&quot;@babel/preset-typescript&quot;</span>]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>vue</li><li>vue-loader vue单文件的解析</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">VueLoaderPlugin</span> &#125; = <span class="hljs-title function_">require</span>(<span class="hljs-params"><span class="hljs-string">&#x27;vue-loader&#x27;</span></span>)<br>&#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.vue$/</span>,<br>    <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;vue-loader&#x27;</span>]<br>&#125;<br><span class="hljs-attr">plugins</span>: [ <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueLoaderPlugin</span>() ]<br></code></pre></td></tr></table></figure><h1 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h1><p>安装 <strong>webpack-dev-server，</strong> 如下配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h1><ul><li>Eslint<br>js语法检测</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// .eslintrc.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">extends</span>: [<br>        <span class="hljs-comment">// 启用Eslint推荐规则</span><br>        <span class="hljs-string">&#x27;eslint:recommended&#x27;</span>,<br>        <span class="hljs-comment">// 启用React推荐规则</span><br>        <span class="hljs-string">&#x27;plugin:react/recommended&#x27;</span>,<br>    ],<br>    <span class="hljs-attr">overrides</span>: [<br>        &#123;<br>            <span class="hljs-comment">// 对ts tsx调用如下配置进行处理 关闭一些处理规则</span><br>            <span class="hljs-attr">files</span>: [<span class="hljs-string">&#x27;*.ts&#x27;</span>, <span class="hljs-string">&#x27;*.tsx&#x27;</span>],<br>            <span class="hljs-attr">extends</span>: [<br>                <span class="hljs-string">&#x27;plugin:@typescript-eslint/eslint-recommended&#x27;</span>,<br>                <span class="hljs-string">&#x27;plugin:@typescript-eslint/recommended&#x27;</span><br>            ],<br>            <span class="hljs-attr">parser</span>: <span class="hljs-string">&#x27;@typescript-eslint/parser&#x27;</span>,<br>            <span class="hljs-attr">plugins</span>: [<br>                <span class="hljs-string">&#x27;@typescript-eslint/eslint-plugin&#x27;</span>,<br>            ],<br>            <span class="hljs-attr">rules</span>: &#123;<br>                <span class="hljs-string">&#x27;@typescript-eslint/ban-ts-ignore&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>                <span class="hljs-string">&#x27;@typescript-eslint/no-explicit-any&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>                <span class="hljs-string">&#x27;@typescript-eslint/no-use-before-define&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span><br>            &#125;,<br>        &#125;<br>    ],<br>    <span class="hljs-comment">// 自动设置检查的React版本是安装的React的版本</span><br>    <span class="hljs-attr">settings</span>: &#123;<br>        <span class="hljs-attr">react</span>: &#123;<br>            <span class="hljs-attr">version</span>: <span class="hljs-string">&#x27;detect&#x27;</span>,<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">rules</span>: &#123;<br>        <span class="hljs-string">&#x27;react/jsx-no-undef&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span><br>    &#125;,<br>    <span class="hljs-comment">// 表示支持browser、es2020、node、commonjs中预定义的全局变量</span><br>    <span class="hljs-attr">env</span>: &#123;<br>        <span class="hljs-attr">browser</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">es2020</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">node</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">commonjs</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    <span class="hljs-comment">//配置之前的步骤中设置的全局变量，比如React</span><br>    <span class="hljs-attr">globals</span>: &#123;<br>        <span class="hljs-title class_">React</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-title class_">ReduxConnect</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-title class_">Axios</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-title class_">UseEffect</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    <span class="hljs-attr">ignorePatterns</span>: [<span class="hljs-string">&#x27;dist/&#x27;</span>],<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>stylelint<br>样式文件语法检测。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">extends</span>: [<span class="hljs-string">&#x27;stylelint-config-standard&#x27;</span>],<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-string">&quot;stylelint-order&quot;</span>],<br>  <span class="hljs-attr">rules</span>:&#123;<br>    <span class="hljs-string">&#x27;no-descending-specificity&#x27;</span>:<span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&#x27;function-url-quotes&#x27;</span>: <span class="hljs-string">&#x27;always&#x27;</span>,<br>    <span class="hljs-string">&#x27;string-quotes&#x27;</span>: <span class="hljs-string">&#x27;double&#x27;</span>, <br>    <span class="hljs-string">&#x27;indentation&#x27;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-string">&#x27;unit-case&#x27;</span>:<span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&#x27;color-hex-case&#x27;</span>: <span class="hljs-string">&#x27;upper&#x27;</span>,<br>    <span class="hljs-string">&#x27;color-hex-length&#x27;</span>: <span class="hljs-string">&#x27;long&#x27;</span>,<br>    <span class="hljs-string">&#x27;rule-empty-line-before&#x27;</span>: <span class="hljs-string">&#x27;never&#x27;</span>,<br>    <span class="hljs-string">&#x27;font-family-no-missing-generic-family-keyword&#x27;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&#x27;block-opening-brace-space-before&#x27;</span>:<span class="hljs-string">&#x27;always&#x27;</span>,<br>    <span class="hljs-string">&#x27;property-no-unknown&#x27;</span>:<span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&#x27;no-empty-source&#x27;</span>:<span class="hljs-literal">null</span>,<br>   <br>    <span class="hljs-string">&quot;order/properties-order&quot;</span>: [<br><br>      <span class="hljs-comment">//css内容&#x27;content&#x27;,</span><br>      <span class="hljs-string">&#x27;counter-increment&#x27;</span>,<br>      <span class="hljs-string">&#x27;counter-reset&#x27;</span>,<br>      <span class="hljs-string">&#x27;quotes&#x27;</span>,<br>      <span class="hljs-string">&#x27;crop&#x27;</span>,<br>      <span class="hljs-string">&#x27;move-to&#x27;</span>,<br>      <span class="hljs-string">&#x27;page-policy&#x27;</span>,<br>      ...<br>    ]<br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="git提交"><a href="#git提交" class="headerlink" title="git提交"></a>git提交</h1><ul><li>配置commitlint</li></ul><p>帮我们检查 git commit 所提交信息是否符合<strong>conventional commit format</strong>的工具</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">extends</span>: [<span class="hljs-string">&#x27;@commitlint/config-angular&#x27;</span>],<br>    <span class="hljs-attr">rules</span>: &#123;<br>        <span class="hljs-string">&#x27;type-enum&#x27;</span>: [<br>            <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&#x27;always&#x27;</span>,<br>            [<br>                <span class="hljs-string">&#x27;WIP&#x27;</span>,      <span class="hljs-comment">// 开发中</span><br>                <span class="hljs-string">&#x27;feat&#x27;</span>,     <span class="hljs-comment">// 新特性</span><br>                <span class="hljs-string">&#x27;improvement&#x27;</span>, <span class="hljs-comment">// 加强现有特性</span><br>                <span class="hljs-string">&#x27;fix&#x27;</span>,      <span class="hljs-comment">// 修补bug</span><br>                <span class="hljs-string">&#x27;refactor&#x27;</span>, <span class="hljs-comment">// 重构</span><br>                <span class="hljs-string">&#x27;docs&#x27;</span>,     <span class="hljs-comment">// 文档</span><br>                <span class="hljs-string">&#x27;test&#x27;</span>,     <span class="hljs-comment">// 单元测试</span><br>                <span class="hljs-string">&#x27;config&#x27;</span>,   <span class="hljs-comment">// 配置文件</span><br>                <span class="hljs-string">&#x27;style&#x27;</span>,    <span class="hljs-comment">// 格式需改</span><br>                <span class="hljs-string">&#x27;perf&#x27;</span>,     <span class="hljs-comment">// 性能提升</span><br>                <span class="hljs-string">&#x27;ci&#x27;</span>,       <span class="hljs-comment">// ci</span><br>                <span class="hljs-string">&#x27;revert&#x27;</span>,   <span class="hljs-comment">// 版本回退</span><br>                <span class="hljs-string">&#x27;chore&#x27;</span>,    <span class="hljs-comment">// 其他修改</span><br>            ],<br>        ],<br>        <span class="hljs-string">&#x27;type-empty&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;never&#x27;</span>],               <span class="hljs-comment">// type不能为空</span><br>        <span class="hljs-string">&#x27;type-case&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;always&#x27;</span>, <span class="hljs-string">&#x27;lower-case&#x27;</span>], <span class="hljs-comment">// type不限制大小写</span><br>        <span class="hljs-string">&#x27;subject-empty&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;never&#x27;</span>],            <span class="hljs-comment">// subject（简短得描述）不能为空</span><br>        <span class="hljs-string">&#x27;subject-max-length&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;always&#x27;</span>, <span class="hljs-number">50</span>],  <span class="hljs-comment">// subject最大长度，超出只会警告，不阻止提交</span><br>        <span class="hljs-string">&#x27;body-leading-blank&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;always&#x27;</span>],<br>                <span class="hljs-string">&#x27;footer-leading-blank&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;always&#x27;</span>],<br>                <span class="hljs-string">&#x27;header-max-length&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;always&#x27;</span>, <span class="hljs-number">72</span>],<br>      &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>安装husky</li></ul><p>帮我们每次 git 提交时自动执行检查</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// packge.json</span><br><span class="hljs-string">&quot;husky&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;hooks&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;commit-msg&quot;</span>: <span class="hljs-string">&quot;commitlint -E HUSKY_GIT_PARAMS&quot;</span><br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><h1 id="Create-react-app"><a href="#Create-react-app" class="headerlink" title="Create-react-app"></a>Create-react-app</h1><blockquote><p>有关create-react-app中用到的插件和loader</p></blockquote><h2 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h2><ul><li>html-webpack-plugin</li></ul><blockquote><p>当使用webpack打包时，创建 &#x2F; 引用一个html 文件，并把webpack 打包后的静态文件自动插入到这个html 文件当中</p></blockquote><ul><li>case-sensitive-paths-webpack-plugin</li></ul><blockquote><p>如果路径有误则直接报错</p></blockquote><ul><li>terser-webpack-plugin</li></ul><blockquote><p>使用terser压缩JS代码</p></blockquote><ul><li>mini-css-extract-plugin</li></ul><blockquote><p>将CSS提取为独立的文件的插件，对每个包含css的js文件都会创建一个CSS文件，支持按需加载css和sourceMap</p></blockquote><ul><li>css-minimizer-webpack-plugin</li></ul><blockquote><p>使用 cssnano 优化和压缩 CSS</p></blockquote><ul><li>webpack-manifest-plugin</li></ul><blockquote><p>生产资产的显示清单文件</p></blockquote><ul><li>workbox-webpack-plugin</li></ul><blockquote><p>自动生成 Service Worker 和 静态资源列表 用于PWA</p></blockquote><ul><li>eslint-webpack-plugin</li></ul><h2 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h2><ul><li>Css-loader</li></ul><blockquote><p>处理css文件</p></blockquote><ul><li>Style-loader</li></ul><blockquote><p>将css插入dom</p></blockquote><ul><li>Postcss-loader</li></ul><blockquote><p>使用PostCSS处理CSS 可以补全兼容性前缀</p></blockquote><ul><li>resolve-url-loader</li></ul><blockquote><p>可基于原始源文件解析 url （）语句中的相对路径</p></blockquote><ul><li>source-map-loader</li></ul><blockquote><p>将源代码与打包过的代码建立映射关系</p></blockquote><ul><li>@svgr&#x2F;webpack</li></ul><blockquote><p>支持svg作为组件引入</p></blockquote><ul><li>file-loader</li></ul><blockquote><p>在JS代码中import&#x2F;require文件时，会将该文件生成到输出目录,默认文件名是哈希值，可以自定义文件名</p></blockquote><ul><li>babel-loader</li></ul><blockquote><p>es6 -&gt; es5</p></blockquote><ul><li>sass-loader</li></ul><blockquote><p>处理sass 、scss</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>工程化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工程化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Plugin入门</title>
    <link href="/jing-jiu/2022/09/09/%E5%B7%A5%E7%A8%8B%E5%8C%96/Plugin%E5%85%A5%E9%97%A8/"/>
    <url>/jing-jiu/2022/09/09/%E5%B7%A5%E7%A8%8B%E5%8C%96/Plugin%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="webpack生命周期Hooks"><a href="#webpack生命周期Hooks" class="headerlink" title="webpack生命周期Hooks"></a>webpack生命周期Hooks</h1><table><thead><tr><th><strong>阶段</strong></th><th><strong>关键钩子</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>创建编译器:createCompiler()</td><td>environment</td><td>读取环境</td></tr><tr><td>创建编译器:createCompiler()</td><td>afterEnvironment</td><td>读取环境后触发</td></tr><tr><td>创建编译器:createCompiler()</td><td>initialize</td><td>初始化</td></tr><tr><td>编译器运行:compiler.run()</td><td>beforeRun</td><td>运行前的准备活动，主要启动了文件读取功能</td></tr><tr><td>编译器运行:compiler.run()</td><td>run</td><td>“机器”已经跑起来了，在编译之前有缓存，则启用缓存，这样可以提高效率。</td></tr><tr><td>编译器编译：compiler.compile(onCompiled)</td><td>beforeCompile</td><td>beforeCompile开始编译前的准备，创建的ModuleFactory，创建Compilation，并绑定ModuleFactory到Compilation上。同时处理一些不需要编译的模块，比如ExternalModule（远程模块）和DllModule（第三方模块）</td></tr><tr><td>编译器编译：compiler.compile(onCompiled)</td><td>compile</td><td>进行编译&#96;&#96;</td></tr><tr><td>编译器编译：compiler.compile(onCompiled)</td><td>make</td><td>编译的核心流程</td></tr><tr><td>编译器编译：compiler.compile(onCompiled)</td><td>afterCompile</td><td>编译结束</td></tr><tr><td>编译结束后进行输出(onCompiled())</td><td>shouldEmit</td><td>获取compilation发来的电报，确定编译是否成功，是否可以开始输出了。</td></tr><tr><td>编译结束后进行输出(onCompiled())</td><td>emit</td><td>输出文件</td></tr><tr><td>编译结束后进行输出(onCompiled())</td><td>afterEmit</td><td>输出完毕</td></tr><tr><td>编译结束后进行输出(onCompiled())</td><td>done</td><td>所有流程结束</td></tr></tbody></table><h1 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h1><blockquote><p>每个plugin是一个类或者函数，引入插件时会new一个该插件的实例，在合适的时机调用其apply方法并传入compiler实例。因此每个插件都需要在原型上编写一个apply方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 插件初始化</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(plugins)) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> plugin <span class="hljs-keyword">of</span> plugins) &#123;<br>        plugin.<span class="hljs-title function_">apply</span>(childCompiler);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因此我们最少只需要在插件类中编写apply方法就可以在webpack构建过程中做一下事情。如下代码：其中<strong>afterEmit是</strong>编译完成并将文件输出到目录下之后的钩子，<strong>done</strong>是所有流程都走完之后的的钩子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPlugin</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> = options || &#123;&#125;;<br>    &#125;<br>    <span class="hljs-title function_">apply</span>(<span class="hljs-params">compiler</span>) &#123;<br>        compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">afterEmit</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;MyPlugin&quot;</span>, <span class="hljs-function">(<span class="hljs-params">compilation</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">let</span> assets = compilation.<span class="hljs-property">assets</span>;<br>            <span class="hljs-keyword">let</span> res = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(assets);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>        &#125;);<br>        compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">done</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;MyPlugin&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;编译完成&quot;</span>);<br>        &#125;);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">MyPlugin</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工程化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工程化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础</title>
    <link href="/jing-jiu/2022/09/05/Java/Java%E5%9F%BA%E7%A1%80/"/>
    <url>/jing-jiu/2022/09/05/Java/Java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="Java变量"><a href="#Java变量" class="headerlink" title="Java变量"></a>Java变量</h2><ul><li><p>实例变量<br>当你实例化出一个对象，类就会帮这个对象添加一些属性 这些属性就来自实例变量 如果你需要传入一些参数那么你需要写<strong>类构造方法。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> String age;<br>    <span class="hljs-comment">//类构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name, String age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printInfo</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.name);<br>        System.out.println(<span class="hljs-built_in">this</span>.age);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;big yellow&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>);<br>        dog1.printInfo();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>类变量<br>即就是这个类的静态属性 你不需要实例化一个对象就可以访问到它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">staticName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Dog_Static&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">FINAL_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Dog_FINAL&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(Dog.FINAL_NAME);<br>        System.out.println(Dog.staticName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>局部变量</p><p>这个没什么好说的，就是正常声明的变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br>        System.out.println(age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>参数</p><p>就是函数调用时需要传递的变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br>        System.out.println(age);<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">printer</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br><span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="Java数据类型"><a href="#Java数据类型" class="headerlink" title="Java数据类型"></a>Java数据类型</h2><ol><li><p>基本数据类型<br>数字型：short int long（整型） float double（浮点型）<br>字符型：byte char<br>布尔型：boolean</p></li><li><p>引用数据类型<br>class（类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br>        System.out.println(age);<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">printer</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br><span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>interface（接口）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">staticName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Dog_Static&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Dog_FINAL&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printInfo</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">staticName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Dog_Static&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">FINAL_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Dog_FINAL&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printInfo</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.name);<br>        System.out.println(<span class="hljs-built_in">this</span>.age);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(Dog.FINAL_NAME);<br>        System.out.println(Dog.staticName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Array（数组）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] myList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">4</span>];<br><span class="hljs-type">int</span>[] myList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-comment">//for each写法</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 初始化字符串数组 words</span><br>        <span class="hljs-type">int</span>[] list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> &#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : list) &#123;<br>            System.out.println(i);<br>        &#125;<br>&#125;<br><span class="hljs-comment">//多维数组</span><br><span class="hljs-comment">// 创建一个3行2列的二维数组</span><br><span class="hljs-type">int</span>[][] intArray = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><p>String（字符串）<br><strong>字符串存在不可变性 也就是说如果我们修改一个String类型的值 原先的字符串不会被销毁 而是会在内存创建一个新的字符串，然后这个String类型的指针指向新的字符串 之后JVM根据引用计数操作回收计数为0的变量内存</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hxh&quot;</span>;<br></code></pre></td></tr></table></figure></li></ol><h1 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ol><li>外部函数无法访问内部变量（对内部变量进行保护 不直接暴露出去）设置private关键字</li><li>自己手动创建get &amp; set 方法 get用于读取变量的值 set用于写入变量的值 可以在set函数中添加限制保证数据正确合理写入</li><li>可以对方法进行重载</li></ol><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ol><li>方法重写 需要满足如下规则</li></ol><ul><li>重写方法的参数列表应该与原方法完全相同；</li><li>返回值类型应该和原方法的返回值类型一样或者是它在父类定义时的子类型；</li><li>重写方法访问级别限制不能比原方法高。例如：如果父类方法声明为公有的，那么子类中的重写方法不能是私有的或是保护的。具体限制级别参考访问修饰符；</li><li>只有被子类继承时，方法才能被重写；</li><li>方法定义为 <code>final</code>，将不能被重写；</li><li>一个方法被定义为 static，将使其不能被重写，但是可以重新声明；</li><li>一个方法不能被继承，那么也不能被重写；</li><li>和父类在一个包中的子类能够重写任何没有被声明为 private 和 final 的父类方法；</li><li>和父类不在同一个包中的子类只能重写 non-final 方法或被声明为 public 或 protected 的方法；</li><li>一个重写方法能够抛出任何运行时异常，不管被重写方法是否抛出异常。然而重写方法不应该抛出比被重写方法声明的更新更广泛的已检查异常。重写方法能够抛出比被重写方法更窄或更少的异常；</li><li>构造方法不能重写。</li></ul><ol start="2"><li>访问修饰符</li></ol><ul><li><strong>private</strong> ：私有的，只允许在本类中访问；</li><li><strong>protected</strong> ：受保护的，允许在同一个类、同一个包以及不同包的子类中访问；</li><li><strong>默认的</strong> ：允许在同一个类，同一个包中访问；</li><li><strong>public</strong> ：公共的，可以再任何地方访问。</li></ul><ol start="3"><li>通过super调用父类的方法 属性 构造方法</li></ol><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态意味着允许不同类的对象对同一消息做出不同的响应。java中实现多态的三个条件分别是</p><ol><li>满足继承关系</li><li>要有重写</li><li>父类引用指向子类对象（向上转型） 子类引用指向父类对象（向下转型）</li></ol><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>可以使用 <code>abstract</code> 关键字声明抽象类或抽象方法。</p><p>抽象类不能被实例化，抽象类中的方法必须被非抽象子类实现，它必须被继承才能被使用。</p><p>抽象类中不一定包含抽象方法，但抽象方法一定在抽象类中。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>一个与抽象类相似的概念，但是两者设计理念不同。与抽象类的区别：</p><ol><li>接口中除了 static 、final 变量，不能有其他变量，而抽象类可以；</li><li>一个类可以实现多个接口，但只能实现一个抽象类。接口自己本身可以通过 extends 关键字扩展多个接口；</li><li>接口方法默认修饰符是 public ，抽象方法可以有 public 、protected 和 default 这些修饰符（抽象方法就是为了被重写所以不能使用 private 关键字修饰！）；</li><li>从设计层面来说，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为的规范。</li></ol><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li>封装  内部类的成员通过外部类才能访问，对成员信息有更好的隐藏，因此内部类实现了更好的封装</li><li>多继承 可以用多个内部类继承其他类的方法</li><li>可以解决继承或实现接口的方法重名问题</li></ol><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol><li><p>成员内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 声明以及调用方式</span><br><span class="hljs-comment">// 通过 new 外部类().new 内部类()的形式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Any</span> &#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">OwnClass</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SayOwn</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;sayOwn&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">OwnClass</span> <span class="hljs-variable">any</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Any</span>().<span class="hljs-keyword">new</span> <span class="hljs-title class_">OwnClass</span>();<br>        any.SayOwn();<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 在外部类中声明一个创建内部类的方法 这种方式比较优雅</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Any</span> &#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">OwnClass</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SayOwn</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;sayOwn&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> OwnClass <span class="hljs-title function_">createOwn</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OwnClass</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Any</span> <span class="hljs-variable">any</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Any</span>();<br>        <span class="hljs-type">OwnClass</span> <span class="hljs-variable">own</span> <span class="hljs-operator">=</span> any.createOwn();<br>        own.SayOwn();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>静态内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 可以不依赖外部类直接创建内部类的实例</span><br><span class="hljs-comment">// 只能获取到static的外部类属性 方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Any</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Any&quot;</span>;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticClass</span> &#123;<br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayStatic</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;Static&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">StaticClass</span> <span class="hljs-variable">staticClass</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StaticClass</span>();<br>        staticClass.sayStatic();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>方法内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在外部类的方法中声明一个内部类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Any</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Any&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fn</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticClass</span> &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayFn</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;FN&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">StaticClass</span> <span class="hljs-variable">staticClass</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StaticClass</span>();<br>        staticClass.sayFn();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Any</span>().fn();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>匿名内部类</p><ul><li>匿名内部类没有类型名称和实例对象名称；</li><li>匿名内部类可以继承父类也可以实现接口，但二者不可兼得；</li><li>匿名内部类无法使用访问修饰符、<code>static</code>、<code>abstract</code> 关键字修饰；</li><li>匿名内部类无法编写构造方法，因为它没有类名；</li><li>匿名内部类中不能出现静态成员。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 没有名字的内部类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Any</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;runing&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Any</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Any</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;car run&quot;</span>);<br>            &#125;<br>        &#125;;<br>        car.run();<br><br>        <span class="hljs-type">Any</span> <span class="hljs-variable">airPlain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Any</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;airPlain fly&quot;</span>);<br>            &#125;<br>        &#125;;<br>        airPlain.run();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="Java包"><a href="#Java包" class="headerlink" title="Java包"></a>Java包</h2><p>java提供包的机制主要是为了避免类命名冲突的问题，你可以理解为一个文件夹就代表一个包。一个包内的类可以相互访问到。</p><h1 id="Java进阶"><a href="#Java进阶" class="headerlink" title="Java进阶"></a>Java进阶</h1><h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 部分方法和js类似 这里只讲一些和js有区别的</span><br><span class="hljs-comment">// 在比较两个字符串的时候不能直接使用&quot;==&quot;进行比较 如下例子</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Any</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;java&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;java&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;java&quot;</span>);<br>        System.out.println(str1 == str2);<span class="hljs-comment">// true</span><br>        System.out.println(str1 == str3);<span class="hljs-comment">// false</span><br>        System.out.println(str1.equals(str3));<span class="hljs-comment">//true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用String直接声明一个字符串的时候会在常量池保存字符串，将指针保存在栈中，使用 &#x3D;&#x3D; 比较的是指针指向的地址而不是具体的值，因此str1 &#x3D;&#x3D; str2，但是使用new方法构造出的字符串会在堆空间中创建一个String类型的对象，然后str3保存指向这个对象的指针，因此str1 !&#x3D; str3 <strong>所以使用 &#x3D;&#x3D; 比较不可靠</strong><br><img src="http://img.mukewang.com/wiki/5ea6a7a209c7c55c20171125.jpg" alt="img"></p><h2 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h2><p>由于Java中字符串的不可变性，String声明的变量每一次修改都会在常量池中新增数据，如果频繁修改字符串的话，会产生很多无用数据，引起频繁的垃圾回收。而StringBuilder类产生的字符串产生大量无用的数据<strong>。而在进行字符串拼接的时候，编译器为了进行优化也会默认将String的拼接过程转成StringBuilder类调用append方法来进行。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Any</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>        System.out.println(name.capacity());<br>        name.append(<span class="hljs-string">&quot;_&quot;</span>).append(<span class="hljs-string">&quot;world&quot;</span>);<br>        System.out.println(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h2><p>接收输入的内容以及一些细节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Any</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 初始化腰围</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">waistline</span> <span class="hljs-operator">=</span> <span class="hljs-number">0f</span>;<br>        <span class="hljs-comment">// 初始化体重</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">weight</span> <span class="hljs-operator">=</span> <span class="hljs-number">0f</span>;<br>        <span class="hljs-comment">// 声明浮点型参数a，b，bodyFatWeight（脂肪重量）</span><br>        <span class="hljs-type">float</span> a, b, bodyFatWeight;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入您的腰围（cm）：&quot;</span>);<br>        <span class="hljs-keyword">if</span> (scanner.hasNextFloat()) &#123;<br>            waistline = scanner.nextFloat();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;请输入您的体重（kg）：&quot;</span>);<br>        <span class="hljs-keyword">if</span> (scanner.hasNextFloat()) &#123;<br>            weight = scanner.nextFloat();<br>        &#125;<br>        <span class="hljs-comment">// 计算参数a 公式：参数a = 腰围（cm）× 0.74</span><br>        a = waistline * <span class="hljs-number">0.74f</span>;<br>        <span class="hljs-comment">// 计算参数b 公式：参数b = 体重（kg）× 0.082 + 44.74</span><br>        b = weight * <span class="hljs-number">0.082f</span> + <span class="hljs-number">44.74f</span>;<br>        <span class="hljs-comment">// 计算脂肪重量</span><br>        bodyFatWeight = a - b;<br>        <span class="hljs-comment">// 计算体脂率 =（脂肪重量 ÷ 体重）×100%。</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> bodyFatWeight / weight * <span class="hljs-number">100</span>;<br>        System.out.println(<span class="hljs-string">&quot;您的体脂率为&quot;</span> + result + <span class="hljs-string">&quot;%&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chrome扩展</title>
    <link href="/jing-jiu/2022/09/05/%E5%85%B6%E4%BB%96/Chrome%E6%89%A9%E5%B1%95/"/>
    <url>/jing-jiu/2022/09/05/%E5%85%B6%E4%BB%96/Chrome%E6%89%A9%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<p><video src="https://internal-api-drive-stream.feishu.cn/space/api/box/stream/download/video/boxcn8cWrmlwiCYlXsYp1NXyPre/?quality=1080p&data_version=7153858754994307100&mount_point=docx_file" position= "absolute" width="100%" height="100%" controls="controls"></video></p><blockquote><p>前言：<a href="https://www.logosc.cn/make">这个网站</a>可以生成比较好看的logo，但是logo加了水印还收费（太穷了qaq），所以记了个todo，开发了个chrome扩展让他能自动提取svg保存到本地。</p></blockquote><p>贴一下Chrome官方文档<a href="https://developer.chrome.com/docs/extensions/mv3/getstarted/%EF%BC%8C%E8%BF%99%E9%87%8C%E4%B8%BA%E4%BA%86%E7%AE%80%E5%8D%95%E7%94%A8%E7%9A%84v2%EF%BC%8C%E4%BD%86%E6%98%AFv2%E5%9C%A823%E5%B9%B4%E4%BC%9A%E4%B8%8B%E6%8E%89%EF%BC%8C%E5%BB%BA%E8%AE%AE%E7%94%A8v3%E3%80%82">https://developer.chrome.com/docs/extensions/mv3/getstarted/，这里为了简单用的v2，但是v2在23年会下掉，建议用v3。</a></p><h1 id="了解主要文件"><a href="#了解主要文件" class="headerlink" title="了解主要文件"></a>了解主要文件</h1><h2 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a>manifest.json</h2><p>这里指定扩展的基本信息，包括名称，描述，图标，允许访问的域名，扩展的UI界面，以及动态注入的脚本。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;manifest_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;TanTan&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Hello, Help you Download svg.&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;icons&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;16&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;img/icon16.png&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;48&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;img/icon48.png&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;128&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;img/icon128.png&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;browser_action&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;default_icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;img/icon128.png&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;default_popup&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;popup.html&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;permissions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;&lt;all_urls&gt;&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;content_scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;matches&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;&lt;all_urls&gt;&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;js&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;content.js&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;run_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;document_start&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="popup-html"><a href="#popup-html" class="headerlink" title="popup.html"></a>popup.html</h2><p>在<strong>manifest.json</strong>中引入 <strong>popup.html</strong> ，这里确定了下图这块区域，但由于浏览器的<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP">内容安全策略 ( CSP )</a>，不允许使用内联脚本，因此js的操作要放在单独的文件中。也就是下面的popup.js。</p><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=MWJmMTRiMDI4YTFiMDI2NTA0MDA4OTU3MjRjZGUxMDFfNzBVRlcyTUhoSUVoUlZPOXpwSzZncnE1R2NWeXBncFlfVG9rZW46Ym94Y25mTXRlOFB4a2E1UHNZUUVIWDFuVkI4XzE2NzMwNjk1NTU6MTY3MzA3MzE1NV9WNA"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Covid-19 Stats- UK<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">450px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">            <span class="hljs-attribute">flex-flow</span>: column;</span><br><span class="language-css">            <span class="hljs-attribute">align-items</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.imgs</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>: auto;</span><br><span class="language-css">            <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">rgb</span>(<span class="hljs-number">179</span>, <span class="hljs-number">179</span>, <span class="hljs-number">179</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.button</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: fixed;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container mt-3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-outline-primary button&quot;</span>&gt;</span>TanTan<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;imgs&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;popup.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="popup-js"><a href="#popup-js" class="headerlink" title="popup.js"></a>popup.js</h2><p>这里会选中当前的页面，然后给你注入的脚本（content.js）发送数据并接受数据执行callback。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">chrome.<span class="hljs-property">tabs</span>.<span class="hljs-title function_">query</span>(&#123; <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">currentWindow</span>: <span class="hljs-literal">true</span> &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">tabs</span>) &#123;<br>    chrome.<span class="hljs-property">tabs</span>.<span class="hljs-title function_">sendMessage</span>(tabs[<span class="hljs-number">0</span>].<span class="hljs-property">id</span>, index, <span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>        <span class="hljs-keyword">if</span> (callback) <span class="hljs-title function_">callback</span>(response);<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>整体代码：接受content.js返回给的svg使用canvas做中转，将svg+xml在canvas上绘制，调用canvas方法转成base64的png格式，添加click函数用于保存svg &#x2F; png。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">drawInlineSVG</span>(<span class="hljs-params">svgStr</span>) &#123;<br>    <span class="hljs-keyword">const</span> svg = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>    svg.<span class="hljs-property">innerHTML</span> = svgStr<br>    <span class="hljs-keyword">var</span> svgData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLSerializer</span>().<span class="hljs-title function_">serializeToString</span>(svg.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>    <span class="hljs-keyword">var</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br>    <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;img&quot;</span>);<br>    img.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;data:image/svg+xml;base64,&quot;</span> + <span class="hljs-title function_">btoa</span>(<span class="hljs-built_in">unescape</span>(<span class="hljs-built_in">encodeURIComponent</span>(svgData))));<br>    img.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        canvas.<span class="hljs-property">width</span> = img.<span class="hljs-property">width</span><br>        canvas.<span class="hljs-property">height</span> = img.<span class="hljs-property">height</span><br>        ctx.<span class="hljs-title function_">drawImage</span>(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">const</span> dataURL = canvas.<span class="hljs-title function_">toDataURL</span>(<span class="hljs-string">&quot;image/png&quot;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dataURL);<br>    &#125;;<br>    <span class="hljs-keyword">return</span> img;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">filename, text</span>) &#123;<br>    <span class="hljs-keyword">var</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    element.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;href&#x27;</span>, <span class="hljs-string">&#x27;data:text/plain;charset=utf-8,&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(text));<br>    element.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;download&#x27;</span>, filename);<br><br>    element.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(element);<br><br>    element.<span class="hljs-title function_">click</span>();<br><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(element);<br>&#125;<br><span class="hljs-comment">// 前端demo代码</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">drawInlineSVG</span>(<span class="hljs-params">svgStr</span>) &#123;<br>    <span class="hljs-keyword">const</span> svg = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>    svg.<span class="hljs-property">innerHTML</span> = svgStr<br>    <span class="hljs-keyword">var</span> svgData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLSerializer</span>().<span class="hljs-title function_">serializeToString</span>(svg.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>    <span class="hljs-keyword">var</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br>    <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;img&quot;</span>);<br>    img.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;data:image/svg+xml;base64,&quot;</span> + <span class="hljs-title function_">btoa</span>(<span class="hljs-built_in">unescape</span>(<span class="hljs-built_in">encodeURIComponent</span>(svgData))));<br>    img.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        canvas.<span class="hljs-property">width</span> = img.<span class="hljs-property">width</span><br>        canvas.<span class="hljs-property">height</span> = img.<span class="hljs-property">height</span><br>        ctx.<span class="hljs-title function_">drawImage</span>(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">const</span> dataURL = canvas.<span class="hljs-title function_">toDataURL</span>(<span class="hljs-string">&quot;image/png&quot;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dataURL);<br>    &#125;;<br>    <span class="hljs-keyword">return</span> img;<br>&#125;<br><span class="hljs-keyword">let</span> sum = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sendMessageToContentScript</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">callback</span> = (<span class="hljs-params">response</span>) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> img = <span class="hljs-title function_">drawInlineSVG</span>(response)<br>        <span class="hljs-keyword">const</span> li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>)<br>        li.<span class="hljs-title function_">appendChild</span>(img)<br>        li.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>            <span class="hljs-title function_">download</span>(<span class="hljs-string">&#x27;download.svg&#x27;</span>, response)<br>        &#125;)<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;imgs&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">appendChild</span>(li)<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt;= sum; index += <span class="hljs-number">2</span>) &#123;<br>        chrome.<span class="hljs-property">tabs</span>.<span class="hljs-title function_">query</span>(&#123; <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">currentWindow</span>: <span class="hljs-literal">true</span> &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">tabs</span>) &#123;<br>            chrome.<span class="hljs-property">tabs</span>.<span class="hljs-title function_">sendMessage</span>(tabs[<span class="hljs-number">0</span>].<span class="hljs-property">id</span>, index, <span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>                <span class="hljs-keyword">if</span> (callback) <span class="hljs-title function_">callback</span>(response);<br>            &#125;);<br>        &#125;);<br>    &#125;<br>    sum += <span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;button&#x27;</span>)[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">const</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;imgs&#x27;</span>)[<span class="hljs-number">0</span>]<br>    btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, sendMessageToContentScript)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="content-js"><a href="#content-js" class="headerlink" title="content.js"></a>content.js</h2><p>因为他可以被注入到页面中，所以content.js可以获取到当前页面的dom，因此通过选择器选中svg传给popup.js。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">chrome.<span class="hljs-property">runtime</span>.<span class="hljs-property">onMessage</span>.<span class="hljs-title function_">addListener</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">request, sender, sendResponse</span>) &#123;<br>    <span class="hljs-keyword">const</span> svgs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.svg-card &gt; svg&#x27;</span>)<br>    <span class="hljs-title function_">sendResponse</span>(svgs[request].<span class="hljs-property">outerHTML</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
      <category>Chrome扩展</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Chrome扩展</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React Hooks使用姿势</title>
    <link href="/jing-jiu/2022/09/05/Framework/React/Hooks/"/>
    <url>/jing-jiu/2022/09/05/Framework/React/Hooks/</url>
    
    <content type="html"><![CDATA[<h1 id="遵循设计模式（SOLID）"><a href="#遵循设计模式（SOLID）" class="headerlink" title="遵循设计模式（SOLID）"></a>遵循设计模式（SOLID）</h1><h2 id="单一功能（SRP）"><a href="#单一功能（SRP）" class="headerlink" title="单一功能（SRP）"></a>单一功能（SRP）</h2><ol><li><strong>每个类应该只有一个职责</strong></li><li>如下一个展示活跃用户列表的组件，他分别做了获取数据，筛选数据，渲染数据这些功能。显然不符合单一功能的原则（虽然这看上去没有多少行代码），可以尝试对其进行拆分。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">ActiveUsersList</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> [users, setUsers] = <span class="hljs-title function_">useState</span>([])<br><br>    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-title function_">loadUser</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>            <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/some-api&#x27;</span>)<br>            <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>()<br>            <span class="hljs-title function_">setUsers</span>([...data])<br>        &#125;<br>        <span class="hljs-title function_">loadUser</span>()<br>    &#125;, [])<br><br>    <span class="hljs-keyword">const</span> weekAgo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    weekAgo.<span class="hljs-title function_">setDate</span>(weekAgo.<span class="hljs-title function_">getDate</span>() - <span class="hljs-number">7</span>);<br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">            &#123;users.filter(user =&gt; !user.isBanned &amp;&amp; user.lastActivityAt &gt;= weekAgo).map(user =&gt;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;user.id&#125;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;user.avatarUrl&#125;</span> /&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;user.fullName&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>&#123;user.role&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            )&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>首先，可以将useState和useEffect抽离封装成一个独立的Hooks,useUsers只需要关心从api获取到数据。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">useUsers</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> [users, setUsers] = <span class="hljs-title function_">useState</span>([])<br><br>    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-title function_">loadUser</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>            <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/some-api&#x27;</span>)<br>            <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>()<br>            <span class="hljs-title function_">setUsers</span>([...data])<br>        &#125;<br>        <span class="hljs-title function_">loadUser</span>()<br>    &#125;, [])<br><br>    <span class="hljs-keyword">return</span> &#123; users &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>其次，对ui层渲染，筛选数据进行抽离。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">UserItem</span> = (<span class="hljs-params">&#123; user &#125;</span>) =&gt; &#123;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;user.id&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;user.avatarUrl&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;user.fullName&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>&#123;user.role&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getActiveUser</span> = (<span class="hljs-params">users</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> weekAgo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br>    weekAgo.<span class="hljs-title function_">setDate</span>(weekAgo.<span class="hljs-title function_">getDate</span>() - <span class="hljs-number">7</span>)<br><br>    <span class="hljs-keyword">return</span> users.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">user</span> =&gt;</span> !user.<span class="hljs-property">isBanned</span> &amp;&amp; user.<span class="hljs-property">lastActivityAt</span> &gt;= weekAgo)<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>还可以将上面拆解的三个hook再封装成一个独立的hook，在ActiveUserList中直接调用。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">useActiveUsers</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; users &#125; = <span class="hljs-title function_">useUsers</span>()<br><br>  <span class="hljs-keyword">const</span> activeUsers = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">getOnlyActive</span>(users)<br>  &#125;, [users])<br><br>  <span class="hljs-keyword">return</span> &#123; activeUsers &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>最后在<strong>ActiveUsersList</strong>只需要调用hooks进行渲染就好了<strong>。</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">ActiveUsersList</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; activeUsers &#125; = <span class="hljs-title function_">useActiveUsers</span>()<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">            &#123;activeUsers.map(user =&gt;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">UserItem</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;user.id&#125;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&#123;user&#125;</span> /&gt;</span></span><br><span class="language-xml">            )&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="开放封闭（OCP）"><a href="#开放封闭（OCP）" class="headerlink" title="开放封闭（OCP）"></a>开放封闭（OCP）</h2><p><strong>一个软件实体（类、模块、函数）应该对扩展开放，对修改关闭</strong> (以一种允许在不更改源代码的情况下扩展组件的方式来构造组件)</p><p>例如组件库中的表单组件，在<strong>FromItem</strong>中嵌套<strong>Input，Audio</strong>等组件，它不关心内部是什么组件，将责任委托给children。</p><p>ps：<strong>FormItem</strong> 会给自己的直接子节点（必须是唯一子节点）传递 <strong>onChange</strong> 和 <strong>value</strong> 属性，自定义控件只有在调用这个<strong>onChange</strong> 之后，自己的值才能被 <strong>FormItem</strong> 收集到 。<strong>onChange</strong>事件的注入是调用了 <strong>cloneElement()</strong> 方法在原先子组件的基础上注入<strong>onChange</strong>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;<span class="hljs-title class_">Form</span> onSubmit=&#123;<span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v); &#125;&#125;&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FormItem</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&#x27;Username&#x27;</span> <span class="hljs-attr">field</span>=<span class="hljs-string">&#x27;name&#x27;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Input</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">FormItem</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FormItem</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&#x27;Age&#x27;</span> <span class="hljs-attr">field</span>=<span class="hljs-string">&#x27;age&#x27;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">InputNumber</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&#x27;please enter your age&#x27;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">FormItem</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FormItem</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;primary&#x27;</span> <span class="hljs-attr">htmlType</span>=<span class="hljs-string">&#x27;submit&#x27;</span>&gt;</span></span><br><span class="language-xml">            Submit</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">FormItem</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Form</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="里氏替换（LSP）"><a href="#里氏替换（LSP）" class="headerlink" title="里氏替换（LSP）"></a>里氏替换（LSP）</h2><p><strong>所有引用基类的地方必须能透明地使用其子类的对象</strong></p><p>但是react团队不推荐使用继承，因此不做过多实践。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Plaintext">引用 https://zh-hans.reactjs.org/docs/composition-vs-inheritance.html#so-what-about-inheritance<br>在 Facebook，我们在成百上千个组件中使用 React。我们并没有发现需要使用继承来构建组件层次的情况。<br>Props 和组合为你提供了清晰而安全地定制组件外观和行为的灵活方式。注意：组件可以接受任意 props，包括基本数据类型，React 元素以及函数。<br>如果你想要在组件间复用非 UI 的功能，我们建议将其提取为一个单独的 JavaScript 模块，如函数、对象或者类。组件可以直接引入（import）而无需通过 extend 继承它们。<br></code></pre></td></tr></table></figure><h2 id="接口隔离（ISP）"><a href="#接口隔离（ISP）" class="headerlink" title="接口隔离（ISP）"></a>接口隔离（ISP）</h2><p>*<em>客户端</em>***不应该依赖它不需要的接口 **不传递子组件不需要的属性</p><h2 id="依赖倒置（DIP）"><a href="#依赖倒置（DIP）" class="headerlink" title="依赖倒置（DIP）"></a>依赖倒置（DIP）</h2><p><strong>要依赖于抽象，不要依赖于具体</strong></p><p>如下实现一个登陆的表单，它需要依赖另一个文件的api 方法。这样使用当修改api文件的某些参数或其他会影响api函数调用的东西，就需要修改LoginForm的调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> api <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;~/common/api&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">LoginForm</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [email, setEmail] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>  <span class="hljs-keyword">const</span> [password, setPassword] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleSubmit</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">evt</span>) =&gt; &#123;<br>    evt.<span class="hljs-title function_">preventDefault</span>()<br>    <span class="hljs-keyword">await</span> api.<span class="hljs-title function_">login</span>(email, password)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;email&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setEmail(e.target.value)&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;password&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setPassword(e.target.value)&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Log in<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><p>可以将api的调用作为一个props传给LoginForm组件，而调用的逻辑写在父组件（一般组件库的Form表单都是这样，把onSubmit交给用户）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// LoginForm</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">LoginForm</span> = (<span class="hljs-params">&#123; onSubmit &#125;: Props</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [email, setEmail] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>  <span class="hljs-keyword">const</span> [password, setPassword] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleSubmit</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">evt</span>) =&gt; &#123;<br>    evt.<span class="hljs-title function_">preventDefault</span>()<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">onSubmit</span>(email, password)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;email&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setEmail(e.target.value)&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;password&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setPassword(e.target.value)&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Log in<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>  )<br>&#125;<br><span class="hljs-comment">// ConnectedLoginForm</span><br><span class="hljs-keyword">import</span> api <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;~/common/api&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">ConnectedLoginForm</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleSubmit</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">email, password</span>) =&gt; &#123;<br>    <span class="hljs-keyword">await</span> api.<span class="hljs-title function_">login</span>(email, password)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">LoginForm</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span> /&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上述思想可以让我们书写的React &#x2F; Vue代码更为健壮，但是也不能固执的遵循这些设计原则，有些时候可能不需要很细粒度的解耦 &#x2F; 拆分。</p><h1 id="常见Hooks使用"><a href="#常见Hooks使用" class="headerlink" title="常见Hooks使用"></a>常见Hooks使用</h1><h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h2><ol><li>假设我们需要一个定时器在页面上每300ms自增，执行如下代码你会发现count一直是1。</li><li>首先我们需要知道useEffect第二个参数的含义： <strong>数组内的依赖发生改变的时候才会重新渲染</strong> 。有点类似于Vue3中的watchEffect，但是它需要我们手动增加依赖而不能像watchEffect自动收集。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;running&quot;</span>);<br>    <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>)<br>  &#125;, <span class="hljs-number">300</span>)<br>&#125;, [])<br></code></pre></td></tr></table></figure><ol><li>因此其实use Effect只执行了一次，定时器中的count也固定成为0，相当于一直执行 <strong>setCount</strong> (0 + 1)，因此页面上永远是1。（ <strong>而且他没有清除定时器</strong> ）</li><li>一个不优雅的方式是将count作为依赖传给useEffect的数组，因为count改变所以useEffect会一直执行，但是他需要不断创建和清除定时器。（在useEffect传入的函数 进行return会在函数组件销毁前执行 类似于 <strong>componentWillUnmount</strong> ）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> id = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>)<br>  &#125;, <span class="hljs-number">300</span>)<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-built_in">clearInterval</span>(id)&#125;<br>&#125;, [count])<br></code></pre></td></tr></table></figure><ol><li>或者可以使用setState的函数形式。因为对于这个逻辑来说，我们只需要让React知道数据改变就可以了。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> id = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">setCount</span>(<span class="hljs-function"><span class="hljs-params">count</span> =&gt;</span> count + <span class="hljs-number">1</span>)<br>  &#125;, <span class="hljs-number">300</span>)<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-built_in">clearInterval</span>(id) &#125;<br>&#125;, [])<br></code></pre></td></tr></table></figure><h2 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h2><ol><li>把内联回调函数及依赖项数组作为参数传入 <strong>useCallback</strong> ，它将返回该回调函数的<strong>memoized</strong>版本，该回调函数仅在某个依赖项改变时才会更新。</li><li>但是注意，如果组件或者hook其实不关心你传入的函数是否改变，那么useCallback的引入只是徒增成本（因为你需要额外新增一个数组，每次新创建一个函数，原来的函数还不会被GC）这样反而降低了性能。</li><li>那么什么时候需要使用useCallback呢？</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleCount</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleCount&#125;</span>&gt;</span> Click me<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Other</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleCount&#125;</span> /&gt;</span>   </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title class_">Buttprops</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Button 组件渲染了&#x27;</span>);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;props.onClick&#125;</span>&gt;</span>&#123;props.children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-comment">// 假如 Other 中有很重的逻辑</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Other</span>(<span class="hljs-params">&#123; onClick &#125;</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Other组件渲染了&quot;</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick&#125;</span>&gt;</span>其他组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>如果不加优化，那么此时点击任意一个button都会触发两个组件的渲染（ <strong>挖坑 为什么react父组件更新 子组件也会随之更新</strong> ），这显然是我们不希望看到的，这种情况下就可以使用React.memo包裹子组件，当子组件的props改变才更新。</li><li>但仅仅为两个子组件加上React.memo还是不够的，由于state更新父组件会重新渲染，相应的<strong>handleCount</strong>也会重新创建，因此每次传入的<strong>handleCount</strong>都是新的，这样的话React.memo就无法达到优化的目的。</li><li>因此还需要借助 <strong>useCallback，</strong> 将父组件的 <strong>handleCount进行改造。</strong> 全部代码如下：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useCallback, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; createRoot &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom/client&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> handleCount = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">setCount</span>(<span class="hljs-function"><span class="hljs-params">count</span> =&gt;</span> count + <span class="hljs-number">1</span>), []);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleCount&#125;</span>&gt;</span> Click me<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Other</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleCount&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Button</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">memo</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Button 组件渲染了&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;props.onClick&#125;</span>&gt;</span>&#123;props.children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>;<br>&#125;);<br><br><span class="hljs-comment">// 假如 Other 中有很重的逻辑</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Other</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">memo</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">Other</span>(<span class="hljs-params">&#123; onClick &#125;</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Other 组件渲染了&quot;</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick&#125;</span>&gt;</span>其他组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-keyword">const</span> rootElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>);<br><span class="hljs-keyword">const</span> root = <span class="hljs-title function_">createRoot</span>(rootElement);<br><br>root.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> /&gt;</span></span>);<br></code></pre></td></tr></table></figure><h2 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h2><p><strong>与useCallback类似，useMemo更多的用来缓存数据。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> baz = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [])<br></code></pre></td></tr></table></figure><h2 id="useLayoutEffect"><a href="#useLayoutEffect" class="headerlink" title="useLayoutEffect"></a>useLayoutEffect</h2><p>WIP。。。</p>]]></content>
    
    
    <categories>
      
      <category>Framework</category>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>Hooks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Express源码</title>
    <link href="/jing-jiu/2022/08/10/Node/Express/"/>
    <url>/jing-jiu/2022/08/10/Node/Express/</url>
    
    <content type="html"><![CDATA[<h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><h2 id="路由机制"><a href="#路由机制" class="headerlink" title="路由机制"></a>路由机制</h2><p>一个简单的express使用例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/home&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;home&quot;</span>);<br>&#125;);<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/users&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;users&quot;</span>);<br>&#125;);<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;listening&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>分析app应该是一个构造函数的实例，身上应该有get，listen方法.而且我们可以定义多个路由，应该单独抽离出来管理这些路由。因此需要两个构造函数（ <strong>Application 负责新增路由，启动服务，Router 管理路由</strong> ）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//Application.js</span><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Router</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./router/index&quot;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Application</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">router</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>();<br>&#125;<br><br><span class="hljs-title class_">Application</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">listen</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> _this = <span class="hljs-variable language_">this</span>;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">done</span>(<span class="hljs-params">req, res</span>) &#123;<br>        res.<span class="hljs-title function_">end</span>(<span class="hljs-string">`Connot <span class="hljs-subst">$&#123;req.method&#125;</span> <span class="hljs-subst">$&#123;req.url&#125;</span>`</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>        _this.<span class="hljs-property">router</span>.<span class="hljs-title function_">handle</span>(req, res, done);<br>    &#125;);<br>    server.<span class="hljs-property">listen</span>.<span class="hljs-title function_">apply</span>(server, <span class="hljs-variable language_">arguments</span>);<br>&#125;;<br><br><span class="hljs-title class_">Application</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">get</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">path, handler</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">router</span>.<span class="hljs-title function_">get</span>(path, handler);<br>&#125;;<br><br><span class="hljs-comment">//Router.js</span><br><span class="hljs-keyword">const</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;url&quot;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Router</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span> = [];<br>&#125;<br><span class="hljs-title class_">Router</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">get</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">path, handler</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-title function_">push</span>(&#123;<br>        path,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span>,<br>        handler,<br>    &#125;);<br>&#125;;<br><span class="hljs-title class_">Router</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">handle</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, out</span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; pathname &#125; = url.<span class="hljs-title function_">parse</span>(req.<span class="hljs-property">url</span>);<br>    <span class="hljs-keyword">const</span> reqMethod = req.<span class="hljs-property">method</span>.<span class="hljs-title function_">toLowerCase</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">const</span> &#123; path, method, handler &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>[i];<br>        <span class="hljs-keyword">if</span> (path === pathname &amp;&amp; method === reqMethod) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">handler</span>(req, res);<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">out</span>(req, res);<br>&#125;;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Router</span>;<br></code></pre></td></tr></table></figure><p>而有时候我们还会这么写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;wrong&#x27;</span>);<br>&#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">11</span>);<br>    <span class="hljs-title function_">next</span>();<br>&#125;).<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br>    <span class="hljs-title function_">next</span>();<br>&#125;).<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;ok&#x27;</span>);<br>&#125;).<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">err,req,res,next</span>)&#123;<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;catch: &#x27;</span>+err);<br>&#125;);<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><p>显然之前的架构处理这样的书写就会很臃肿，因此我们还需要单独再抽象出两个类，<strong>Layer （负责管理路由） 和 Route（负责管理一个路由下的所有函数）类。同时原来的Router类也需要进行改进。</strong></p><h3 id="Router-js"><a href="#Router-js" class="headerlink" title="Router.js"></a><strong>Router.js</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//Router.js</span><br><span class="hljs-comment">// 由于不停地在Router原型上加方法，可以定义一个对象，在这个对象身上加，最后让Router返回的实例原型指向这个对象  Object.setPrototypeOf(router, proto)</span><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Layer</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./layer&#x27;</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Route</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./route&#x27;</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Router</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span> = [];<br>&#125;<br><span class="hljs-title class_">Router</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">route</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">path</span>)&#123;<br>    <span class="hljs-comment">// layer 和 route之间的关系</span><br>    <span class="hljs-keyword">let</span> route = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Route</span>();<br>    <span class="hljs-keyword">let</span> layer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Layer</span>(path,route.<span class="hljs-property">dispatch</span>.<span class="hljs-title function_">bind</span>(route)); <span class="hljs-comment">// 将路径存储到layer中</span><br>    layer.<span class="hljs-property">route</span> = route;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-title function_">push</span>(layer);<br>    <span class="hljs-keyword">return</span> route;<br>&#125;<br><span class="hljs-comment">// 创建 Route 将handler传入到route中</span><br><span class="hljs-title class_">Router</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">get</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">path,...handlers</span>)&#123;<br>    <span class="hljs-keyword">let</span> route = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">route</span>(path); <span class="hljs-comment">// 将路径存入layer中</span><br>    route.<span class="hljs-title function_">get</span>(handlers);<span class="hljs-comment">// 将handler存入到route中</span><br>&#125;<br><span class="hljs-comment">// 每当浏览器发送请求 处理请求</span><br><span class="hljs-title class_">Router</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">handle</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, out</span>) &#123;<br>    <span class="hljs-keyword">let</span> &#123; pathname &#125; = url.<span class="hljs-title function_">parse</span>(req.<span class="hljs-property">url</span>);<br>    <span class="hljs-keyword">let</span> idx = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-title function_">next</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>        <span class="hljs-keyword">if</span> (idx &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-property">length</span>) <span class="hljs-keyword">return</span> <span class="hljs-title function_">out</span>(); <span class="hljs-comment">// 匹配不到调用not found</span><br>        <span class="hljs-keyword">let</span> layer = <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>[idx++];<br>        <span class="hljs-keyword">if</span> (layer.<span class="hljs-title function_">match</span>(pathname)) &#123;<br>            <span class="hljs-comment">// 如果路径匹配到了 调用route的dispatch方法</span><br>            layer.<span class="hljs-title function_">handle_request</span>(req, res, next);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_">next</span>(); <span class="hljs-comment">// 匹配不到找下一层</span><br>        &#125;<br>    &#125;;<br>    <span class="hljs-title function_">next</span>();<br>&#125;;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Router</span>;<br></code></pre></td></tr></table></figure><h3 id="Route-js"><a href="#Route-js" class="headerlink" title="Route.js"></a><strong>Route.js</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//Route.js</span><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Layer</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./layer&quot;</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Route</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span> = [];<br>&#125;<br><span class="hljs-title class_">Route</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">get</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">handlers</span>) &#123;<br>    handlers.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">handler</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> layer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Layer</span>(<span class="hljs-string">&quot;/&quot;</span>, handler);<br>        layer.<span class="hljs-property">method</span> = <span class="hljs-string">&quot;get&quot;</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-title function_">push</span>(layer);<br>    &#125;);<br>&#125;;<br><span class="hljs-title class_">Route</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">dispatch</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, out</span>) &#123;<br>    <span class="hljs-keyword">let</span> idx = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-title function_">next</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>        <span class="hljs-keyword">if</span> (idx &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-property">length</span>) <span class="hljs-keyword">return</span> <span class="hljs-title function_">out</span>();<br>        <span class="hljs-keyword">let</span> layer = <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>[idx++];<br>        <span class="hljs-comment">// 如果方法匹配打牌了</span><br>        <span class="hljs-keyword">if</span> (layer.<span class="hljs-property">method</span> === req.<span class="hljs-property">method</span>.<span class="hljs-title function_">toLowerCase</span>()) &#123;<br>            layer.<span class="hljs-title function_">handle_request</span>(req, res, next); <span class="hljs-comment">// 内部匹配完了在出来</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_">next</span>();<br>        &#125;<br>    &#125;;<br>    <span class="hljs-title function_">next</span>();<br>&#125;;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Route</span>;<br></code></pre></td></tr></table></figure><h3 id="Layer-js"><a href="#Layer-js" class="headerlink" title="Layer.js"></a><strong>Layer.js</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//Layer.js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Layer</span>(<span class="hljs-params">path,handler</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">path</span> = path;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">handler</span> = handler;<br>&#125;<br><span class="hljs-comment">// 匹配路由</span><br><span class="hljs-title class_">Layer</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">match</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">pathname</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">path</span> == pathname<br>&#125;<br><span class="hljs-title class_">Layer</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">handle_request</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br>    <span class="hljs-comment">// 调用dispatch方法</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">handler</span>(req,res,next);<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Layer</span>;<br></code></pre></td></tr></table></figure><h2 id="中间件原理"><a href="#中间件原理" class="headerlink" title="中间件原理"></a>中间件原理</h2><p>其实已经在路由中用到过，只不过Express中中间件又分为好几种：</p><ul><li><strong>应用级别的中间件 app.use()</strong></li><li><strong>路由中间件</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/home&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span>);<br>    <span class="hljs-title function_">next</span>()<br>&#125;);<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/home&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;home&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><strong>错误处理中间件</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;这个是404 没有路由匹配到！&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li><strong>内置中间件</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/static&#x27;</span>,express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&quot;public&quot;</span>));<br></code></pre></td></tr></table></figure><ul><li><strong>不过原理都差不多</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// use方法</span><br><span class="hljs-title class_">Application</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">use</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">_router</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_router</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>();<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_router</span>.<span class="hljs-title function_">use</span>(...<span class="hljs-variable language_">arguments</span>); <span class="hljs-comment">// 交给路由处理</span><br>&#125;;<br><span class="hljs-comment">//Router.js</span><br><span class="hljs-title class_">Router</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">use</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">path, handler</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> handler !== <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>        handler = path;<br>        path = <span class="hljs-string">&quot;/&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">let</span> layer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Layer</span>(path, handler);<br>    layer.<span class="hljs-property">route</span> = <span class="hljs-literal">undefined</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-title function_">push</span>(layer); <span class="hljs-comment">// 将当前层放到stack中</span><br>&#125;;<br><br><span class="hljs-title class_">Router</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">handle</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, out</span>) &#123;<br>    <span class="hljs-keyword">let</span> &#123; pathname &#125; = url.<span class="hljs-title function_">parse</span>(req.<span class="hljs-property">url</span>);<br>    <span class="hljs-keyword">let</span> idx = <span class="hljs-number">0</span>;<br>    letnext = <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (idx &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-property">length</span>) <span class="hljs-title function_">returnout</span>(); <span class="hljs-comment">// 匹配不到调用not found</span><br><span class="hljs-keyword">let</span> layer = <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>[idx++];<br><span class="hljs-comment">// 如果匹配到</span><br><span class="hljs-keyword">if</span> (layer.<span class="hljs-title function_">match</span>(pathname)) &#123;<br><span class="hljs-keyword">if</span> (!layer.<span class="hljs-property">route</span>) &#123;<br><span class="hljs-comment">// 中间件</span><br>                layer.<span class="hljs-title function_">handle_request</span>(req, res, next);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 路由</span><br><span class="hljs-keyword">if</span> (layer.<span class="hljs-property">route</span>.<span class="hljs-property">methods</span>[req.<span class="hljs-property">method</span>.<span class="hljs-title function_">toLowerCase</span>()]) &#123;<br>                    layer.<span class="hljs-title function_">handle_request</span>(req, res, next);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">next</span>();<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">next</span>(); <span class="hljs-comment">// 匹配不到找下一层</span><br>        &#125;<br>    &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="params解析"><a href="#params解析" class="headerlink" title="params解析"></a>params解析</h2><p>当我们编写路由的时候会有如下写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user/:name/:id&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;OK&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>而当我们在浏览器输入路由是这样的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-attr">localhost</span>:<span class="hljs-number">3000</span>/user/hxh/<span class="hljs-number">0522</span><br></code></pre></td></tr></table></figure><p>首先会将app.get定义的路由用正则表达式进行替换，将:xxx部分替换成正则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> path = <span class="hljs-string">&quot;/user/:name/:id&quot;</span>;<br><span class="hljs-keyword">const</span> paramsName = [];<br><span class="hljs-keyword">const</span> regStr = path.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/:(\w+)/g</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">matchChar, group1</span>) &#123;<br>    paramsName.<span class="hljs-title function_">push</span>(group1);<br>    <span class="hljs-keyword">return</span> (<span class="hljs-string">&#x27;(\\w+)&#x27;</span>)<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(regStr);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(regStr);<span class="hljs-comment">///user/(\w+)/(\w+)</span><br></code></pre></td></tr></table></figure><p>这样就得到了一个匹配url的正则字符串，再用这个字符串生成正则去匹配我们的路由，就能提取出params，最后把提取出来的值跟变量对应起来就好。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(regStr);<br><span class="hljs-keyword">const</span> url = <span class="hljs-string">&quot;localhost:3000/user/hxh/0522&quot;</span>;<br><span class="hljs-keyword">const</span> res = url.<span class="hljs-title function_">match</span>(reg);<br><span class="hljs-keyword">const</span> params = &#123;&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; paramsName.<span class="hljs-property">length</span>; i++) &#123;<br>    params[paramsName[i]] = res[i + <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(params);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
      <tag>Express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Serverless了解</title>
    <link href="/jing-jiu/2022/08/07/%E6%8E%A2%E7%B4%A2/ServerLess%E4%BA%86%E8%A7%A3/"/>
    <url>/jing-jiu/2022/08/07/%E6%8E%A2%E7%B4%A2/ServerLess%E4%BA%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Serverless指的是由开发者实现的Server逻辑运行在无状态的计算容器中，开发者只需要关注业务逻辑的开发，不需要关注底层资源的调度、管理以及维护服务器等基础设施。这些容器一般由事件触发，根据负载进行自动扩缩容，按需使用，按量付费，能极大的节省用户运维成本和服务使用成本。（Goofy，ByteFaaS就是这一类产品）一般认为其由FaaS（函数即服务）和BaaS（后端即服务）组成。</p><h1 id="FaaS"><a href="#FaaS" class="headerlink" title="FaaS"></a>FaaS</h1><p>由事件驱动的全托管计算服务，用户只需要编写函数代码以及选择对应的触发器（trigger），如MQ、Cron、HTTP等，其余的诸如流量调度、扩缩容、部署、容灾、监控、日志等功能全部由FaaS服务提供商托管。同时，用户只需要为代码实际运行时消耗的资源付费。</p><p>如下一段FaaS代码，用户在使用时调用对应sdk：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> dayjs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;dayjs&#x27;</span>;<br><span class="hljs-comment">// import xxx from &#x27;~/xxx&#x27;;</span><br><span class="hljs-comment">// 可通过 &#x27;~/xxx&#x27;来引用其他云函数</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">async</span> (<span class="hljs-attr">params</span>: <span class="hljs-title class_">FaaS</span>.<span class="hljs-property">Params</span>, <span class="hljs-attr">context</span>: <span class="hljs-title class_">FaaS</span>.<span class="hljs-property">Context</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;invoke faas: &#x27;</span>, params);<br>  <span class="hljs-comment">// 调用其他云函数</span><br>  <span class="hljs-comment">// xxx();</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello World!&#x27;</span>,<br>    <span class="hljs-attr">time</span>: <span class="hljs-title function_">dayjs</span>().<span class="hljs-title function_">format</span>(<span class="hljs-string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>),<br>    <span class="hljs-attr">user</span>: (<span class="hljs-keyword">await</span> sdk.<span class="hljs-property">auth</span>.<span class="hljs-title function_">getCurrentUser</span>()) + <span class="hljs-string">&#x27;111&#x27;</span>,<br><br>    <span class="hljs-attr">token</span>: <span class="hljs-keyword">await</span> sdk.<span class="hljs-property">redis</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;xxx&#x27;),</span><br><span class="hljs-string">  &#125;;</span><br><span class="hljs-string">&#125;;</span><br></code></pre></td></tr></table></figure><p>也就是说，FaaS服务商帮我们做好业务之外的事情，我们根据业务需要书写函数就好，而且按量计费的方式也会对有明显波峰的场景节约成本。</p><h1 id="BaaS"><a href="#BaaS" class="headerlink" title="BaaS"></a>BaaS</h1><p>是一种自动化后端开发和维护云基础设施的平台。使用 BaaS后，开发者将把运维程序逻辑的责任外包给第三方，并将重点放在前端或客户端开发上。BaaS服务提供商将诸如身份验证、文件存储、数据存储、消息通知等多种能力整合，让开发者通过API或者SDK的方式提供，方便缺少后端知识的前端&#x2F;客户端开发工程师接入，缩短开发周期。</p><p><a href="https://tech.bytedance.net/videos/set/6978749141803335688/6993174149501976584">贴一个链接</a></p>]]></content>
    
    
    <categories>
      
      <category>探索</category>
      
      <category>Serverless</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Serverless</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Egg源码</title>
    <link href="/jing-jiu/2022/08/05/Node/Egg/"/>
    <url>/jing-jiu/2022/08/05/Node/Egg/</url>
    
    <content type="html"><![CDATA[<h1 id="Egg"><a href="#Egg" class="headerlink" title="Egg"></a>Egg</h1><p>在Koa的基础上，阿里封装了一个企业级的NodeJS框架——egg.js。将Koa的行为进一步分离成controller，service，model三层，并规范了路由的写法——约定式路由。</p><h2 id="约定式路由"><a href="#约定式路由" class="headerlink" title="约定式路由"></a>约定式路由</h2><p>实现约定式路由的核心方法是load函数，通过fs遍历约定文件夹（ <strong>controller，service，model…</strong> ）下的文件，导出文件的内容，生成一个对象挂载到Egg的实例上。</p><h3 id="load"><a href="#load" class="headerlink" title="load"></a><strong>load</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">load</span>(<span class="hljs-params">dir, cb</span>) &#123;<br>    <span class="hljs-comment">// 获取绝对路径</span><br>    <span class="hljs-keyword">const</span> url = path.<span class="hljs-title function_">resolve</span>(__dirname, dir);<br>    <span class="hljs-comment">// 读取路径下的文件</span><br>    <span class="hljs-keyword">const</span> files = fs.<span class="hljs-title function_">readdirSync</span>(url, &#123; <span class="hljs-attr">encoding</span>: <span class="hljs-string">&quot;ascii&quot;</span> &#125;);<br>    <span class="hljs-comment">// 遍历路由文件 将配置解析到路由器中</span><br>    files.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">filename</span>) =&gt;</span> &#123;<br>        filename = filename.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;.js&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">// 导入文件</span><br>        <span class="hljs-keyword">const</span> file = <span class="hljs-built_in">require</span>(url + <span class="hljs-string">&quot;/&quot;</span> + filename);<br>        <span class="hljs-comment">// 处理逻辑</span><br>        <span class="hljs-title function_">cb</span>(filename, file);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="initRouter"><a href="#initRouter" class="headerlink" title="initRouter"></a>initRouter</h3><p>处理routes下面的文件，约定每一个文件为一个路由，其中的每一个是对应的子路由,这里对路由简单书写，实际可能会更复杂一点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">initRouter</span>(<span class="hljs-params">app</span>) &#123;<br>    <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>();<br>    <span class="hljs-title function_">load</span>(<span class="hljs-string">&quot;routes&quot;</span>, <span class="hljs-function">(<span class="hljs-params">filename, routes</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 若是index文件 就不加前缀 如果是其他的文件 路由前缀就是文件名</span><br>        <span class="hljs-keyword">const</span> prefix = filename === <span class="hljs-string">&quot;index&quot;</span> ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">`/<span class="hljs-subst">$&#123;filename&#125;</span>`</span>;<br>        routes = <span class="hljs-keyword">typeof</span> routes == <span class="hljs-string">&quot;function&quot;</span> ? <span class="hljs-title function_">routes</span>(app) : routes;<br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(routes).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> [method, path] = key.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot; &quot;</span>);<br>            router[method](prefix + path, <span class="hljs-keyword">async</span> (ctx) =&gt; &#123;<br>                <span class="hljs-comment">// 传⼊ctx</span><br>                app.<span class="hljs-property">ctx</span> = ctx; <span class="hljs-comment">// 挂载⾄app</span><br>                <span class="hljs-keyword">await</span> routes[key](app); <span class="hljs-comment">// 路由处理器现在接收到的是app</span><br>            &#125;);<br>        &#125;);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> router;<br>&#125;<br><span class="hljs-comment">// routes/index.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-function">(<span class="hljs-params">app</span>) =&gt;</span> (&#123;<br>    <span class="hljs-string">&quot;get /&quot;</span>: app.<span class="hljs-property">$controller</span>.<span class="hljs-property">home</span>.<span class="hljs-property">index</span>,<br>    <span class="hljs-string">&quot;get /detail&quot;</span>: app.<span class="hljs-property">$controller</span>.<span class="hljs-property">home</span>.<span class="hljs-property">detail</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="MVC分离"><a href="#MVC分离" class="headerlink" title="MVC分离"></a>MVC分离</h2><p><strong>controller，service，model同理。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// controller-loader.js</span><br><span class="hljs-keyword">const</span> &#123; load &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./router-loader&quot;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">initController</span>(<span class="hljs-params">app</span>) &#123;<br>    <span class="hljs-keyword">const</span> controllers = &#123;&#125;;<br><br>    <span class="hljs-title function_">load</span>(<span class="hljs-string">&quot;controller&quot;</span>, <span class="hljs-function">(<span class="hljs-params">filename, controller</span>) =&gt;</span> &#123;<br>        controllers[filename] = <span class="hljs-title function_">controller</span>(app);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> controllers;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123; initController &#125;;<br><span class="hljs-comment">// controller/home.js</span><br><span class="hljs-comment">// 这里对controller做简单处理，egg中会继承Controller类 然后在类中书写方法，但是作用一致</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-function">(<span class="hljs-params">app</span>) =&gt;</span> (&#123;<br>    <span class="hljs-attr">index</span>: <span class="hljs-keyword">async</span> (ctx) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> name = <span class="hljs-keyword">await</span> app.<span class="hljs-property">$service</span>.<span class="hljs-property">user</span>.<span class="hljs-title function_">getName</span>();<br>        app.<span class="hljs-property">ctx</span>.<span class="hljs-property">body</span> = <span class="hljs-string">&quot;ctrl user&quot;</span> + name;<br>    &#125;,<br>    <span class="hljs-attr">detail</span>: <span class="hljs-function">(<span class="hljs-params">ctx</span>) =&gt;</span> &#123;<br>        app.<span class="hljs-property">ctx</span>.<span class="hljs-property">body</span> = <span class="hljs-string">&quot;Home Detail&quot;</span>;<br>    &#125;,<br>&#125;);<br><br><br><span class="hljs-comment">// service-loader.js</span><br><span class="hljs-keyword">const</span> &#123; load &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./router-loader&quot;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">initService</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> services = &#123;&#125;;<br>    <span class="hljs-title function_">load</span>(<span class="hljs-string">&quot;service&quot;</span>, <span class="hljs-function">(<span class="hljs-params">filename, service</span>) =&gt;</span> &#123;<br>        services[filename] = service;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> services;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123; initService &#125;;<br></code></pre></td></tr></table></figure><h2 id="Egg类"><a href="#Egg类" class="headerlink" title="Egg类"></a>Egg类</h2><p>本质上是对Koa的扩展，实现MVC结构。</p><ul><li><strong>model</strong>层即数据库实体层与数据库中的表一一对应；</li><li><strong>controller</strong>层负责前后端交互，接受前端请求，调用service层，接收service层返回的数据，最后返回具体的页面和数据到客户端；</li><li><strong>service</strong>层即业务逻辑层，完成业务的功能设计。 <strong>主要是针对具体的问题的操作，把一些数据层的操作进行组合，间接与数据库打交道（提供操作数据库的方法）</strong> 。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> &#123; initController &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./ctrl-loader&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Koa</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./lib/application&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; initRouter &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./router-loader&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; initService &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./service-loader&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; loadConfig &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./config-loader&quot;</span>);<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Egg</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">conf</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$app</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Koa</span>(conf);<br>        <span class="hljs-title function_">loadConfig</span>(<span class="hljs-variable language_">this</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$controller</span> = <span class="hljs-title function_">initController</span>(<span class="hljs-variable language_">this</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$service</span> = <span class="hljs-title function_">initService</span>();<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span> = <span class="hljs-title function_">initRouter</span>(<span class="hljs-variable language_">this</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-property">stack</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$app</span>.<span class="hljs-title function_">use</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">routes</span>());<br>    &#125;<br>    <span class="hljs-title function_">start</span>(<span class="hljs-params">...arg</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$app</span>.<span class="hljs-title function_">listen</span>(...arg);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Egg</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Egg</tag>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微前端方案</title>
    <link href="/jing-jiu/2022/08/05/%E6%8E%A2%E7%B4%A2/%E5%BE%AE%E5%89%8D%E7%AB%AF%E6%96%B9%E6%A1%88/"/>
    <url>/jing-jiu/2022/08/05/%E6%8E%A2%E7%B4%A2/%E5%BE%AE%E5%89%8D%E7%AB%AF%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>微前端是一种类似于微服务的架构，是一种由多个独立交付的前端应用组成整体的架构风格，将前端应用分解成一些更小、更简单的能够独立开发、测试、部署的应用，而在用户看来仍然是一个完整的应用；或者将一些原本独立运行的应用，没有关联的应用糅合成一个整体。</p><p>它主要解决如下问题：</p><ul><li>将大型项目拆分 便于维护</li><li>便于跨团队，跨部门合作</li><li>技术栈无关&amp;业务无关 React，Vue 不同团队可以选择适合自己的技术栈</li><li>子应用只需要关系业务细节 诸如鉴权，登陆之类的交给主应用来做</li></ul><h1 id="现有的几种方案"><a href="#现有的几种方案" class="headerlink" title="现有的几种方案"></a>现有的几种方案</h1><h2 id="Iframe"><a href="#Iframe" class="headerlink" title="Iframe"></a>Iframe</h2><ul><li>由于iframe自身的特性，完全隔离了css和js，不会造成不同子应用css或js的污染，同时子应用接入的成本较低，不需要做太大的改造。</li><li>缺点也很明显<ul><li>由于完全隔离，父子应用通信需要通过postMessage进行（仅能传递字符串）</li><li>对于需要登陆的场景，需要思考如何将主应用的cookie透传到根域名不同的各个子应用中</li><li>浏览器刷新 iframe url 状态丢失、后退前进按钮无法使用</li><li>如何收集子应用异常</li><li>对于子应用（不居中）的一个弹框（居中）在主应用达不到预期效果</li></ul></li></ul><h2 id="single-spa-amp-Garfish-amp-qiankun"><a href="#single-spa-amp-Garfish-amp-qiankun" class="headerlink" title="single-spa &amp; Garfish &amp; qiankun"></a>single-spa &amp; Garfish &amp; qiankun</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p><strong>single-spa</strong>是通过监听 url change 事件，在路由变化时匹配到渲染的子应用并进行渲染，同时<strong>single-spa</strong>要求子应用修改渲染逻辑并暴露出三个方法： <strong>bootstrap</strong> 、 <strong>mount</strong> 、 <strong>unmount</strong> ，分别对应初始化、渲染和卸载，这也导致子应用需要对入口文件进行修改。</p><p>因为<strong>qiankun</strong>是基于<strong>single-spa</strong>进行封装，所以这些特点也被<strong>qiankun</strong>继承下来，并且需要对webpack配置进行一些修改，并扩展了沙箱隔离，预加载，缓存，路由，插件等能力。</p><p>Garfish在qiankun的基础上做了一下优化，如沙箱隔离使用new Function替换Eval。</p><p>但目前来看spa方案qiankun使用的人数较多，社区活跃度较高，且方案更为成熟。</p><h3 id="主应用"><a href="#主应用" class="headerlink" title="主应用"></a>主应用</h3><p>主应用中注册子应用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Garfish</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;garfish&#x27;</span>;<br><br><span class="hljs-comment">//无需手动控制加载</span><br><span class="hljs-title class_">Garfish</span>.<span class="hljs-title function_">run</span>(&#123;<br>  <span class="hljs-attr">basename</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>  <span class="hljs-attr">domGetter</span>: <span class="hljs-string">&#x27;#container&#x27;</span>,<br>  <span class="hljs-comment">//子应用列表信息</span><br>  <span class="hljs-attr">apps</span>: [<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;react&#x27;</span>,<br>      <span class="hljs-attr">activeWhen</span>: <span class="hljs-string">&#x27;/react&#x27;</span>,<br>      <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span>, <span class="hljs-comment">// html入口</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;vue&#x27;</span>,<br>      <span class="hljs-attr">activeWhen</span>: <span class="hljs-string">&#x27;/vue&#x27;</span>,<br>      <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;http://localhost:8080/index.js&#x27;</span>, <span class="hljs-comment">// js入口</span><br>    &#125;,<br>  ],<br>&#125;);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">//手动控制子应用加载</span><br>    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Garfish</span>.<span class="hljs-title function_">loadApp</span>(<span class="hljs-string">&#x27;app1&#x27;</span>, &#123;<br>      <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;http://localhost:3001&#x27;</span>,<span class="hljs-comment">//子应用资源入口</span><br>      <span class="hljs-attr">basename</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-comment">//子应用基础路径</span><br>      <span class="hljs-attr">domGetter</span>: <span class="hljs-string">&#x27;#container&#x27;</span>,<span class="hljs-comment">//默认挂载点</span><br>      <span class="hljs-comment">//子应用provider导出函数 生命周期方法中将接收到此数据</span><br>      <span class="hljs-attr">props</span>: &#123;<br>        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;hello world&#x27;</span>,<br>      &#125;,<br>    &#125;);<br>    <span class="hljs-keyword">await</span> app.<span class="hljs-title function_">mount</span>();<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;main&#x27;</span>&gt;</span> </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Main App<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><h3 id="子应用"><a href="#子应用" class="headerlink" title="子应用"></a>子应用</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// vite.config.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">base</span>: <span class="hljs-string">&#x27;http://localhost:3000/&#x27;</span>,<br>  <span class="hljs-attr">server</span>: &#123;<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">3000</span>,<br>    <span class="hljs-attr">cors</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">origin</span>: <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span>,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h3><ul><li>生命周期<ul><li>Mount<ul><li>创建app容器添加到dom上</li><li>编译子应用的代码</li><li>拿到子应用的provider</li><li>调用app.options.beforeMount钩子</li><li>调用provider.render</li><li>将app set到Garfish.activeApps中</li><li>调用app.options.afterMount钩子</li><li>如果渲染失败app.mount会返回false</li></ul></li><li>Unmount<ul><li>调用app.options.beforeUnmount钩子</li><li>调用provider.destroy</li><li>移除app的dom</li><li>app.display,app.mounted &#x3D; false</li><li>将app从Garfish.activeApps中delete</li><li>调用 app.options.afterUnmount 钩子</li><li>根据app.unmount判断是否卸载成功</li></ul></li><li>Show<ul><li>app的容器添加到dom上</li><li>调用provider.render</li><li>app.dispaly &#x3D; true</li><li>app.show判断是否渲染</li></ul></li><li>Hide<ul><li>调用provider.destory</li><li>将app从dom移除</li><li>app.dispaly &#x3D; false</li><li>app.hide判断是否隐藏成功</li></ul></li></ul></li><li>沙箱机制</li><li>不使用iframe隔离的情况下保证样式，全局变量不冲突<ul><li>Eval</li><li>New Function eval需要每次都执行 new Function是重复执行一个函数 因此选用New Function<br>隔离方案</li><li>快照沙箱<br>在某个阶段给当前运行环境打上快照，需要的时候恢复快照。（运行时保存window所有的变量 卸载后把window缺失的变量存起来 等下一次调用恢复）</li><li>vm沙箱</li><li>防止逃逸</li></ul></li><li>路由机制</li></ul><h2 id="micro-app"><a href="#micro-app" class="headerlink" title="micro-app"></a>micro-app</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>借鉴了<strong>WebComponent</strong>的思想，通过<strong>CustomElement</strong>结合自定义的 <strong>ShadowDom</strong> ，将微前端封装成一个类<strong>WebComponent</strong>组件，从而实现微前端的组件化渲染。并且由于自定义<strong>ShadowDom</strong>的隔离特性，<strong>micro-app</strong>不需要像<strong>single-spa</strong>和<strong>qiankun</strong>一样要求子应用修改渲染逻辑并暴露出方法，也不需要修改webpack配置， <strong>相对接入微前端成本较低</strong> 。</p><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=NDc5ZTJhZWM0NzE3ODVlYTNmZjc2YzQxMTlhOWY4MDFfRk1KcDE5dnVQcGxibTFsM2UweDAwckNuZjRYVjZrVFFfVG9rZW46Ym94Y25KTnk0eTBhRVJrT0syU0dCelc2TWRiXzE2NzMwNjk1MDI6MTY3MzA3MzEwMl9WNA"></p><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=MGI0MTVkMzE2NjdiZWZjZTQ0ZjBjNWJhYTc2ZTQ0YmJfSUhMMmgzNFQwdm0xV0IxSUJBYmFJTnN5aEZwTG9WcU5fVG9rZW46Ym94Y25sNDBWd25oOVFyT0FDT3pLT2ZCcVBoXzE2NzMwNjk1MDI6MTY3MzA3MzEwMl9WNA"></p><h3 id="主应用-1"><a href="#主应用-1" class="headerlink" title="主应用"></a>主应用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span>;<br><span class="hljs-keyword">import</span> microApp <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@micro-zoe/micro-app&#x27;</span><br><br><span class="hljs-comment">//入口引入</span><br>microApp.<span class="hljs-title function_">start</span>()<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Router</span> /&gt;</span></span>,<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><p>为子应用添加路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Suspense</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BrowserRouter</span>, <span class="hljs-title class_">Switch</span>, <span class="hljs-title class_">Route</span>, <span class="hljs-title class_">Redirect</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./pages/home/home&#x27;</span><br><span class="hljs-keyword">import</span> config <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./config&#x27;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="hljs-comment">// 设置主应用基础路由为main-react17(用于后续部署)，则子应用基础路由(baseroute)为/main-react17/xxx</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">BrowserRouter</span> <span class="hljs-attr">basename</span>=<span class="hljs-string">&#x27;/main-react17&#x27;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;router-container&#x27;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">exact</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/app-vue3_hxh&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">div</span>&gt;</span>Loading...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#125;&gt;</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">micro-app</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;appname-vue3&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">url</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">config.vue3</span>&#125;/<span class="hljs-attr">child</span>/<span class="hljs-attr">vue3</span>/`&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">baseroute</span>=<span class="hljs-string">&#x27;/main-react17/app-vue3_hxh&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">micro-app</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/&#x27;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><h3 id="子应用-1"><a href="#子应用-1" class="headerlink" title="子应用"></a>子应用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">mount</span> () &#123;<br>  <span class="hljs-comment">// __MICRO_APP_BASE_ROUTE__ 为micro-app传入的基础路由</span><br>  history = <span class="hljs-title function_">createWebHistory</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">__MICRO_APP_BASE_ROUTE__</span> || process.<span class="hljs-property">env</span>.<span class="hljs-property">BASE_URL</span>)<br>  router = <span class="hljs-title function_">createRouter</span>(&#123;<br>    history,<br>    routes,<br>  &#125;) <span class="hljs-keyword">as</span> <span class="hljs-title class_">Router</span><br><br>  <span class="hljs-comment">// @ts-ignore</span><br>  app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br>  app.<span class="hljs-title function_">use</span>(router)<br>  app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#vue3-app&#x27;</span>)<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;微应用child-vue3渲染了&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>webpack配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 开发环境</span><br><span class="hljs-attr">devServer</span>: &#123;<br>  <span class="hljs-attr">headers</span>: &#123;<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="hljs-string">&#x27;*&#x27;</span>&#125;<br>&#125;<br><span class="hljs-comment">// 线上环境</span><br><span class="hljs-title class_">Nginx</span>代理<br></code></pre></td></tr></table></figure><p>生命周期等其他概念与qiankun or Garfish类似。</p><h2 id="Module-Federation"><a href="#Module-Federation" class="headerlink" title="Module Federation"></a>Module Federation</h2><p>WIP……</p>]]></content>
    
    
    <categories>
      
      <category>探索</category>
      
      <category>微前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Koa源码</title>
    <link href="/jing-jiu/2022/07/25/Node/Koa/"/>
    <url>/jing-jiu/2022/07/25/Node/Koa/</url>
    
    <content type="html"><![CDATA[<h1 id="Koa"><a href="#Koa" class="headerlink" title="Koa"></a>Koa</h1><h2 id="Compose"><a href="#Compose" class="headerlink" title="Compose"></a>Compose</h2><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>Koa中间件机制就是组合函数（Compose）的概念，</strong> 将⼀组需要<strong>顺序执行</strong>的函数<strong>复合</strong>为⼀个函数，<strong>外层函数的参数</strong>实际是内层函数的 <strong>返回值</strong> 。洋葱圈模型可以形象表示这种机制，这也是Koa的 <strong>核心</strong> 。</p><p>如下图，假设我们注册中间件的顺序是A,B,C，那么中间件的执行顺序是，<strong>ABCBA。</strong></p><p>那么<strong>外层函数的参数是内层函数的返回值</strong>该怎么理解呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Koa</span>();<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>    <span class="hljs-keyword">const</span> router = &#123;&#125;;<br>    router[<span class="hljs-string">&quot;/html&quot;</span>] = <span class="hljs-function">(<span class="hljs-params">ctx</span>) =&gt;</span> &#123;<br>        ctx.<span class="hljs-property">type</span> = <span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>;<br>        ctx.<span class="hljs-property">body</span> = <span class="hljs-string">`&lt;b&gt;my name is:<span class="hljs-subst">$&#123;ctx.body[<span class="hljs-number">0</span>].name&#125;</span>&lt;/b&gt;`</span>;<br>    &#125;;<br>    <span class="hljs-keyword">const</span> fun = router[ctx.<span class="hljs-property">url</span>];<br>    fun &amp;&amp; <span class="hljs-title function_">fun</span>(ctx);<br>&#125;);<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br>    ctx.<span class="hljs-property">body</span> = [<br>        &#123;<br>            <span class="hljs-attr">name</span>: ctx.<span class="hljs-property">url</span>,<br>        &#125;,<br>    ];<br>&#125;);<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;listening&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>上述代码中，在B中间件给ctx的body赋值为一个数组，在A组件中就能通过<strong>ctx参数</strong>拿到这个数组，进行一些操作。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>其实配合es7的async &#x2F; await 可以很方便的实现Compose。当然，Compose只是Koa重要部分，还有一些细节也一并实现。</p><p>可以看到下面代码引入了三个包 <strong>context，request，response</strong> ，其实就是对http做了一些简单的封装。</p><h3 id="context"><a href="#context" class="headerlink" title="context"></a><strong>context</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">url</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">request</span>.<span class="hljs-property">url</span>;<br>    &#125;,<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">method</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">request</span>.<span class="hljs-property">method</span>;<br>    &#125;,<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">body</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">response</span>.<span class="hljs-property">body</span>;<br>    &#125;,<br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">body</span>(<span class="hljs-params">val</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">response</span>.<span class="hljs-property">body</span> = val;<br>    &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="request"><a href="#request" class="headerlink" title="request"></a><strong>request</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">url</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">req</span>.<span class="hljs-property">url</span>;<br>    &#125;,<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">method</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">req</span>.<span class="hljs-property">method</span>.<span class="hljs-title function_">toLowerCase</span>();<br>    &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="response"><a href="#response" class="headerlink" title="response"></a><strong>response</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">body</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_body</span>;<br>    &#125;,<br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">body</span>(<span class="hljs-params">val</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_body</span> = val;<br>    &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>Compose的实现其实跟express差不多，只不过用Promise封装了一下，但是因为async，await的存在，让它和express形成了不同的执行顺序。</p><p>除此之外我们定义了一个ctx（Context）对象，对http的req，res进行了简单的封装然后进行传递。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><span class="hljs-keyword">const</span> context = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./context&quot;</span>);<br><span class="hljs-keyword">const</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./request&quot;</span>);<br><span class="hljs-keyword">const</span> response = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./response&quot;</span>);<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">middlewares</span> = [];<br>    &#125;<br>    <span class="hljs-title function_">use</span>(<span class="hljs-params">fn</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">middlewares</span>.<span class="hljs-title function_">push</span>(fn);<br>    &#125;<br>    <span class="hljs-title function_">createContext</span>(<span class="hljs-params">req, res</span>) &#123;<br>        <span class="hljs-keyword">const</span> ctx = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(context);<br>        ctx.<span class="hljs-property">request</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(request);<br>        ctx.<span class="hljs-property">response</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(response);<br>        ctx.<span class="hljs-property">req</span> = ctx.<span class="hljs-property">request</span>.<span class="hljs-property">req</span> = req;<br>        ctx.<span class="hljs-property">res</span> = ctx.<span class="hljs-property">response</span>.<span class="hljs-property">res</span> = res;<br>        <span class="hljs-keyword">return</span> ctx;<br>    &#125;<br>    <span class="hljs-title function_">compose</span>(<span class="hljs-params">middlewares</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">ctx</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">function</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">idx</span>) &#123;<br>                <span class="hljs-keyword">const</span> fn = middlewares[idx];<br>                <span class="hljs-keyword">if</span> (!fn) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>();<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<br>                    <span class="hljs-title function_">fn</span>(ctx, <span class="hljs-keyword">function</span> <span class="hljs-title function_">next</span>(<span class="hljs-params"></span>) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-title function_">dispatch</span>(idx + <span class="hljs-number">1</span>);<br>                    &#125;)<br>                );<br>            &#125;<br>        &#125;;<br>    &#125;<br>    <span class="hljs-title function_">listen</span>(<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br>            <span class="hljs-keyword">const</span> ctx = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">createContext</span>(req, res);<br>            <span class="hljs-keyword">const</span> fn = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">compose</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">middlewares</span>);<br>            <span class="hljs-keyword">await</span> <span class="hljs-title function_">fn</span>(ctx);<br>            res.<span class="hljs-title function_">end</span>(ctx.<span class="hljs-property">body</span>);<br>        &#125;);<br>        server.<span class="hljs-title function_">listen</span>(...args);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Application</span>;<br></code></pre></td></tr></table></figure><h2 id="路由机制"><a href="#路由机制" class="headerlink" title="路由机制"></a>路由机制</h2><p>Koa单独将路由拆分出来，通过use注册路由中间件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>();<br><span class="hljs-comment">// 注册路由中间件</span><br>app.<span class="hljs-title function_">use</span>(router.<span class="hljs-title function_">routes</span>());<br></code></pre></td></tr></table></figure><p>Koa的路由相对于Express来说要简单很多，只是实现了基本的功能，因为它不需要支持多个handle的调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Router</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span> = [];<br>    &#125;<br>    <span class="hljs-title function_">register</span>(<span class="hljs-params">path, method, middleware</span>) &#123;<br>        <span class="hljs-keyword">let</span> route = &#123; path, method, middleware &#125;;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-title function_">push</span>(route);<br>    &#125;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">path, middleware</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">register</span>(path, <span class="hljs-string">&quot;get&quot;</span>, middleware);<br>    &#125;<br>    <span class="hljs-title function_">post</span>(<span class="hljs-params">path, middleware</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">register</span>(path, <span class="hljs-string">&quot;post&quot;</span>, middleware);<br>    &#125;<br>    <span class="hljs-title function_">routes</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> stack = <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">ctx, next</span>) &#123;<br>            <span class="hljs-keyword">let</span> currUrl = ctx.<span class="hljs-property">url</span>;<br>            <span class="hljs-keyword">let</span> route;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; stack.<span class="hljs-property">length</span>; i++) &#123;<br>                <span class="hljs-keyword">const</span> item = stack[i];<br>                <span class="hljs-keyword">if</span> (item.<span class="hljs-property">path</span> === currUrl &amp;&amp; item.<span class="hljs-property">method</span> === ctx.<span class="hljs-property">method</span>) &#123;<br>                    route = item.<span class="hljs-property">middleware</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> route === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>                <span class="hljs-title function_">route</span>(ctx, next);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>        &#125;;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Router</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
      <tag>Koa</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React相关基础知识</title>
    <link href="/jing-jiu/2022/04/05/Framework/React/%E5%9F%BA%E7%A1%80/"/>
    <url>/jing-jiu/2022/04/05/Framework/React/%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><p>在JS中可以使用html的语法书写代码，是JS的一种扩展，通过JSX可以生成React元素。他在编译时会被Babel编译为React.createElement()方法的返回结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>)=&gt;&#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">disabled</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>&#125;<br><span class="hljs-comment">// 会被Babel编译为这样一段代码</span><br><span class="hljs-meta">&quot;use strict&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-comment">/*#__PURE__*/</span><span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;h1&quot;</span>, &#123;<br>    <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span><br>  &#125;, <span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;;<br><span class="hljs-comment">// 不过在React17之后有了新的JSX编译方法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">_jsx</span>(<span class="hljs-string">&#x27;h1&#x27;</span>,  &#123; <span class="hljs-attr">disabled</span>: !<span class="hljs-number">0</span>, <span class="hljs-attr">children</span>: <span class="hljs-string">&quot;Hello&quot;</span> &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>React.createElement方法返回如下结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&#123;<br>  <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;h1&quot;</span>, <span class="hljs-comment">// 元素类型</span><br>  <span class="hljs-string">&quot;key&quot;</span>: <span class="hljs-literal">null</span>,  <span class="hljs-comment">// Diff算法使用 区分同一个父元素的不同子元素</span><br>  <span class="hljs-string">&quot;ref&quot;</span>: <span class="hljs-literal">null</span>,         <span class="hljs-comment">// 真实DOM</span><br>  <span class="hljs-string">&quot;props&quot;</span>: &#123;    <span class="hljs-comment">// 属性</span><br>    <span class="hljs-string">&quot;disabled&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;children&quot;</span>: <span class="hljs-string">&quot;Hello&quot;</span> <span class="hljs-comment">// 子元素</span><br>  &#125;,<br>  <span class="hljs-string">&quot;_owner&quot;</span>: <span class="hljs-literal">null</span>,<br>  <span class="hljs-string">&quot;_store&quot;</span>: &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Fiber"><a href="#Fiber" class="headerlink" title="Fiber"></a>Fiber</h3><p>在新的React架构中，分为三个部分：Scheduler（调度器：调度任务的优先级），Reconciler（协调器：找出变化的组件），Renderer（渲染器：将变化的组件渲染到页面上）。而Reconciler内部就采用了Fiber的架构。</p><p>FIber并不是React特有的一个概念，与协程类似，也可以理解为协程的一种实现（在JavaScript中，协程的实现便是Generator 但相较于Generator，FIber可以更好实现高优更新），Fiber架构的提出源自于老的React架构中不能支撑异步更新。</p><p>当首屏渲染时，根据组件返回的JSX在内存中依次创建Fiber节点（保存对DOM的描述）并连接起来生成Fiber树，称为workInProgress FIber树（由于是首屏渲染 因此current Fiber为空）workInProgress FIber会尽量复用current FIber中的节点（Diff算法）当workInProgress FIber构建完成交给Renderer进行渲染，此时workInProgress FIber就会变为current FIber，React就是通过这个的方式进行DOM的更新。</p><p>在Fiber中使用了双缓存技术，在React中至多会存在两颗Fiber树，当前屏幕显示内容对应的成为current FIber，正在内存中构建的成为workInProgress FIber。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [num, add] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> add(num + 1)&#125;&gt;&#123;num&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  )<br>&#125;<br><br>8ReactDOM.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>));<br><span class="hljs-comment">//流程</span><br><span class="hljs-comment">//mount</span><br><span class="hljs-number">1.</span>首次执行<span class="hljs-title class_">ReactDOM</span>.<span class="hljs-property">render</span>会创建fiberRoot和rootFiber。其中fiberRoot是整个应用的根节点，rootFiber是&lt;<span class="hljs-title class_">App</span>/&gt;所在组件树的根节点。<br><span class="hljs-number">12</span>之所以要区分fiberRoot与rootFiber，是因为在应用中我们可以多次调用<span class="hljs-title class_">ReactDOM</span>.<span class="hljs-property">render</span>渲染不同的组件树，他们会拥有不同的rootFiber。但是整个应用的根节点只有一个，那就是fiberRootNode。fiberRootNode的current会指向当前页面上已渲染内容对应<span class="hljs-title class_">Fiber</span>树，即current <span class="hljs-title class_">Fiber</span>树。<br><br><span class="hljs-number">2.</span>接下来进入render阶段，根据组件返回的<span class="hljs-variable constant_">JSX</span>在内存中依次创建<span class="hljs-title class_">Fiber</span>节点并连接在一起构建workInProgress <span class="hljs-title class_">Fiber</span>。（下图中右侧为workInProgress <span class="hljs-title class_">Fiber</span>，左侧为current <span class="hljs-title class_">Fiber</span>）<br>在构建workInProgress <span class="hljs-title class_">Fiber</span>树时会尝试复用current <span class="hljs-title class_">Fiber</span>树中已有的<span class="hljs-title class_">Fiber</span>节点内的属性，在首屏渲染时只有rootFiber存在对应的current fiber（即rootFiber.<span class="hljs-property">alternate</span>）。<br><br><span class="hljs-number">3.</span>图中右侧已构建完的workInProgress <span class="hljs-title class_">Fiber</span>在commit阶段渲染到页面。<br></code></pre></td></tr></table></figure><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=MDFiMTc5MDQ1OWFlNjY0NTNjZTYyMjljODljNGNmZjhfQnNQdTFrbUFNRkh5M1JLcTNGWXpxZmFwY0JFaEJOUmRfVG9rZW46Ym94Y25RWHQ5MUJGTkxwOVZNUWNsbUJzdjZjXzE2NzMwNjg3NDQ6MTY3MzA3MjM0NF9WNA"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//update</span><br><span class="hljs-number">1.</span>当点击p节点触发状态改变，会重新进行render并构建一个新的workInProgress  <span class="hljs-title class_">Fiber</span>并尽可能复用current <span class="hljs-title class_">Fiber</span>对应的节点数据。<br><span class="hljs-number">2.</span>workInProgress <span class="hljs-title class_">Fiber</span>在render阶段完成构建后进入commit阶段渲染到页面上。渲染完毕后，workInProgress <span class="hljs-title class_">Fiber</span>变为current <span class="hljs-title class_">Fiber</span>。<br></code></pre></td></tr></table></figure><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=YzRmMDkxNmRmYzUzYTYwMjVlYTg1OGJjZGI1MDM3YWNfWjJiRkd0c3ZDMGdoWlRiZGptYU42TEx3MGpVTklYdGtfVG9rZW46Ym94Y25GdFpCRnBBUmFVVjRSRTdNSUZZMDFlXzE2NzMwNjg3NDQ6MTY3MzA3MjM0NF9WNA"></p><h3 id="JSX与Fiber"><a href="#JSX与Fiber" class="headerlink" title="JSX与Fiber"></a>JSX与Fiber</h3><p>JSX是一种描述当前组件内容的数据结构，他不包含组件schedule、reconcile、render所需的相关信息。例如：</p><ul><li>组件更新中的优先级</li><li>组件的state</li><li>组件被打上的用于Renderer的标记</li></ul><p>在mount中，Reconciler根据JSX生成对应Fiber节点，在update中，Reconciler将JSX与Fiber节点保存的数据进行对比，生成新的FIber节点并根据结果为FIber打上标记。</p><h3 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h3><p>在React中，可以通过编写JS函数的形式来定义函数组件。它接受任意的入参props，并返回用于描述页面展示内容的React元素。</p><p>通过编写JS函数或者ES6的class来定义组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 函数组件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params">props</span>)=&gt;&#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>&#125;<br><span class="hljs-comment">// babel编译后</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = props =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;h1&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;hello world&quot;</span>);<br>&#125;;<br><span class="hljs-comment">// 类组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// babel编译后</span><br>16<span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;h1&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;hello world&quot;</span>);<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 被当做组件调用</span><br><span class="hljs-keyword">let</span> a = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#123;</span>&#x27;<span class="hljs-attr">App</span>&#x27;&#125;/&gt;</span></span>;<br><span class="hljs-comment">// babel编译后</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-title class_">App</span>, &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>那么React怎么区分类组件和函数式组件呢？</p><p>类组件的父类（Component）的原型上存在isReactComponent属性，而函数式组件不存在该属性。</p><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><ul><li>state的更新可能是异步的</li><li>出于性能考虑可能会把多个setState合并成一个进行更新（事件处理函数结束后进行批量更新）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 控制是否批量更新</span><br><span class="hljs-keyword">let</span> isBatchingUpdate = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">const</span> queue = []; <span class="hljs-comment">// 批量更新队列</span><br><span class="hljs-keyword">let</span> state = &#123; <span class="hljs-attr">number</span>: <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setState</span>(<span class="hljs-params">newState</span>) &#123;<br>  <span class="hljs-keyword">if</span> (isBatchingUpdate) &#123;<br>    queue.<span class="hljs-title function_">push</span>(newState);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    state = &#123; ...state, ...newState &#125;;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>  isBatchingUpdate = <span class="hljs-literal">true</span>;<br>  <span class="hljs-title function_">setState</span>(&#123; <span class="hljs-attr">number</span>: <span class="hljs-number">1</span> &#125;);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state);<br>  <span class="hljs-title function_">setState</span>(&#123; <span class="hljs-attr">number</span>: <span class="hljs-number">2</span> &#125;);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state);<br>  state = queue.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">newState, action</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123; ...newState, ...action &#125;;<br>  &#125;, state);<br>&#125;<br><span class="hljs-title function_">handleClick</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state);<br></code></pre></td></tr></table></figure><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p>React会将JSX中书写的事件绑定到document&#x2F;容器上，然后通过eventTarget的方式进行事件的触发。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 通过这样一个方法将事件绑定到document上</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">dispatchEvent</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-comment">// 事件类型 对应的真实dom</span><br>    <span class="hljs-keyword">let</span> &#123; type, target &#125; = event;<br>    <span class="hljs-keyword">const</span> eventType = <span class="hljs-string">`on<span class="hljs-subst">$&#123;type&#125;</span>`</span>;<br>    <span class="hljs-comment">// 此时为批量更新模式</span><br>    updateQueue.<span class="hljs-property">isBatchingUpdate</span> = <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">// 合成事件对象</span><br>    <span class="hljs-keyword">const</span> syntheticEvent = <span class="hljs-title function_">createSyntheticEvent</span>(event);<br>    <span class="hljs-comment">// 模拟冒泡</span><br>    <span class="hljs-keyword">while</span> (target) &#123;<br>        <span class="hljs-keyword">const</span> &#123; store &#125; = target;<br>        <span class="hljs-keyword">const</span> hanlder = store &amp;&amp; store[eventType];<br>        <span class="hljs-comment">// 将事件绑定到对应的dom元素上</span><br>        hanlder &amp;&amp; hanlder.<span class="hljs-title function_">call</span>(target, syntheticEvent);<br>        target = target.<span class="hljs-property">parentNode</span>;<br>    &#125;<br><br>    updateQueue.<span class="hljs-property">isBatchingUpdate</span> = <span class="hljs-literal">false</span>;<br>    updateQueue.<span class="hljs-title function_">batchUpdate</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p>React提供了一种方式，允许访问DOM节点或者render方法创建的React元素。原理就时先初始化一个ref元素{current:null}；然后在创建真实DOM的时候将current赋值为真实dom或者类组件的实例。</p><p>对于函数组件，由于执行后就会被销毁，不存在实例，因此需要使用其他方法获取到函数组件的ref（通过forwardRef包裹获取ref）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">1<span class="hljs-keyword">function</span> <span class="hljs-title function_">createDOM</span>(<span class="hljs-params">vdom</span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; type, props, ref &#125; = vdom;<br>    <span class="hljs-comment">//文本节点 和 普通节点 组件 分别处理</span><br>    <span class="hljs-keyword">let</span> dom;<br>    ... <span class="hljs-comment">// 根据节点类型 文本 原生元素 组件 创建DOM元素</span><br>    vdom.<span class="hljs-property">dom</span> = dom;<br>    <span class="hljs-comment">// 给ref赋值</span><br>    <span class="hljs-keyword">if</span> (ref) ref.<span class="hljs-property">current</span> = dom;<br>    <span class="hljs-keyword">return</span> dom;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li>old lifecycle</li><li>挂载<ul><li>constructor</li><li>componentWillMount</li><li>render</li><li>componentDidMount</li></ul></li><li>更新<ul><li>componentWillReceiveProps</li><li>shouldComponentUpdate</li><li>componentWillUpdate</li><li>render</li><li>componentDidUpdate</li></ul></li><li>卸载<ul><li>componentWillUnmount</li></ul></li></ul><p><img src="https://dpmmrrpt3p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZWNiNWM0YzFiYTk4MzliY2E3ZDMwMTU0ZWIxNGQ3ZTRfUDdzTFk0a0lSNlUzalpvWUY2eUZueXNNQTFvdnl1Yk9fVG9rZW46Ym94Y25PT0o1MkIzVXR1ejIwUTdEUjRlR0lkXzE2NzMwNjg3NDQ6MTY3MzA3MjM0NF9WNA"></p>]]></content>
    
    
    <categories>
      
      <category>Framework</category>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React表单实现</title>
    <link href="/jing-jiu/2022/03/05/Framework/React/%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/"/>
    <url>/jing-jiu/2022/03/05/Framework/React/%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="受控表单"><a href="#受控表单" class="headerlink" title="受控表单"></a>受控表单</h1><blockquote><p>状态变化交由<strong>React</strong>处理</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [value, setValue] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleChange</span> = (<span class="hljs-params">e</span>) =&gt; &#123; <span class="hljs-title function_">setValue</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>) &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">      alert(value);</span><br><span class="language-xml">    &#125;&#125;&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleChange&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>  )<br>&#125;;<br></code></pre></td></tr></table></figure><p>如上述代码，input框监听onChange方法，每当数据改变时调用setValue进行数据更新。</p><h1 id="非受控表单"><a href="#非受控表单" class="headerlink" title="非受控表单"></a>非受控表单</h1><blockquote><p>状态变化通过ref引用获取</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> input = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>)<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">      const data = input.current.value</span><br><span class="language-xml">      alert(data);</span><br><span class="language-xml">    &#125;&#125;&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;input&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>  )<br>&#125;;<br></code></pre></td></tr></table></figure><p>输入框的值不通过setState更新，而是从ref中获取。</p><h1 id="实现表单组件"><a href="#实现表单组件" class="headerlink" title="实现表单组件"></a>实现表单组件</h1><h2 id="了解使用方式"><a href="#了解使用方式" class="headerlink" title="了解使用方式"></a>了解使用方式</h2><blockquote><p>以ArcoDesign为例</p></blockquote><p>可以在**<code>Form.Item</code><strong>传入</strong> <code>field</code>**属性，即可使控件变为受控组件，表单项的值都将会被 <strong><code>Form</code></strong> 收集。</p><ol><li>受控模式下 <code>FormItem</code>会接管控件，自动给表单控件添加相应的 <code>value</code>和 <code>onChange</code>，所有的数据收集都由 <code>Form</code> 内部完成。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Form</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;(v)</span> =&gt;</span> &#123;</span><br><span class="language-xml">        console.log(v);</span><br><span class="language-xml">      &#125;&#125;</span><br><span class="language-xml">      style=&#123;&#123; width: 600 &#125;&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">FormItem</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&#x27;Username&#x27;</span> <span class="hljs-attr">field</span>=<span class="hljs-string">&#x27;name&#x27;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Input</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">FormItem</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">FormItem</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&#x27;Age&#x27;</span> <span class="hljs-attr">field</span>=<span class="hljs-string">&#x27;age&#x27;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">InputNumber</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">FormItem</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">FormItem</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;primary&#x27;</span> <span class="hljs-attr">htmlType</span>=<span class="hljs-string">&#x27;submit&#x27;</span>&gt;</span></span><br><span class="language-xml">          Submit</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">FormItem</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Form</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="useForm"><a href="#useForm" class="headerlink" title="useForm"></a>useForm</h3><ol><li>通过 <strong>useForm()</strong> 获取 <strong>formInstance</strong> 实例，form表单的数据也在实例上</li><li><strong>formInstance</strong> 实例对外提供了全局的方法如 <strong>setFieldsValue</strong> 、 <strong>getFieldsValue</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FormStore</span> &#123;<br>    <span class="hljs-comment">// 存储表单数据</span><br>    store = &#123;&#125;<br>    <span class="hljs-comment">// 获取单个字段值</span><br>    getFieldValue = <span class="hljs-function">(<span class="hljs-params">name</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">store</span>[name]<br>    &#125;<br>    <span class="hljs-comment">// 获取所有字段值</span><br>    getFieldsValue = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">store</span><br>    &#125;<br>    <span class="hljs-comment">// 设置字段的值</span><br>    setFieldsValue = <span class="hljs-function">(<span class="hljs-params">newStore</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 更新store的值</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">store</span> = &#123;<br>            ...<span class="hljs-variable language_">this</span>.<span class="hljs-property">store</span>,<br>            ...newStore,<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 提供FormStore实例方法</span><br>    getForm = <span class="hljs-function">() =&gt;</span> (&#123;<br>        <span class="hljs-attr">getFieldValue</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">getFieldValue</span>,<br>        <span class="hljs-attr">getFieldsValue</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">getFieldsValue</span>,<br>        <span class="hljs-attr">setFieldsValue</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">setFieldsValue</span>,<br>    &#125;);<br>&#125;<br><span class="hljs-comment">// 创建单例formStore</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useForm</span>(<span class="hljs-params">form</span>) &#123;<br>    <span class="hljs-keyword">const</span> formRef = <span class="hljs-title function_">useRef</span>();<br>    <span class="hljs-keyword">if</span> (!formRef.<span class="hljs-property">current</span>) &#123;<br>        <span class="hljs-keyword">if</span> (form) &#123;<br>            formRef.<span class="hljs-property">current</span> = form;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">const</span> formStore = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormStore</span>();<br>            formRef.<span class="hljs-property">current</span> = formStore.<span class="hljs-title function_">getForm</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> [formRef.<span class="hljs-property">current</span>]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h3><ol><li>将<strong>formInstance</strong>实例进行传递</li><li>然后渲染子节点</li></ol><p>创建公用的Context</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">FieldContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>(&#123;&#125;);<br></code></pre></td></tr></table></figure><p>阻止<strong>onSubmit</strong>默认事件，并执行Form的<strong>onSubmit</strong>方法，传入最新的表单数据，将<strong>formInstance</strong>实例传递下去。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Form</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; form, onSubmit, children, ...restProps &#125; = props;<br>    <span class="hljs-keyword">const</span> [formInstance] = <span class="hljs-title function_">useForm</span>(form) <span class="hljs-keyword">as</span> any;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span></span></span><br><span class="hljs-tag"><span class="language-xml">            &#123;<span class="hljs-attr">...restProps</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">                e.preventDefault()</span><br><span class="language-xml">                onSubmit(formInstance.getFieldsValue())</span><br><span class="language-xml">            &#125;&#125;&gt;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">FieldContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;formInstance&#125;</span>&gt;</span></span><br><span class="language-xml">                &#123;children&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">FieldContext.Provider</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="FormItem"><a href="#FormItem" class="headerlink" title="FormItem"></a>FormItem</h3><ol><li>调用<strong>cloneElement</strong>给子组件添加<strong>value</strong>和<strong>onChange</strong>的props</li><li>在<strong>onChange</strong>时调用<strong>setFieldsValue</strong>更新表单数据</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Item</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> context = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">FieldContext</span>);<br>    <span class="hljs-keyword">const</span> &#123; children &#125; = props;<br>    <span class="hljs-comment">// Field 中传进来的子元素变为受控组件，也就是主动添加上 value 和 onChange 属性方法</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">getControlled</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> &#123; field &#125; = props;<br>        <span class="hljs-keyword">const</span> &#123; getFieldValue, setFieldsValue &#125; = context<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">value</span>: <span class="hljs-title function_">getFieldValue</span>(field),<br>            <span class="hljs-attr">onChange</span>: <span class="hljs-function">(<span class="hljs-params">event: any</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">const</span> newValue = event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>                <span class="hljs-title function_">setFieldsValue</span>(&#123; [field]: newValue &#125;)<br>            &#125;,<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">cloneElement</span>(children, <span class="hljs-title function_">getControlled</span>())<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> useForm <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./useForm.js&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./App.css&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Form</span>, <span class="hljs-title class_">Item</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Form.tsx&#x27;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [form] = <span class="hljs-title function_">useForm</span>();<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Form</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">form</span>=<span class="hljs-string">&#123;form&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;(v)</span> =&gt;</span> &#123;</span><br><span class="language-xml">        console.log(v);</span><br><span class="language-xml">      &#125;&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Item</span> <span class="hljs-attr">field</span>=<span class="hljs-string">&quot;usename&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Item</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Item</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Form</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整体来看，使用useForm创建实例，通过这个实例存储表单数据，通过给子组件注入props实现收集数据的功能。这里仅做了一个简单实现，还有许多特性有待拓展。</p>]]></content>
    
    
    <categories>
      
      <category>Framework</category>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>组件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebRTC网络基础</title>
    <link href="/jing-jiu/2021/12/25/%E5%85%B6%E4%BB%96/WebRTC%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <url>/jing-jiu/2021/12/25/%E5%85%B6%E4%BB%96/WebRTC%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="WebRTC网络基础"><a href="#WebRTC网络基础" class="headerlink" title="WebRTC网络基础"></a>WebRTC网络基础</h1><h2 id="1-NAT协议"><a href="#1-NAT协议" class="headerlink" title="1.NAT协议"></a>1.NAT协议</h2><pre><code class="hljs">是将IP数据报头中的IP地址转换为另一个IP地址的过程。</code></pre><p>作用:</p><ol><li>在实际应用中，NAT主要用于实现私有网络访问公共网络的功能。这种通过使用少量的公网IP地址代表较多的私网IP地址的方式，将有助于减缓可用IP地址空间的枯竭。</li><li>出于安全考虑   外网想要攻击内网就需要经过网关  部分就会被过滤</li></ol><p>种类：</p><ul><li><p>完全锥型  无限制</p><p>内网主机建立一个UDP socket(LocalIP:LocalPort) 第一次使用这个socket给外部主机发送数据时NAT会给其分配一个公网(PublicIP:PublicPort),以后用这个socket向外面任何主机发送数据都将使用这对(PublicIP:PublicPort)。此外，任何外部主机只要知道这个(PublicIP:PublicPort)就可以发送数据给(PublicIP:PublicPort)，内网的主机就能收到这个数据包。</p><p>其在NAT上建立的内外网的映射表如下：</p><p>{</p><p>内网:IP,</p><p>内网端口,</p><p>映射的外网IP,</p><p>映射的外网端口</p><p>}</p><ul><li>C1，C2向STUN发消息</li><li>交换公网IP及端口</li></ul></li><li><p>地址限制型</p><p>内网主机建立一个UDP socket(LocalIP:LocalPort) 第一次使用这个socket给外部主机发送数据时NAT会给其分配一个公网(PublicIP:PublicPort),以后用这个socket向外面任何主机发送数据都将使用这对(PublicIP:PublicPort)。此外，如果任何外部主机想要发送数据给这个内网主机，只要知道这个(PublicIP:PublicPort)<strong>并且内网主机之前用这个socket曾向这个外部主机IP发送过数据</strong>。只要满足这两个条件，这个外部主机就可以用自己的**(IP,任何端口)**发送数据给(PublicIP:PublicPort)，内网的主机就能收到这个数据包。</p><p>其在NAT上建立的内外网的映射表如下：</p><p>{</p><p>内网:IP,</p><p>内网端口,</p><p>映射的外网IP,</p><p>映射的外网端口,</p><p>被访问主机的IP</p><p>}</p><ul><li>C1向C2发请求  C2通过C1发的请求返回数据</li><li>交换公网IP及端口 端口限制型类似</li></ul></li><li><p>端口限制型</p><p>内网主机建立一个UDP socket(LocalIP:LocalPort) 第一次使用这个socket给外部主机发送数据时NAT会给其分配一个公网(PublicIP:PublicPort),以后用这个socket向外面任何主机发送数据都将使用这对(PublicIP:PublicPort)。此外，如果任何外部主机想要发送数据给这个内网主机，只要知道这个(PublicIP:PublicPort)并且内网主机之前用这个socket曾向这个外部主机(IP,Port)发送过数据。只要满足这两个条件，这个外部主机就可以用自己的**(IP,Port)**发送数据给(PublicIP:PublicPort)，内网的主机就能收到这个数据包</p><p>其在NAT上建立的内外网的映射表如下：</p><p>{</p><p>内网:IP,</p><p>内网端口,</p><p>映射的外网IP,</p><p>映射的外网端口,</p><p>被访问主机的IP,</p><p>被访问主机的端口</p><p>}</p></li><li><p>对称型</p><p>内网主机建立一个UDP socket(LocalIP,LocalPort),当用这个socket第一次发数据给外部主机1时,NAT为其映射一个(PublicIP-1,Port-1),以后内网主机发送给外部主机1的所有数据都是用这个(PublicIP-1,Port-1)，如果内网主机同时用这个socket给外部主机2发送数据，第一次发送时，NAT会为其分配一个(PublicIP-2,Port-2), 以后内网主机发送给外部主机2的所有数据都是用这个(PublicIP-2,Port-2).如果NAT有多于一个公网IP，则PublicIP-1和PublicIP-2可能不同，如果NAT只有一个公网IP,则Port-1和Port-2肯定不同，也就是说一定不能是PublicIP-1等于 PublicIP-2且Port-1等于Port-2。此外，如果任何外部主机想要发送数据给这个内网主机，那么它首先应该收到内网主机发给他的数据，然后才能往回发送，否则即使他知道内网主机的一个(PublicIP,Port)也不能发送数据给内网主机，这种NAT无法实现UDP-P2P通信。</p><ul><li>端口猜测</li></ul></li><li><p>穿越组合</p><ul><li>端口受限  –&gt; 对称</li><li>对称 –&gt; 对称          二者无法打通</li></ul></li></ul><h2 id="2-STUN服务"><a href="#2-STUN服务" class="headerlink" title="2.STUN服务"></a>2.STUN服务</h2><pre><code class="hljs">(Simple Traversal of User Datagram Protocol (UDP) Through Network Address Translators (NATs))STUN(穿越NAT的简单UDP传输)服务器允许所有的NAT客户终端(如防火墙后边的计算机)与位于局区域网以外的VOIP服务商实现电话通话。其允许应用程序发现自己和公网之间的中间件类型，同时也能允许应用程序发现自己被NAT分配的公网IP。</code></pre><h3 id="协议内容"><a href="#协议内容" class="headerlink" title="协议内容"></a>协议内容</h3><ul><li><p>STUN header</p><p><img src="http://47.115.206.47/wp-content/uploads/2021/09/STUN.png" alt="img"></p><ul><li><p>2个字节类型</p></li><li><p>2个字节消息长度，不包括消息头</p></li><li><p>16个字节事务ID（128bit），请求与相应事务ID相同</p><p>STUN Message Type：</p><ol><li><p>最高的2位必须置零，这可以在当STUN和其他协议复用的时候，用来区分STUN包和其他协议数据包。</p></li><li><p>STUN Message Type 字段定义了消息的类型（ 请求&#x2F;成功响应&#x2F;失败响应&#x2F;指示）和消息的主方法。<br>虽然我们有4个消息类别，但在STUN中只有两种类型的事务，即请求&#x2F;响应类型和指示类型。响应类型分为成功和出错两种，用来帮助快速处理STUN信息。Message Type字段又可以进一步分解为如下结构：</p><p><img src="http://47.115.206.47/wp-content/uploads/2021/09/stun-message.png" alt="img"></p><p>MessageClass定义：0b00表示request，0b01表示indication，0b10表示success response，0b11表示error response</p></li><li><p>Message Length 字段存储了信息的长度，以字节为单位，不包括20字节的STUN头部。由于所有的STUN属性都是都是4字节对齐（填充）的，因此这个字段最后两位应该恒等于零，这也是辨别STUN包的一个方法之一。</p></li><li><p>Magic Cookie 字段包含固定值0x2112A442，<strong>这是为了前向兼容RFC3489，因为在RFC3489&#x2F;STUN中，这一区域是事务ID的一部分。另外选择固定数值也是为了服务器判断客户端是否能识别特定的属性。</strong>还有一个作用就是在协议多路复用时候也可以将其作为判断标志之一。（32位）</p></li><li><p>Transaction ID</p><p>字段是个96位的标识符，用来区分不同的STUN传输事务。</p><p>对于request&#x2F;response传输，事务ID由客户端选择，服务器收到后以同样的事务ID返回response；对于indication则由发送方自行选择。事务ID的主要功能是把request和response联系起来，同时也在防止攻击方面有一定作用。服务端也把事务ID当作一个Key来识别不同的STUN客户端，因此必须格式化且随机在0~2^(96-1)之间。重发同样的request请求时可以重用相同的事务ID，但是客户端进行新的传输时，必须选择一个新的事务ID。</p></li></ol></li></ul></li><li><p>STUN Message Body</p><ul><li>通常跟着0个或者多个属性，每个属性必须是TLV编码的（Type-Length-Value）</li></ul><p><img src="http://47.115.206.47/wp-content/uploads/2021/09/TLV.png" alt="img"></p></li></ul><h2 id="3-TURN服务"><a href="#3-TURN服务" class="headerlink" title="3.TURN服务"></a>3.TURN服务</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">TURN的全称为Traversal Using Relays around NAT，是STUN/RFC5389的一个拓展，主要添加了Relay功能。如果终端在NAT之后， 那么在特定的情景下，有可能使得终端无法和其对等端（peer）进行直接的通信，这时就需要公网的服务器作为一个中继， 对来往的数据进行转发。这个转发的协议就被定义为TURN。TURN和其他中继协议的不同之处在于，它允许客户端使用同一个中继地址（relay address） 与多个不同的peer进行通信。<br></code></pre></td></tr></table></figure><p><strong>整体流程</strong><br><img src="http://47.115.206.47/wp-content/uploads/2021/09/TRUN.png" alt="img"><br><strong>TURN Allocate</strong><br><img src="http://47.115.206.47/wp-content/uploads/2021/09/TRUN-Allocate.png" alt="img"></p><h2 id="4-NAT类型检测"><a href="#4-NAT类型检测" class="headerlink" title="4.NAT类型检测"></a>4.NAT类型检测</h2><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">有一个公网的Server并且绑定了两个公网IP(IP-1,IP-2)。这个Server做UDP监听(IP-1,Port-1),(IP-2,Port-2)并根据客户端的要求进行应答。<br></code></pre></td></tr></table></figure><h3 id="为什么使用UDP协议"><a href="#为什么使用UDP协议" class="headerlink" title="为什么使用UDP协议"></a>为什么使用UDP协议</h3><pre><code class="hljs">因为UDP是无连接协议，只要你发送数据给他，他就可以收到，而TCP需要建立连接</code></pre><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><pre><code class="hljs">客户端发送ECHO请求给服务端  客户端等待服务端返回数据</code></pre><p><img src="http://47.115.206.47/wp-content/uploads/2021/09/NAT%E6%89%93%E6%B4%9E%E6%AD%A5%E9%AA%A4.png" alt="NAT打洞步骤"></p><h2 id="5-ICE框架"><a href="#5-ICE框架" class="headerlink" title="5.ICE框架"></a>5.ICE框架</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">webrtc就是通过 ICE 这套框架来处理复杂的网络环境的。<br>如果想启用这个功能,你必须让你的应用程序传 ICE 服务器的URL：<br>ICE试着找最好的路径来让客户端建立连接,他会尝试所有可能的选项,然后选择最合适的方案。<br>ICE首先尝试P2P连接（STUN）,如果失败就会通过TURN服务器进行转接。<br></code></pre></td></tr></table></figure><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h4 id="1-ICE-的角色"><a href="#1-ICE-的角色" class="headerlink" title="1. ICE 的角色"></a>1. ICE 的角色</h4><p>   分为 controlling和controlled。</p><p>   offer 一方为controlling角色，answer一方为controlled角色。</p><h4 id="2-ICE的模式"><a href="#2-ICE的模式" class="headerlink" title="2. ICE的模式"></a>2. ICE的模式</h4><p>   分为FULL ICE和Lite ICE：</p><p>   FULL ICE:是双方都要进行连通性检查，完成的走一遍流程。</p><p>   Lite ICE: 在FULL ICE和Lite ICE互通时，只需要FULL ICE一方进行连通性检查， Lite一方只需回应response消息。这种模式对于部署在公网的设备比较常用。</p><h4 id="3-ICE-Candidate"><a href="#3-ICE-Candidate" class="headerlink" title="3. ICE Candidate"></a>3. ICE Candidate</h4><p>   媒体传输的候选地址（包括协议，ip，端口，类型），组成candidate pair做连通性检查，确定传输路径。（ICE主要收集Candidate 对Candidate pair做排序 以及连通性）</p><ul><li>主机候选者（本机的）</li><li>映射候选者（NAT映射的）</li><li>中继候选者（TURN服务器开通的）</li></ul><h4 id="4-Componet-ID"><a href="#4-Componet-ID" class="headerlink" title="4.  Componet ID"></a>4.  Componet ID</h4><p>   传输媒体的类型,1代表RTP;2代表 RTCP。</p><p>   WebRTC采用Rtcp-mux方式，也就是RTP和RTCP在同一通道内传输，减少ICE的协商和通道的保活。</p><h4 id="5-Type"><a href="#5-Type" class="headerlink" title="5. Type"></a>5. Type</h4><p>（Host&#x2F;Srvflx&#x2F;Relay&#x2F;Prflx）</p><h4 id="6-Checklist"><a href="#6-Checklist" class="headerlink" title="6. Checklist"></a>6. Checklist</h4><p>由candidate pair生成按优先级排序的链表,用于ICE连通性检查。</p><h4 id="7-Validlist"><a href="#7-Validlist" class="headerlink" title="7. Validlist"></a>7. Validlist</h4><p>由连通性检查成功的candidate pair按优先级排序的链表,用于ICE提名和选择最终路径。</p><h4 id="8-Base"><a href="#8-Base" class="headerlink" title="8. Base"></a>8. Base</h4><p>   是指候选者的基础地址（Srvflx address 的base 是本地host address。</p><p>   host address和 relayed address 的base 是自身。）</p><h4 id="9-SDP协议"><a href="#9-SDP协议" class="headerlink" title="9. SDP协议"></a>9. SDP协议</h4><blockquote><p>是一种通用的会话描述协议，主要用来描述多媒体会话，用途包括会话声明、会话邀请、会话初始化等。</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs routeros">SDP的每行都是&lt;type&gt;=&lt;value&gt;的形式<br><br><span class="hljs-attribute">v</span>=0    协议版本号<br><br><span class="hljs-attribute">o</span>=alice 2890844526 2890844526 <span class="hljs-keyword">IN</span> IP4 host.anywhere.com 会话发起者<br>其中<span class="hljs-attribute">o</span>=&lt;username&gt; &lt;sess-id&gt; &lt;sess-version&gt; &lt;nettype&gt; &lt;addrtype&gt; &lt;unicast-address&gt;<br>username：发起者的用户名，不允许存在空格，如果应用不支持用户名，则为-。<br>sess-id：会话id，由应用自行定义，规范的建议是NTP(Network Time Protocol)时间戳。<br>sess-version：会话版本，用途由应用自行定义，只要会话数据发生变化时（比如编码），sess-version随着递增就行。同样的，规范的建议是NTP时间戳。<br>nettype：网络类型，比如<span class="hljs-keyword">IN</span>表示Internet。<br>addrtype：地址类型，比如IP4、IV6<br>unicast-address：域名，或者IP地址。<br><br>s=会话名（不能为空  可以赋一个空格）<br><br><span class="hljs-attribute">c</span>=IN IP4 host.anywhere.com  <br>连接数据 <span class="hljs-attribute">c</span>=&lt;nettype&gt; &lt;addrtype&gt; &lt;connection-address&gt;<br>nettype：网络类型，比如<span class="hljs-keyword">IN</span>，表示 Internet。<br>addrtype：地址类型，比如IP4、IP6。<br>connection-address：如果是广播，则为广播地址组；如果是单播，则为单播地址；<br><br><span class="hljs-attribute">t</span>=0 0<br>时间  作用：声明会话的开始、结束时间。 <span class="hljs-attribute">t</span>=&lt;start-time&gt; &lt;stop-time&gt;<br><br><span class="hljs-attribute">m</span>=audio 49170 RTP/AVP 0<br>媒体描述  <span class="hljs-attribute">m</span>=&lt;media&gt; &lt;port&gt; &lt;proto&gt; &lt;fmt&gt; <span class="hljs-built_in">..</span>.<br>media：媒体类型。包括 video、audio、text、application、message等。<br>port：传输媒体流的端口，具体含义取决于使用的网络类型（在<span class="hljs-attribute">c</span>=中声明）和使用的协议(proto，在m=中声明)。<br>proto：传输协议，具体含义取决于<span class="hljs-attribute">c</span>=中定义的地址类型，比如c=是IP4，那么这里的传输协议运行在IP4之上。比如：<br>    UDP：传输层协议是UDP。<br>    RTP/AVP：针对视频、音频的RTP协议，跑在UDP之上。<br>    RTP/SAVP：针对视频、音频的SRTP协议，跑在UDP之上。<br>fmt：媒体格式的描述，可能有多个。根据 proto 的不同，fmt 的含义也不同。比如 proto 为 RTP/SAVP 时，fmt 表示 RTP payload 的类型。如果有多个，表示在这次会话中，多种payload类型可能会用到，且第一个为默认的payload类型。<br>例如：<span class="hljs-attribute">m</span>=video 9 UDP/TLS/RTP/SAVPF 122 102 100 101 124 120 123 119<br><br><span class="hljs-attribute">a</span>=rtpmap:0 PCMU/8000<br>附加属性 作用：用于扩展SDP。<br>作用：用于扩展SDP。<br><br>有两种作用范围：会话级别(session-level)、媒体级别（media-level）。<br>媒体级别：媒体描述（<span class="hljs-attribute">m</span>=）后面可以跟任意数量的 a= 字段，对媒体描述进行扩展。<br>会话级别：在第一个媒体字段(media field)前，添加的 a= 字段是会话级别的。<br>有如下两种格式：<br><span class="hljs-attribute">a</span>=&lt;attribute&gt;    <span class="hljs-attribute">a</span>=recvonly<br><span class="hljs-attribute">a</span>=&lt;attribute&gt;:&lt;value&gt;   <span class="hljs-attribute">a</span>=rtpmap:0 PCMU/8000<br><br><span class="hljs-attribute">m</span>=video 51372 RTP/AVP 31<br><br><span class="hljs-attribute">a</span>=rtpmap:31 H261/90000<br><br><span class="hljs-attribute">m</span>=video 53000 RTP/AVP 32<br><br><span class="hljs-attribute">a</span>=rtpmap:32 MPV/90000<br></code></pre></td></tr></table></figure><h3 id="ICE过程"><a href="#ICE过程" class="headerlink" title="ICE过程"></a>ICE过程</h3><h4 id="1-Gather-candidates"><a href="#1-Gather-candidates" class="headerlink" title="1. Gather candidates"></a>1. Gather candidates</h4><p>根据Componet ID获取所有候选者  同时生成foundation foundation是用于判断candiadate是否相同</p><h4 id="2-删除重复的候选者"><a href="#2-删除重复的候选者" class="headerlink" title="2. 删除重复的候选者"></a>2. 删除重复的候选者</h4><p>如果两个候选者地址，Base地址一样 则删除</p><h4 id="3-交换candidates"><a href="#3-交换candidates" class="headerlink" title="3. 交换candidates"></a>3. 交换candidates</h4><p>   ICE使用offer&#x2F;answer的方式，双方通过SDP协商交换candidates信息。</p><p>   Candidate信息包括type,foundation,base,component id,transport。</p><p>   SDP a行格式如下:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span>=candidate:<span class="hljs-number">1</span> <span class="hljs-number">1</span> UDP <span class="hljs-number">9654321</span> <span class="hljs-number">212.223.223.223</span> <span class="hljs-number">12345</span> typ srflx raddr <span class="hljs-number">10.216.33.9</span> rport <span class="hljs-number">54321</span><br></code></pre></td></tr></table></figure><p>   表示 foundation为1，媒体是RTP，采用UDP协议，公网映射地址为212.223.223.223:12345，优先级为9654321，type为srflx，base地址为10.216.33.9:54321。</p><h4 id="4-生成candidate-pairs"><a href="#4-生成candidate-pairs" class="headerlink" title="4. 生成candidate pairs"></a>4. 生成candidate pairs</h4><p>   在本端收到远端candidates后，将Component ID和transport protocol相同的candidates组成pair。<br>   修整candidate pair，如果是srvflx地址，则需要用其base地址替换。<br>   对端也是同样的流程。</p><h4 id="5-生成checklist"><a href="#5-生成checklist" class="headerlink" title="5. 生成checklist"></a>5. 生成checklist</h4><p>将candidate pairs按照优先级排序，生成checklist，供连通性检查使用</p><h4 id="6-连通性检查"><a href="#6-连通性检查" class="headerlink" title="6. 连通性检查"></a>6. 连通性检查</h4><p>   Ordinary checks 两端都按照各自checklist分别进行检查。</p><p>   Triggered checks 收到对端的检查时，也在对应的candidate pair上发起连通性检查，以提高效率</p><p>   如果checklist里有relay candidate，则必须首先为relay candidate创建permission。</p><h4 id="7-发送连通性检查请求"><a href="#7-发送连通性检查请求" class="headerlink" title="7. 发送连通性检查请求"></a>7. 发送连通性检查请求</h4><h4 id="8-生成validlist"><a href="#8-生成validlist" class="headerlink" title="8. 生成validlist"></a>8. 生成validlist</h4><h4 id="9-提名candidate-pair"><a href="#9-提名candidate-pair" class="headerlink" title="9. 提名candidate pair"></a>9. 提名candidate pair</h4><h4 id="10-选择最终传输地址"><a href="#10-选择最终传输地址" class="headerlink" title="10. 选择最终传输地址"></a>10. 选择最终传输地址</h4><h2 id="网络协议分析-（tcpdump-与-wireshark）"><a href="#网络协议分析-（tcpdump-与-wireshark）" class="headerlink" title="网络协议分析 （tcpdump 与 wireshark）"></a>网络协议分析 （tcpdump 与 wireshark）</h2><h3 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h3><pre><code class="hljs">tcpdump tcp -i eth1 -t -s 0 -c 100 and dst port ! 22 and src net 192.168.1.0/24 -w ./target.cap其中：tcp: ip icmp arp rarp 和 tcp、udp、icmp这些选项等都要放到第一个参数的位置，用来过滤数据报的类型-i eth1 : 只抓经过接口eth1的包-t : 不显示时间戳-s 0 : 抓取数据包时默认抓取长度为68字节。加上-S 0 后可以抓到完整的数据包-c 100 : 只抓取100个数据包dst port ! 22 : 不抓取目标端口是22的数据包src net 192.168.1.0/24 : 数据包的源网络地址为192.168.1.0/24-w ./target.cap : 保存成cap文件，方便用ethereal(即wireshark)分析</code></pre><h3 id="搭建TRUN服务器"><a href="#搭建TRUN服务器" class="headerlink" title="搭建TRUN服务器"></a>搭建TRUN服务器</h3><h4 id="1-下载并安装libevent-2-0"><a href="#1-下载并安装libevent-2-0" class="headerlink" title="1. 下载并安装libevent-2.0"></a>1. 下载并安装libevent-2.0</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://github.com/downloads/libevent/libevent/libevent-<span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">21</span>-stable.tar.gz<br><span class="hljs-attribute">tar</span> zxvf libevent-<span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">21</span>-stable.tar.gz<br><span class="hljs-attribute">cd</span> libevent-<span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">21</span>-stable &amp;&amp; ./configure<br><span class="hljs-attribute">make</span> &amp;&amp; make install<br></code></pre></td></tr></table></figure><h4 id="2-下载编译安装coturn"><a href="#2-下载编译安装coturn" class="headerlink" title="2. 下载编译安装coturn"></a>2. 下载编译安装coturn</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/coturn/coturn<br><span class="hljs-built_in">cd</span> coturn <br>./configure <br>make <br>make install<br>查看是否安装成功<br><span class="hljs-built_in">which</span> turnserver<br></code></pre></td></tr></table></figure><h4 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3. 配置文件"></a>3. 配置文件</h4><p>   在&#x2F;usr&#x2F;local&#x2F;etc&#x2F;目录下有turnserver.conf.default，复制为turnserver.conf</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span><br>cp turnserver.conf.<span class="hljs-keyword">default</span> turnserver.conf<br></code></pre></td></tr></table></figure><p>   使用ifcongig查询网卡名称和内网地址</p><h4 id="4-生成签名证书"><a href="#4-生成签名证书" class="headerlink" title="4. 生成签名证书"></a>4. 生成签名证书</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">yum install openssl <br>openssl req -x509 -newkey rsa:<span class="hljs-number">2048</span> -keyout <span class="hljs-regexp">/etc/</span>turn_server_pkey.pem -out <span class="hljs-regexp">/etc/</span>turn_server_cert.pem -days <span class="hljs-number">99999</span> -nodes <br>生成的两个文件一般在<span class="hljs-regexp">/etc/</span>目录下<br></code></pre></td></tr></table></figure><h4 id="5-修改配置信息"><a href="#5-修改配置信息" class="headerlink" title="5. 修改配置信息"></a>5. 修改配置信息</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">relay-device</span>=eth0   #与前ifconfig查到的网卡名称一致<br><span class="hljs-attribute">listening-ip</span>=xxx    #内网IP<br><span class="hljs-attribute">listening-port</span>=3478<br><span class="hljs-attribute">tls-listening-port</span>=5349<br><span class="hljs-attribute">relay-ip</span>=xxx       #内网IP<br><span class="hljs-attribute">external-ip</span>=xxx    #公网IP<br><span class="hljs-attribute">relay-threads</span>=50<br>lt-cred-mech<br><span class="hljs-attribute">cert</span>=/etc/turn_server_cert.pem<br><span class="hljs-attribute">pkey</span>=/etc/turn_server_pkey.pem<br><span class="hljs-attribute">pidfile</span>=”/var/run/turnserver.pid”<br><span class="hljs-attribute">min-port</span>=49152<br><span class="hljs-attribute">max-port</span>=65535<br><span class="hljs-attribute">user</span>=hxh:123456    #用户名密码，创建IceServer时用<br></code></pre></td></tr></table></figure><h4 id="6-开启turnserver，执行命令"><a href="#6-开启turnserver，执行命令" class="headerlink" title="6. 开启turnserver，执行命令"></a>6. 开启turnserver，执行命令</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">turnserver -o -a -f <span class="hljs-attribute">-user</span>=zjf:123456 -r Guangdong<br></code></pre></td></tr></table></figure><h4 id="7-在阿里云后台的安全组规则中添加用到的端口，包括3478端口的tcp-x2F-udp"><a href="#7-在阿里云后台的安全组规则中添加用到的端口，包括3478端口的tcp-x2F-udp" class="headerlink" title="7. 在阿里云后台的安全组规则中添加用到的端口，包括3478端口的tcp&#x2F;udp"></a>7. 在阿里云后台的安全组规则中添加用到的端口，包括3478端口的tcp&#x2F;udp</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp">或者使用命令行<br>添加<br>firewall-cmd --zone=<span class="hljs-keyword">public</span> --<span class="hljs-keyword">add</span>-port=<span class="hljs-number">3478</span>/udp --permanent<br>firewall-cmd --zone=<span class="hljs-keyword">public</span> --<span class="hljs-keyword">add</span>-port=<span class="hljs-number">3478</span>/tcp --permanent<br>重新载入<br>firewall-cmd --reload<br>重启防火墙<br>systemctl restart firewalld<br></code></pre></td></tr></table></figure><h4 id="8-在浏览器中打开https-webrtc-github-io-samples-src-content-peerconnection-trickle-ice-进行验证"><a href="#8-在浏览器中打开https-webrtc-github-io-samples-src-content-peerconnection-trickle-ice-进行验证" class="headerlink" title="8. 在浏览器中打开https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/进行验证"></a>8. 在浏览器中打开<a href="https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/%E8%BF%9B%E8%A1%8C%E9%AA%8C%E8%AF%81">https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/进行验证</a></h4><p>如果返回relay类型的数据且最终为Done则说明测试成功<br>需要注意的是：在Chrome中测试虽然同样会返回relay数据但会报一些错误</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Note: errors from onicecandidateerror above are not neccessarily fatal. For example an IPv6 DNS lookup may fail but relay candidates can still be gathered via IPv4.<br>The server stun:47.115.206.47:3478 returned an error with code=701:<br>STUN server address is incompatible.<br>The server stun:stun.l.google.com:19302 returned an error with code=701:<br>STUN host lookup received error.<br></code></pre></td></tr></table></figure><p>但是在firfox中则不会存在这个问题，但无论如何均不影响使用。</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
      <category>WebRTC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RTP Media</title>
    <link href="/jing-jiu/2021/12/05/%E5%85%B6%E4%BB%96/RTP%20Media/"/>
    <url>/jing-jiu/2021/12/05/%E5%85%B6%E4%BB%96/RTP%20Media/</url>
    
    <content type="html"><![CDATA[<h1 id="RTP-Media"><a href="#RTP-Media" class="headerlink" title="RTP Media"></a>RTP Media</h1><blockquote><p>媒体控制以及数据统计</p></blockquote><h2 id="RTCRtpSender"><a href="#RTCRtpSender" class="headerlink" title="RTCRtpSender"></a>RTCRtpSender</h2><h3 id="getSenders"><a href="#getSenders" class="headerlink" title="getSenders()"></a>getSenders()</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">RTCPeerConnection方法getSenders()返回的数组RTCRtpSender对象，其中每一个代表负责发送一个磁道的数据的RTP发送者。发送方对象提供用于检查和控制轨道数据的编码和传输的方法和属性。<br>返回RTCRtpSender对象的数组，每个用于连接的轨道。如果连接上没有RTP发送者，则该数组为空。<br></code></pre></td></tr></table></figure><h3 id="getParmeters"><a href="#getParmeters" class="headerlink" title="getParmeters()"></a>getParmeters()</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">RTCRtpSender对象身上的一个方法。返回一个RTCRtpParameters对象，该对象描述 媒体编码和传输的当前配置<span class="hljs-built_in">track</span>。<br></code></pre></td></tr></table></figure><h3 id="setParmeters"><a href="#setParmeters" class="headerlink" title="setParmeters()"></a>setParmeters()</h3><pre><code class="hljs">将更改应用于RTCRtpSender配置。</code></pre><h3 id="RTCRtpSender-getStats"><a href="#RTCRtpSender-getStats" class="headerlink" title="RTCRtpSender.getStats()"></a>RTCRtpSender.getStats()</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">该RTCRtpSender方法getStats()异步请求一个 RTCStatsReport 对象，该对象提供有关 RTCPeerConnection 拥有发件人的传出流量的统计信息，并在结果可用时返回满足的对象。<br>接收一个RTCStatsReport包含收集到的统计信息的对象作为参数。<br>返回的 RTCStatsReport 累积所有使用发送的流 RTCRtpSender 的统计信息，以及这些流具有的任何依赖项的统计信息。<br></code></pre></td></tr></table></figure><h3 id="replaceTrack"><a href="#replaceTrack" class="headerlink" title="replaceTrack()"></a>replaceTrack()</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">用于切换音视频轨道。<br>通常需要在手机的后置摄像头和前置摄像头之间切换。使用replaceTrack()，可以为每个摄像机设置一个跟踪对象，并根据需要在两者之间切换。<br>新的track的kind必须与旧的track的kind相同（音频 - 音频 视频 - 视频）。<br></code></pre></td></tr></table></figure><h2 id="RTCRtpReceiver"><a href="#RTCRtpReceiver" class="headerlink" title="RTCRtpReceiver"></a>RTCRtpReceiver</h2>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
      <category>WebRTC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TensorFlow相关</title>
    <link href="/jing-jiu/2021/12/05/%E5%85%B6%E4%BB%96/TensorFlow/"/>
    <url>/jing-jiu/2021/12/05/%E5%85%B6%E4%BB%96/TensorFlow/</url>
    
    <content type="html"><![CDATA[<h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">机器学习是对能通过经验自动改进的计算机算法的研究。用数据或以往经验，以优化计算机程序的性能标准。<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">人工神经网络：一种运算模型（输入输出的映射），由大量节点（神经元）互相连接构成。<br>神经网络 = 输入层（不用于计算神经网络层数） + 隐藏层（若干） + 输出层<br>神经元 = &#123;<br><span class="hljs-code">权重:输入参数的权重,</span><br><span class="hljs-code">偏置:针对差异做出的调节,</span><br><span class="hljs-code">激活函数:用于添加一些非线性的变换</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">输入乘上权重+偏置 经过激活函数的到输出</span><br></code></pre></td></tr></table></figure><p><img src="C:\Users\14828\AppData\Roaming\Typora\typora-user-images\image-20210725134218513.png" alt="image-20210725134218513"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">神经网络训练:给大量的输入（特征）输出（标签），算出神经网络所有神经元的权重，偏置，然后给定输入可以算出新的输出。<br>eg:给1000组相亲对象的数据（特征）以及满意程度（标签），训练完后，给定新的相亲对象数据就可以判定该数据的满意程度。<br></code></pre></td></tr></table></figure><h2 id="训练神经网络"><a href="#训练神经网络" class="headerlink" title="训练神经网络"></a>训练神经网络</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 初始化<br>   随机生成一些权重和偏置。<br>   <br><span class="hljs-bullet">2.</span> 计算损失<br>   给定特征，计算出标签，得到与真实标签的误差。(损失函数)<br>   <br><span class="hljs-bullet">3.</span> 优化<br>   微调权重和和偏置，使损失降低。使用优化器（重复2，3使损失最小,<span class="hljs-strong">**从最后一层开始微调**</span>,梯度求导……）<br>   <br><span class="hljs-bullet">-</span> 前向传播<br>  将训练数据的特征送入网络，得到标签。<br>  <br><span class="hljs-bullet">-</span> [<span class="hljs-string">反向传播</span>](<span class="hljs-link">https://www.zhihu.com/question/24827633</span>)<br>  计算损失并优化。<br>  <br><span class="hljs-bullet">-</span> 计算损失(使用损失函数)<br></code></pre></td></tr></table></figure><h2 id="TensorFlowJS"><a href="#TensorFlowJS" class="headerlink" title="TensorFlowJS"></a>TensorFlowJS</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//Tensor:张量——向量和矩阵向更高维度的推广。（类似于多维数组）</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> tf <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@tensorflow/tfjs&quot;</span>;<br><span class="hljs-keyword">let</span> t0 = tf.<span class="hljs-title function_">tensor</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]);<br>t0.<span class="hljs-title function_">print</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(t0);<br><span class="hljs-keyword">let</span> t1 = tf.<span class="hljs-title function_">tensor</span>([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]]);<br>t1.<span class="hljs-title function_">print</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(t1);<br><span class="hljs-keyword">let</span> t2 = tf.<span class="hljs-title function_">tensor</span>([[[<span class="hljs-number">1</span>]]]);<br>t2.<span class="hljs-title function_">print</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(t2);<br><span class="hljs-comment">// 传统for循环</span><br><span class="hljs-keyword">let</span> input = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br><span class="hljs-keyword">let</span> w = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]];<br><span class="hljs-keyword">let</span> output = [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>];<br><span class="hljs-comment">// output = 所有指标的权重相乘之和</span><br><span class="hljs-comment">// 1*1+2*2+3*3+4*4,2*1+3*2+4*3+5*4……</span><br>w.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">i,index1</span>)=&gt;</span>&#123;<br>    input.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">j,index2</span>)=&gt;</span>&#123;<br>        output[index1] += i[index2]*j;<br>    &#125;)<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(output);<br><span class="hljs-comment">// tensor 进行n层for循环  dot() 点积  矩阵之间的运算</span><br><span class="hljs-comment">// 会对dot内的矩阵进行转置</span><br>tf.<span class="hljs-title function_">tensor</span>(w).<span class="hljs-title function_">dot</span>(tf.<span class="hljs-title function_">tensor</span>(input)).<span class="hljs-title function_">print</span>();<br>tf.<span class="hljs-title function_">dot</span>(w,input);<br></code></pre></td></tr></table></figure><h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">线性回归:利用数理统计中回归分析，来确定两种或以上变量相互依赖的定量关系的一种统计分析。（身高体重预测，房价预测等）<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 初始化神经网络模型<br><span class="hljs-bullet">2.</span> 为神经网络模型添加层<br><span class="hljs-bullet">3.</span> 设计层的神经元个数和inputShape（输入形状） <br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">均方误差（MSE 损失函数之一）<br></code></pre></td></tr></table></figure><p><img src="C:\Users\14828\AppData\Roaming\Typora\typora-user-images\image-20210725135533341.png" alt="image-20210725135533341"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">随机梯度下降法（SGD 优化器之一）<br><span class="hljs-code">SGD通常每次迭代一个样本 但在样本集数量过多的情况下会非常杂乱无章，因此在样本集数量非常多的情况下，使用小批量SGD。小批量 SGD 通常包含 10-1000 个随机选择的样本，可以减少 SGD 中的杂乱样本数量，但仍然比全批量更高效。</span><br><span class="hljs-code">我们随机选取选取初始值w，使用 梯度x学习效率 来确定到下一个点的位置，重复上述操作，逐渐接近最低点。但是要注意学习效率的选取秒如果学习效率太大他会在最低点的两侧反复横跳，反之速度太慢会耗费过长的时间。</span><br><span class="hljs-code">[代码示例](https://developers.google.cn/machine-learning/crash-course/fitter/graph)</span><br></code></pre></td></tr></table></figure><p><img src="C:\Users\14828\AppData\Roaming\Typora\typora-user-images\image-20210725143611993.png" alt="image-20210725143611993"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1.</span> 将训练数据转为<span class="hljs-title class_">Tensor</span><br><span class="hljs-keyword">let</span> inputs = tf.<span class="hljs-title function_">tensor</span>(xs);<br><span class="hljs-keyword">let</span> labels = tf.<span class="hljs-title function_">tensor</span>(ys);<br><span class="hljs-number">2.</span> 训练模型<br><span class="hljs-keyword">await</span> model.<span class="hljs-title function_">fit</span>(inputs,labels,&#123;<br>    <span class="hljs-attr">batchSize</span>:<span class="hljs-number">4</span>,<span class="hljs-comment">// </span><br>    <span class="hljs-attr">epochs</span>:<span class="hljs-number">100</span>,<br>    <span class="hljs-attr">callbacks</span>:tfvis.<span class="hljs-property">show</span>.<span class="hljs-title function_">fitCallbacks</span>(<br>        &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;训练过程&#x27;</span>&#125;,<br>        [<span class="hljs-string">&#x27;loss&#x27;</span>],<br>    )<br>&#125;)<br><span class="hljs-number">3.</span> 用tfvis可视化模型<br><span class="hljs-attr">callbacks</span>:tfvis.<span class="hljs-property">show</span>.<span class="hljs-title function_">fitCallbacks</span>(<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;训练过程&#x27;</span>&#125;,<br>    [<span class="hljs-string">&#x27;loss&#x27;</span>],<br>)<br></code></pre></td></tr></table></figure><h2 id="归一化"><a href="#归一化" class="headerlink" title="归一化"></a>归一化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//把大数量级特征转换成小数量级下，[0,1]或[-1,1]。</span><br><span class="hljs-keyword">let</span> inputMax = heights.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span> b-a)[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">let</span> inputMin = heights.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span> b-a)[heights.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>]<br><span class="hljs-keyword">let</span> labelMax = weights.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span> b-a)[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">let</span> labelMin = weights.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span> b-a)[weights.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">let</span> inputs = tf.<span class="hljs-title function_">tensor</span>(height).<span class="hljs-title function_">sub</span>(inputMin).<span class="hljs-title function_">div</span>(inputMax-inputMin);<br><span class="hljs-keyword">let</span> labels = tf.<span class="hljs-title function_">tensor</span>(weight).<span class="hljs-title function_">sub</span>(labelMin).<span class="hljs-title function_">div</span>(labelMax-labelMin);<br><span class="hljs-comment">// sub 矩阵减 div 矩阵除 mul 矩阵乘 add 矩阵加</span><br><span class="hljs-comment">// 需要预测的输入数据也需要归一化</span><br><span class="hljs-keyword">let</span> output = model.<span class="hljs-title function_">predict</span>(tf.<span class="hljs-title function_">tensor</span>([<span class="hljs-number">175</span>]).<span class="hljs-title function_">sub</span>(inputMin).<span class="hljs-title function_">div</span>(inputMax-inputMin));<br></code></pre></td></tr></table></figure><h2 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1.</span> 加载二分类数据集<br>tfvis.<span class="hljs-property">render</span>.<span class="hljs-title function_">scatterplot</span>(<br>&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;逻辑回归训练集&#x27;</span> &#125;,<br>&#123;<br>        <span class="hljs-attr">values</span>:[<br>        data.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">p</span>=&gt;</span>p.<span class="hljs-property">label</span> === <span class="hljs-number">1</span>),<br>        data.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">p</span>=&gt;</span>p.<span class="hljs-property">label</span> === <span class="hljs-number">0</span>)<br>]<br>    &#125;,<br>);<br>显示两种点需要在values如上设置<br><span class="hljs-number">2.</span> 定义带有激活函数的单个神经元<br><span class="hljs-number">3.</span> 训练模型并预测<br></code></pre></td></tr></table></figure><h2 id="Box–Muller-Transform"><a href="#Box–Muller-Transform" class="headerlink" title="Box–Muller Transform"></a>Box–Muller Transform</h2><p>直角坐标下:<br><img src="C:\Users\14828\AppData\Roaming\Typora\typora-user-images\image-20210726165758067.png" alt="直角坐标"></p><p>极坐标下:</p><p><img src="C:\Users\14828\AppData\Roaming\Typora\typora-user-images\image-20210726170058111.png" alt="极坐标"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">Box-Muller</span>](<span class="hljs-link">https://blog.csdn.net/weixin_41793877/article/details/84700875</span>)<br><span class="hljs-code">    do&#123;</span><br><span class="hljs-code">        // 生成-1~1之间的随机数  即极坐标下的某一点的坐标</span><br><span class="hljs-code">        v1 = 2*Math.random() - 1;</span><br><span class="hljs-code">        v2 = 2*Math.random() - 1;</span><br><span class="hljs-code">        s = v1 *v1 + v2*v2; //斜边的平方</span><br><span class="hljs-code">    &#125; while(s &gt; 1);</span><br><span class="hljs-code">    //如果s&gt;1就一直循环  当跳出循环则说明s&lt;1 确保s是在单位圆内</span><br><span class="hljs-code">Box-Muller公式 均值为0，方差为1 mean = 0 variance = 1</span><br><span class="hljs-code">let result = Math.sqrt(-2 * Math.log(s) / s)* v1;</span><br><span class="hljs-code">// 转成mean = mean variance为1的正态分布</span><br><span class="hljs-code">return mean + Math.sqrt(variance) * result;</span><br></code></pre></td></tr></table></figure><h2 id="多层神经网络"><a href="#多层神经网络" class="headerlink" title="多层神经网络"></a>多层神经网络</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">XOR模型 使用多层神经网络配合激活函数进行模型预测<br></code></pre></td></tr></table></figure><p><img src="C:\Users\14828\AppData\Roaming\Typora\typora-user-images\image-20210726211555115.png" alt="image-20210726211555115"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">其实没啥 就是根据需要预测数据选择神经元的个数以及隐藏层的层数。选取合适的激活函数——relu/sigmoid……<br><span class="hljs-keyword">let</span> model = tf.<span class="hljs-title function_">sequential</span>();<br><span class="hljs-comment">// 隐藏层</span><br>model.<span class="hljs-title function_">add</span>(tf.<span class="hljs-property">layers</span>.<span class="hljs-title function_">dense</span>(&#123;<br>    <span class="hljs-attr">units</span>:<span class="hljs-number">4</span>,<span class="hljs-comment">// 四个神经元</span><br>    <span class="hljs-attr">inputShape</span>:[<span class="hljs-number">2</span>],<br>    <span class="hljs-attr">activation</span>:<span class="hljs-string">&quot;relu&quot;</span> <span class="hljs-comment">// 用于非线性的激活函数</span><br>&#125;))<br><span class="hljs-comment">// 输出层</span><br>model.<span class="hljs-title function_">add</span>(tf.<span class="hljs-property">layers</span>.<span class="hljs-title function_">dense</span>(&#123;<br>    <span class="hljs-attr">units</span>:<span class="hljs-number">1</span>,<br>    <span class="hljs-attr">activation</span>:<span class="hljs-string">&quot;sigmoid&quot;</span> <span class="hljs-comment">// 输出0-1之间的概率</span><br>&#125;))<br>model.<span class="hljs-title function_">compile</span>(&#123;<br>    <span class="hljs-attr">loss</span>:tf.<span class="hljs-property">losses</span>.<span class="hljs-property">logLoss</span>,<br>    <span class="hljs-attr">optimizer</span>:tf.<span class="hljs-property">train</span>.<span class="hljs-title function_">adam</span>(<span class="hljs-number">0.1</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="多分类任务"><a href="#多分类任务" class="headerlink" title="多分类任务"></a>多分类任务</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">训练集（train）和验证集（test）<br><span class="hljs-code">当我们使用神经网络进行模型构建的时候，我们使用训练集进行训练，而验证集则是从训练集中抽取的部分典型的样本，在我们训练模型时，如果对训练集训练得出的损失较小而验证集却损失非常大，则说明当前神经网络模型存在问题需要改进。</span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">交叉熵损失函数<br><span class="hljs-code">交叉熵能够衡量同一个随机变量中的两个不同概率分布的差异程度，在机器学习中就表示为真实概率分布与预测概率分布之间的差异。交叉熵的值越小，模型预测效果就越好。</span><br></code></pre></td></tr></table></figure><p><img src="C:\Users\14828\AppData\Roaming\Typora\typora-user-images\image-20210727115411350.png" alt="image-20210727115411350"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">重排数据<br><span class="hljs-code">tf.util.shuffle(data);</span><br><span class="hljs-code">    随机排列提供给训练算法的样本的顺序。数据重排很重要，因为在训练期间，数据集通常会被拆分成较小的子集（称为批次），以用于训练模型。借助重排，每个批次可从分布的所有数据中获取各种数据。通过这样做，我们可以帮助模型：</span><br><span class="hljs-code">    -不学习纯粹依赖于数据输入顺序的东西</span><br><span class="hljs-code">    -对子组中的结构不敏感（例如，如果模型在训练的前半部分仅看到高马力汽车，可能会学习一种不适用于数据集其余部分的关系）。</span><br></code></pre></td></tr></table></figure><h2 id="欠拟合-x2F-过拟合"><a href="#欠拟合-x2F-过拟合" class="headerlink" title="欠拟合&#x2F;过拟合"></a>欠拟合&#x2F;过拟合</h2><p><img src="https://img-blog.csdn.net/20171102211431879?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMTgyNTQzODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">应对过拟合:<br>1.L1正则化<br><span class="hljs-code">我们经常听到这样的话：“L1正则化是为了产生稀疏矩阵”，L1正则化的实现是在loss函数后面添加一个权重绝对值之和的项，该和再乘以一个系数，这个系数就是L1正则化的系数。这样做可以使得一些权重的值为0，降低了模型的复杂度，从而控制过拟合。</span><br><span class="hljs-code">2.L2正则化(权重衰减)</span><br><span class="hljs-code">kernelRegularizer:tf.regularizers.l2(&#123;l2:1&#125;)</span><br><span class="hljs-code">L2正则化跟L1正则化的区别在于loss函数后加的是权重^2之和，该和再乘以一个系数，这个系数就是L2正则化的系数。这样做可以使得一些高次方项的权重为0，从而也降低了模型复杂度，控制了过拟合。以下是L2正则化的简单实现</span><br><span class="hljs-code">  return (w**2).sum()/2</span><br><span class="hljs-code">3.早停法</span><br><span class="hljs-code">早停是在训练过程中所采用的方法，在训练模型的时候观察验证集上的表现，如果验证集上的loss开始上升的时候，停止训练模型，从而阻止了模型进一步变得复杂</span><br><span class="hljs-code">4.丢弃法</span><br><span class="hljs-code">model.add(tf.layers.dropout(&#123; rate: 0.9 &#125;));</span><br><span class="hljs-code">丢弃法一般用于全连接神经网络，它指的是一些神经元不继续传递其值，从而活动的神经元的数量变少，减少了模型的复杂度。</span><br></code></pre></td></tr></table></figure><h2 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">与普通神经网络对比<br><span class="hljs-code">普通的神经网络如果要提取一个图片的特征。以一个200x200的图片为例，需要提取200x200x3 = 12000 个特征。</span><br><span class="hljs-code">卷积神经网络可以模拟人类的视觉处理流程，高效提取特征。</span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">卷积层<br><span class="hljs-code">卷积神经网络中每层卷积层由若干卷积单元组成，每个卷积单元的参数都是通过反向传播算法最佳化得到的。卷积运算的目的是提取输入的不同特征，第一层卷积层可能只能提取一些低级的特征如边缘、线条和角等层级，更多层的网路能从低级特征中迭代提取更复杂的特征。</span><br><span class="hljs-code">- 卷积运算</span><br><span class="hljs-code">通过卷积核（filter/kernel）对图片特征进行提取。</span><br></code></pre></td></tr></table></figure><p><img src="C:\Users\14828\AppData\Roaming\Typora\typora-user-images\image-20210728121819215.png" alt="image-20210728121819215"></p><p><img src="C:\Users\14828\AppData\Roaming\Typora\typora-user-images\image-20210728121908287.png" alt="image-20210728121908287"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mark">池化层<br>池化层夹在连续的卷积层中间， 用于压缩数据和参数的量，减小过拟合。简而言之，如果输入是图像的话，那么池化层的最主要作用就是压缩图像。<br>下采样层也叫池化层，其具体操作与卷积层的操作基本相同，只不过下采样的卷积核为只取对应位置的最大值、平均值等（最大池化、平均池化），即矩阵之间的运算规律不一样，并且不经过反向传播的修改。<br>池化层的作用:<br>1. invariance(不变性)，这种不变性包括translation(平移)，rotation(旋转)，scale(尺度)<br>2. 保留主要的特征同时减少参数(降维，效果类似PCA)和计算量，防止过拟合，提高模型泛化能力<br><br>A: 特征不变性，也就是我们在图像处理中经常提到的特征的尺度不变性，池化操作就是图像的resize，平时一张狗的图像被缩小了一倍我们还能认出这是一张狗的照片，这说明这张图像中仍保留着狗最重要的特征，我们一看就能判断图像中画的是一只狗，图像压缩时去掉的信息只是一些无关紧要的信息，而留下的信息则是具有尺度不变性的特征，是最能表达图像的特征。<br><br>B. 特征降维，我们知道一幅图像含有的信息是很大的，特征也很多，但是有些信息对于我们做图像任务时没有太多用途或者有重复，我们可以把这类冗余信息去除，把最重要的特征抽取出来，这也是池化操作的一大作用<br><br>(1) translation invariance：<br>这里举一个直观的例子(数字识别)，假设有一个16x16的图片，里面有个数字1，我们需要识别出来，这个数字1可能写的偏左一点(图1)，这个数字1可能偏右一点(图2)，图1到图2相当于向右平移了一个单位，但是图1和图2经过max pooling之后它们都变成了相同的8x8特征矩阵，主要的特征我们捕获到了，同时又将问题的规模从16x16降到了8x8，而且具有平移不变性的特点。图中的a（或b）表示，在原始图片中的这些a（或b）位置，最终都会映射到相同的位置。<br>(2) rotation invariance：<br>下图表示数字“0”的识别，第一张的“0”比较大，第二张的“0”进行了较小，相当于作了缩放，同样地，经过多次max pooling后具有相同的特征<br>池化层用的方法有Max pooling 和 average pooling，而实际用的较多的是Max pooling。这里就说一下Max pooling，其实思想非常简单。<br>对于每个2*2的窗口选出最大的数作为输出矩阵的相应元素的值，比如输入矩阵第一个2*2窗口中最大的数是6，那么输出矩阵的第一个元素就是6，如此类推。<br></code></pre></td></tr></table></figure><p><img src="https://images2015.cnblogs.com/blog/1093303/201704/1093303-20170430195106397-414671399.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-a08dae108e328b5bb0ce81ed15267e09_hd.jpg" alt="img"></p><p><img src="https://img2018.cnblogs.com/blog/1093303/201901/1093303-20190120113539659-455066516.gif" alt="img"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">全连接层 跟普通神经网络类似。<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">对训练好的模型进行评估<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> classNames = [<span class="hljs-string">&#x27;Zero&#x27;</span>, <span class="hljs-string">&#x27;One&#x27;</span>, <span class="hljs-string">&#x27;Two&#x27;</span>, <span class="hljs-string">&#x27;Three&#x27;</span>, <span class="hljs-string">&#x27;Four&#x27;</span>, <span class="hljs-string">&#x27;Five&#x27;</span>, <span class="hljs-string">&#x27;Six&#x27;</span>, <span class="hljs-string">&#x27;Seven&#x27;</span>, <span class="hljs-string">&#x27;Eight&#x27;</span>, <span class="hljs-string">&#x27;Nine&#x27;</span>];<br><span class="hljs-comment">//做出预测</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">doPrediction</span>(<span class="hljs-params">model, data, testDataSize = <span class="hljs-number">500</span></span>) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">IMAGE_WIDTH</span> = <span class="hljs-number">28</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">IMAGE_HEIGHT</span> = <span class="hljs-number">28</span>;<br>    <span class="hljs-keyword">const</span> testData = data.<span class="hljs-title function_">nextTestBatch</span>(testDataSize);<br>    <span class="hljs-keyword">const</span> testxs = testData.<span class="hljs-property">xs</span>.<span class="hljs-title function_">reshape</span>([testDataSize, <span class="hljs-variable constant_">IMAGE_WIDTH</span>, <span class="hljs-variable constant_">IMAGE_HEIGHT</span>, <span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">const</span> labels = testData.<span class="hljs-property">labels</span>.<span class="hljs-title function_">argMax</span>(-<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">const</span> preds = model.<span class="hljs-title function_">predict</span>(testxs).<span class="hljs-title function_">argMax</span>(-<span class="hljs-number">1</span>);<br>    testxs.<span class="hljs-title function_">dispose</span>();<br>    <span class="hljs-comment">//当使用WebGL后端时, tf.Tensor的内存必须以显式管理。这是因为WebGL不足以让tf.Tensor超出生命周期后内存被自动释放。您可以使用dispose方法或是tf.dispose方法用以释放tf.Tensor所占用的内存</span><br>    <span class="hljs-keyword">return</span> [preds, labels];<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//显示每个类的准确率</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">showAccuracy</span>(<span class="hljs-params">model</span>) &#123;<br>    <span class="hljs-keyword">let</span> data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MnistData</span>();<br>    <span class="hljs-keyword">await</span> data.<span class="hljs-title function_">load</span>();<br>    <span class="hljs-keyword">const</span> [preds, labels] = <span class="hljs-title function_">doPrediction</span>(model, data);<br>    <span class="hljs-comment">//在预测和标签之间计算每个类别精度。标签和预测中的每个值都应对应于某些输出类 返回每个对象数组，每个对象都有一个准确性和每个类的计数属性</span><br>    <span class="hljs-keyword">const</span> classAccuracy = <span class="hljs-keyword">await</span> tfvis.<span class="hljs-property">metrics</span>.<span class="hljs-title function_">perClassAccuracy</span>(labels, preds);<br>    <span class="hljs-keyword">const</span> container = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Accuracy&#x27;</span>, <span class="hljs-attr">tab</span>: <span class="hljs-string">&#x27;Evaluation&#x27;</span> &#125;;<br>    <span class="hljs-comment">//为分类任务评估呈现每类精度表</span><br>    tfvis.<span class="hljs-property">show</span>.<span class="hljs-title function_">perClassAccuracy</span>(container, classAccuracy, classNames);<br>    labels.<span class="hljs-title function_">dispose</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//显示混淆矩阵</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">showConfusion</span>(<span class="hljs-params">model</span>) &#123;<br>    <span class="hljs-keyword">let</span> data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MnistData</span>();<br>    <span class="hljs-keyword">await</span> data.<span class="hljs-title function_">load</span>();<br>    <span class="hljs-keyword">const</span> [preds, labels] = <span class="hljs-title function_">doPrediction</span>(model, data);<br>    <span class="hljs-keyword">const</span> confusionMatrix = <span class="hljs-keyword">await</span> tfvis.<span class="hljs-property">metrics</span>.<span class="hljs-title function_">confusionMatrix</span>(labels, preds);<br>    <span class="hljs-keyword">const</span> container = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Confusion Matrix&#x27;</span>, <span class="hljs-attr">tab</span>: <span class="hljs-string">&#x27;Evaluation&#x27;</span> &#125;;<br>    tfvis.<span class="hljs-property">render</span>.<span class="hljs-title function_">confusionMatrix</span>(container, &#123; <span class="hljs-attr">values</span>: confusionMatrix, <span class="hljs-attr">tickLabels</span>: classNames &#125;);<br>    labels.<span class="hljs-title function_">dispose</span>();<br>&#125;<br><span class="hljs-comment">//混淆矩阵与每个类的准确率相似，但会进一步细分以显示错误分类的模式。借助混淆矩阵，您可以了解模型是否对任何特定的类对感到困惑。</span><br></code></pre></td></tr></table></figure><h2 id="加载预训练模型"><a href="#加载预训练模型" class="headerlink" title="加载预训练模型"></a>加载预训练模型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js">在浏览器加载模型文件<br><span class="hljs-keyword">let</span> bin = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;bin&#x27;</span>);<br><span class="hljs-keyword">let</span> json = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;json&#x27;</span>);<br><span class="hljs-keyword">const</span> model = <span class="hljs-keyword">await</span> tf.<span class="hljs-title function_">loadLayersModel</span>(tf.<span class="hljs-property">io</span>.<span class="hljs-title function_">browserFiles</span>(<br>     [json.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>], bin.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>]]<br>));<br><br>后端直接加载模型<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Loading mobilenet..&#x27;</span>);<br><span class="hljs-comment">// Load the model.</span><br><span class="hljs-keyword">let</span> net = <span class="hljs-keyword">await</span> mobilenet.<span class="hljs-title function_">load</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Successfully loaded model&#x27;</span>);<br><span class="hljs-comment">// Make a prediction through the model on our image.</span><br><span class="hljs-keyword">const</span> imgEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;img&#x27;</span>);<br><span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> net.<span class="hljs-title function_">classify</span>(imgEl);<br>text.<span class="hljs-property">innerHTML</span> = result[<span class="hljs-number">0</span>].<span class="hljs-property">className</span>;<br><br><span class="hljs-keyword">let</span> imgFile = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;imgFile&#x27;</span>);<br><span class="hljs-keyword">let</span> img = <span class="hljs-keyword">await</span> <span class="hljs-title function_">file2img</span>(imgFile.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">const</span> input = tf.<span class="hljs-title function_">tidy</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> tf.<span class="hljs-property">browser</span>.<span class="hljs-title function_">fromPixels</span>(img)<br>        .<span class="hljs-title function_">toFloat</span>()<br>        .<span class="hljs-title function_">sub</span>(<span class="hljs-number">255</span> / <span class="hljs-number">2</span>)<br>        .<span class="hljs-title function_">div</span>(<span class="hljs-number">255</span> / <span class="hljs-number">2</span>)<br>        .<span class="hljs-title function_">reshape</span>([<span class="hljs-number">1</span>, <span class="hljs-number">224</span>, <span class="hljs-number">224</span>, <span class="hljs-number">3</span>]);<br>&#125;);<br><span class="hljs-keyword">let</span> pred = (<span class="hljs-keyword">await</span> model).<span class="hljs-title function_">predict</span>(input)<br><span class="hljs-keyword">const</span> index = pred.<span class="hljs-title function_">argMax</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">dataSync</span>()[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">let</span> text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;text&#x27;</span>);<br>text.<span class="hljs-property">innerHTML</span> = <span class="hljs-variable constant_">IMAGENET_CLASSES</span>[index];<br></code></pre></td></tr></table></figure><h2 id="迁移学习"><a href="#迁移学习" class="headerlink" title="迁移学习"></a>迁移学习</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1.加载模型并截断<br>2.构建神经网络<br>3，截断模型作为输入，神经网络作为输出<br><br><span class="hljs-strong">**在迁移学习完成之后，对模型进行使用（预测）时，其输入数据也是要经过截断模型进行处理，然后在将截断模型的输出作为输入传给迁移的模型。**</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
      <category>TensorFlow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TensorFlow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebRTC相关</title>
    <link href="/jing-jiu/2021/12/05/%E5%85%B6%E4%BB%96/WebRTC/"/>
    <url>/jing-jiu/2021/12/05/%E5%85%B6%E4%BB%96/WebRTC/</url>
    
    <content type="html"><![CDATA[<h2 id="一-浏览器中的协议栈"><a href="#一-浏览器中的协议栈" class="headerlink" title="一.浏览器中的协议栈"></a>一.浏览器中的协议栈</h2><blockquote><p>左侧为http协议的协议栈，右侧为WebRTC协议栈</p></blockquote><p><img src="http://47.115.206.47/wp-content/uploads/2021/09/%E5%8D%8F%E8%AE%AE%E6%A0%88.png" alt="img"></p><h3 id="1-http相关协议栈"><a href="#1-http相关协议栈" class="headerlink" title="1.http相关协议栈"></a>1.http相关协议栈</h3><ul><li>API层：提供了XHR、SSE、WebSocket</li><li>应用层：提供了http1.x&#x2F;2.0https协议</li><li>会话层：使用了TLS协议（可选），对于https需要这个协议，对于http并不需要</li><li>传输层：底层使用TCP传输，流传输</li><li>网络层：IP协议</li></ul><h3 id="2-WebRTC协议栈"><a href="#2-WebRTC协议栈" class="headerlink" title="2.WebRTC协议栈"></a>2.WebRTC协议栈</h3><ul><li>API层：提供了RTCPeerConnection和DataChannel</li><li>应用层：对于PeerConnection使用了SRTP协议，对于DataChannel使用了SCTP协议（流控传输协议）</li><li>会话层：使用了DTLS协议（仿照TLS），对于SRTP可选，对于SCTP为必须</li><li>链路检测层：ICE&#x2F;STUN&#x2F;TURN检测端到端之间的通路，进行连通性检测</li><li>传输层：底层使用UDP传输，报文传输</li><li>网络层：IP协议</li></ul><h2 id="二-WebRTC传输协议分析"><a href="#二-WebRTC传输协议分析" class="headerlink" title="二.WebRTC传输协议分析"></a>二.WebRTC传输协议分析</h2><h3 id="1-RTP-x2F-SRTP"><a href="#1-RTP-x2F-SRTP" class="headerlink" title="1. RTP&#x2F;SRTP"></a>1. RTP&#x2F;SRTP</h3><blockquote><p>区别在于传输内容是否加密，同样对于RTCP&#x2F;SRTCP一样。如下图（前12字节固定 + (0~15)个32位的CSRC标识符）</p></blockquote><p><img src="http://47.115.206.47/wp-content/uploads/2021/09/rtp.png" alt="img"></p><p>其中：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown">V (2bits)：   RTP协议的版本号，当前协议版本号为2。<br>P (1bit)：    填充标志，如果设置填充位P=1，在包尾将包含附加填充字节，它不属于有效载荷。填充的最后一个八进制包含应该忽略的八进制计数。某些加密算法需要固定大小的填充字节，或为在底层协议数据单元中携带几个RTP包。<br>X (1bit)：    扩展标志，如果X=1，则在RTP报头后跟有一个扩展报头<br>CC(4bits):     CSRC计数器，指示CSRC 标识符的个数。<br><br>Ｍ (1bit)：    标记位（不同载荷含义不同，视频标记一帧的最后一个分片slice则=1,其他=0）标识帧边界<br>PT (7bits)：    载荷类型RTP<span class="hljs-emphasis">_PAYLOAD_</span>RTSP,记录后面资料使用哪种 Codec ， receiver 端找出相应的 decoder 解碼出來。例如H264=96---用于区分不同的编解码器<br>序列号(16bits)： 用于标识发送者所发送的 RTP 报文的序列号（初始值随机），每发送一个报文，序号增加 1<br><br>时间戳(32bits)： 时间戳反映了该 RTP 报文的第一个八位组的采样时刻。 接受者使用时间戳来计算延迟和抖动， 并进行同步控制。如果帧分包后，如何组合？通过时间戳和序列号判断，同一个帧的timestamp相同，并且序列号连续。还可以通过M标记位<br>SSRC(32bits):  区分是在和谁通信。值随机选择，参加同一视频会议的两个同步信源的SSRC要相同。音视频源各有自己的ssrc，如果已经存在一个SSRC，则后面产生的不允许重复，后面的需要重新更改SSRC<br><br>贡献源(CSRC)标识符(32bits)：每个CSRC标识符占32位，可以有0～15个。每个CSRC标识了包含在该RTP报文有效载荷中的所有特约信源。<br>应用场景：多路混音、混流时使用，多人通信时，将音频进行混音后，其贡献者有多人，每一个的ssrc都放入一个CSRC当中去<br></code></pre></td></tr></table></figure><h3 id="2-RTP-x2F-RTCP"><a href="#2-RTP-x2F-RTCP" class="headerlink" title="2. RTP&#x2F;RTCP"></a>2. RTP&#x2F;RTCP</h3><blockquote><p>RTP协议定义流媒体数据在互联网上传输的数据包格式，而RTCP协议则负责可靠传输、流量控制和拥塞控制等服务质量保证。</p></blockquote><h3 id="3-DTLS"><a href="#3-DTLS" class="headerlink" title="3. DTLS"></a>3. DTLS</h3><blockquote><p>在对SRTP&#x2F;SRTCP数据进行加密之前，需要对证书进行检测，算法协商，通过DTLS实现。</p></blockquote><p>DTLS协议在UDP提供的socket之上实现了客户机与服务器双方的握手连接，并且在握手过程中通过使用PSK或ECC实现了加密，并且利用cookie验证机制和证书实现了通信双方的身份认证，并且用在报文段头部加上序号，缓存乱序到达的报文段和重传机制实现了可靠传送。</p><p>大体来说分成三个过程：明文通信过程、非对成加密通信过程、对称加密通信过程；</p><ol><li><p>明文通信过程：在通信两端首次向对方发送 Hello 消息时，由于双方都没有协商好要使用哪种加密方式，因此这个过程中的消息都是使用明文进行发送的。<br>a. Client Hello：客户端首先向服务端发起握手，在握手消息中告诉对方自己支持的 SSL&#x2F;TLS 版本、加密套件（包括非对称加密时使用的算法与、非对称加密时使用的算法、产生密钥的伪随机函数 PRF）与数据压缩算法（TLS1.3之后就已经没有这个字段）等；还会携带一个 Session ID，因为握手流程的开销比较大，使用 Session ID 可以在下一次与 TLS 握手的过程跳过后续繁琐的握手流程，重用之前的握手结果（如版本号、加密算法套件、master-key 等）；并产生一个随机数 A，也告诉给对方；</p><p>b. Server Hello：服务端响应一个 Server Hello 消息，携带协商出来的 TLS&#x2F;SSL 版本号、加密套件和数据压缩算法，如果服务端同意客户端重用上次的会话，就返回一个相同的 Session ID，否则就填入一个全新的 Session ID；</p><p>c. Server Certificate（可选）：携带服务端数字证书（CA）以验证服务端身份，里面携带了服务端非对称加密所使用的公钥；这步虽然是可选的，但是一般来说客户端都会要求验证服务端的身份，在大多数情况下这步都会执行；</p><p>d. Server Key Exchange（可选）：在使用某些非对称加密算法（例如 DH 算法）的情况下，Server Certificate 里的信息是不足够的，或者 Server Certificate 在某些通信过程中直接被省略了（没有验证服务端身份），需要 Server Key Exchange 里的额外信息来帮助客户端生成 pre-master key；</p><p>e. Client Sertificate Request（可选）：在有些安全性要求高的场景，例如银行支付等，不仅需要验证服务端的身份，还需要验证客户端的身份，这时候服务端就会要求客户端提供客户端的身份证书；</p><p>f. Server Hello Done：表明 Server Hello 结束；</p><p>g. Client Certificate（可选）：如果服务端要求客户端提供数字证书以验证身份，则客户端发送自己的身份证书给服务端；</p></li><li><p>非对称加密通信过程：由于非对称加密通信的性能较差，在实际的通信过程中其实使用的是对称加密通信，为了保证对称加密通信过程的安全性，也就是需要避免对称加密密钥被窃取，这个密钥在协商过程中使用非对称加密来进行加密。</p><p>a. Client Key Exchange：客户端在验证服务端的身份证书后，会取出其中的服务端公钥，产生一个随机数 C，作为 pre-master key，在本地使用之前的随机数 A、B 和这次生成的 C 共同生成对称加密密钥 master-key；使用服务端公钥对 pre-master key 加密后发送给服务端；</p><p>b. Certificate Verify（可选）：如果服务端要求客户端提供客户端证书，那么客户端在发送 Client Key Exchange 之后必须马上发送 Certificate Verify，其中的内容是客户端使用自己的私钥加密的一段数据，提供给服务端用客户端的公钥来进行解密验证。之所以需要这一步是为了确保客户端发送的证书确实是它自己的证书；</p><p>c. Client Change Cipher Spec：提示服务端随后使用 master key 来进行对称加密通信；</p><p>d. Client Handshake Finished: 表明客户端侧 SSL&#x2F;TLS 握手结束；</p><p>e. Server Change Cipher Spec：提示客户端随后使用 master key 来进行对称加密通信；</p><p>f. Server Handshake Finished：表明服务端侧 SSL&#x2F;TLS 握手结束；</p></li><li><p>对称加密通信过程：通过上述握手过程协商出对称加密算法及使用的对称加密密钥之后，随后的通信过程，也就是实际的应用通信过程，都使用的是对称加密。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
      <category>WebRTC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>媒体协商技术</title>
    <link href="/jing-jiu/2021/12/05/%E5%85%B6%E4%BB%96/%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86%E6%8A%80%E6%9C%AF/"/>
    <url>/jing-jiu/2021/12/05/%E5%85%B6%E4%BB%96/%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="媒体协商技术"><a href="#媒体协商技术" class="headerlink" title="媒体协商技术"></a>媒体协商技术</h1><blockquote><p>WebRTC通过ICE技术可以实现客户端P2P连接，但是在两端进行P2P连接前还需要先进行媒体协商。WebRTC媒体协商技术主要包括两部分：一部分是SDP（Session Description Protocol）协议，另一部分是JSEP（JavaScript Session Establishment Protocol）协议。 &gt;</p></blockquote><h2 id="SDP协议"><a href="#SDP协议" class="headerlink" title="SDP协议"></a>SDP协议</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">SDP协议，即会话描述协议，它提供一种描述实时音视频通信所需的各种参数的通用描述，是一个文本信息。简单来说，SDP就是客户端的各端的音视频实时通信的能力，能力指的是各端所支持的音视频编解码能力及相关参数、传输协议和音视频媒体类型等等。<br></code></pre></td></tr></table></figure><p>具体信息参见<a href="http://47.115.206.47/index.php/2021/09/03/webrtc%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80">webrtc网络基础</a></p><h2 id="SEP协议"><a href="#SEP协议" class="headerlink" title="SEP协议"></a>SEP协议</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">SEP协议，即JavaScript会话建立协议，是一个信令控制协议。在媒体协商的过程中，JSEP协议通过“Offer/Answer”媒体协商机制，承载着遵循SDP协议的信息进行数据交互。JSEP数据一般使用JSON数据结构表示，比如使用“type”字段表示JSEP类型，“sdp”字段承载 SDP 文本数据，结合RTCPeerConnection API 的媒体协商流程如下：<br><br>1.客户端A创建RTCPeerConnection对象，然后调用offerForConstraints函数创建 SDP Offer信息，并通过setLocalDescription函数设置 RTCPeerConnection 的本地会话描述；<br>2.客户端A将SDP Offer信息发送给信令服务器，由信令服务器转发给客户端B；<br>3.客户端B收到客户端A的SDP Offer 后，通过调用setRemoteDescription函数保存客户端A的SDP；<br>4.客户端B创建RTCPeerConnection对象，然后调用answerForConstraints函数创建SDP Answer信息，并通过setLocalDescription函数设置 RTCPeerConnection 的本地会话描述；<br>5.客户端B将SDP Answer信息发送给信令服务器，由信令服务器转发给客户端A；<br>6.客户端A收到客户端B的SDP Answer后，通过调用setRemoteDescription函数保存客户端A的SDP；<br>至此，客户端A和客户端B都拿到双方的SDP信息，然后双方就可以通过ICE技术正式进行P2P连接。<br></code></pre></td></tr></table></figure><h2 id="一对一通信流程"><a href="#一对一通信流程" class="headerlink" title="一对一通信流程"></a>一对一通信流程</h2><ol><li>首先A是发起端也就是呼叫端，呼叫端要与信令服务器建立连接，被呼叫端B端也要与信令服务器建立连接，这样他们就可以经过信令服务器对信令消息进行中转。</li><li>A如果想要发起呼叫，首先它要创建一个PeerConnect（对端的连接对象）之后通过getUserMedia拿到本地的音视频流，将这个流添加到连接里去。在进行媒体协商之前，我们需要先将流（本地采集的数据）添加到peerConnection连接中去。这样在媒体协商之前，我们才知道有哪些媒体数据。<br>如果先做媒体协商的话，知道这是连接中没有数据媒体流，就不会设置相关底层的接收器、发送器，即使后面设置了媒体流，传递给了peerConnection，他也不会进行媒体传输，所以我们要先添加流。</li><li>调用PeerConnect的CreateOffer的方法去创建一个Offer的SDP，创建好SDP之后再调用setLocalDescription，把它设置到LocalDescription这个槽里去，那调用完这个方法之后底层会发送一个bind请求给stun和turn服务，此时它就开始收集所有与对方连接的候选者。（还没收集完成，因为stun和turn服务还没有进行响应）</li><li>与此同时调用完setLocalDescription之后，之前CreateOffer方法拿到这个SDP也要发送给信令服务器，通过信令服务器的中转，最终转给B，此时B就拿到了offer,即A这端的媒体相关的描述信息。</li><li>B端收到这个SDP之后，首先创建一个PeerConnetion。创建好这个对象之后它会调用setRemoteDescription将这个收到的SDP设置进去，设置完成之后它要给一个应答。它要调用Create Answer，这时候它就产生了本机相关的媒体的信息也就是Answer SDP,创建好之后它也要调用setLocalDescription,将这个本地的Answer SDP设置进去，这样对B来说它的协商就OK了。也就是说它有远端的SDP同时它自己这端的SDP也获取到了，这时候在底层就会进行协商。</li><li>对于B端，在setLocalDescription的时候它也要向stun和turn服务发送一个bind请求，收集能够与A进行通信的所有的候选者，在调用setLocalDescription之后，B端将自己的Answer SDP发送给信令服务器 ，通过信令服务器转给A，A此时就拿到了B 这一端的媒体描述信息，然后它再设置setRemoteDescription,此时A也可以进行媒体协商了，此时A和B进行媒体协商的动作就算完成了。这是媒体协商这一部分。</li><li>那接下来stun和turn服务将这个信息回给A，此时就会触发A端的onIceCandidate事件，因为我们上面是有一个请求（3中出现的），所有此时我们就能收到很多不同的onIceCandidate,A收到候选者之后它将候选者发送给信令服务器，通过信令服务器转给对端，也就是让对端知道我都有哪些通路（让B端知道本机A有哪些通路），对端B收到这个Candidate之后要调用AddIceCandidate这个方法将它添加到对端的连接通路的候选者列表中。</li><li>同样的道理，当B收到这个Candidate之后，它也发给信令，通过信令转发给A，此时A也拿到B的所有的候选者，并将它添加到这个候选者列表中，也就是AddIceCandidate，那此时双方就拿到了所有的对方的可以互通的候选者，此时它底层就会做连接检测。</li><li>当它找到一个最优的线路之后呢，A与B就进行通讯，首先是A将数据流发送给B，B在收到这个数据流之后，因为它们前面已经做了绑定，就知道是谁来的数据，之后就与它的这个Connection进行对连，B虽然收到数据但是还是显示不出来，要将这个数据进行onAddStream，添加进行之后才能把这个视频数据和音频数据向上抛，才能进行视频的渲染和音频的渲染。</li><li>总结：</li></ol><p>   媒体的协商：看A端有什么媒体能力看B端有什么媒体能力，他们之间所有的媒体取一个交集，取大家都能够识别的支持的能力，包括音频编解码视频编解码，这个采样率是多少，帧率是多少，以及网络的一些信息；<br>   通过ICE对整个可连通的链路地址进行收集，收集完成之后进行排序和连接检测，找出双方可以连接的最优的这条线路;<br>   媒体数据的传输：当从一端传输到另一端之后呢，另一端会收到一个事件，就是onAddStream,当收到这个事件之后就可以将这个媒体流添加到自己的video标签和audio标签中进行音频的播放和视频的渲染，这个就是整个端对端连接的基本流程。</p><h2 id="一对一通信示例"><a href="#一对一通信示例" class="headerlink" title="一对一通信示例"></a>一对一通信示例</h2><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><h4 id="1-html"><a href="#1-html" class="headerlink" title="1. html"></a>1. html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">video</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;localvideo&quot;</span> <span class="hljs-attr">autoplay</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;remotevideo&quot;</span> <span class="hljs-attr">autoplay</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span>Start<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <br>        <span class="hljs-comment">&lt;!-- 采集音视频数据并显示在localvideo --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;call&quot;</span>&gt;</span>Call<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 开始通信 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hangup&quot;</span>&gt;</span>Hangup<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 挂断 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://webrtc.github.io/adapter/adapter-latest.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="2-js"><a href="#2-js" class="headerlink" title="2. js"></a>2. js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// &#x27;use strict&#x27;</span><br><span class="hljs-keyword">let</span> localVideo = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#localvideo&#x27;</span>);<br><span class="hljs-keyword">let</span> remoteVideo = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#remotevideo&#x27;</span>);<br><br><span class="hljs-keyword">let</span> start = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#start&#x27;</span>);<br><span class="hljs-keyword">let</span> call = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#call&#x27;</span>);<br><span class="hljs-keyword">let</span> hangup = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#hangup&#x27;</span>);<br><br><span class="hljs-keyword">let</span> localStream,pc1,pc2;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getStream</span>(<span class="hljs-params">stream</span>) &#123;<br>    localVideo.<span class="hljs-property">srcObject</span> = stream;<br>    localStream = stream<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleError</span>(<span class="hljs-params">err</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;:&#x27;</span> + err.<span class="hljs-property">message</span>);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getRemoteStream</span>(<span class="hljs-params">e</span>) &#123;<br>        remoteVideo.<span class="hljs-property">srcObject</span> = e.<span class="hljs-property">streams</span>[<span class="hljs-number">0</span>]<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getOffer</span>(<span class="hljs-params">desc</span>) &#123;<br>    <span class="hljs-comment">// 设置本地的描述信息，添加到peerconnection</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;pc2&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(desc.<span class="hljs-property">sdp</span>);<br>    pc1.<span class="hljs-title function_">setLocalDescription</span>(desc)<br>    <span class="hljs-comment">//发送描述信息SDP到signal信令服务端，与pc2进行交换</span><br>    <span class="hljs-comment">//对端调用setRemoteDescription接收SDP信息</span><br>    pc2.<span class="hljs-title function_">setRemoteDescription</span>(desc)<br>    <span class="hljs-comment">// 创建Answer信息 pc2进行应答</span><br>    pc2.<span class="hljs-title function_">createAnswer</span>().<span class="hljs-title function_">then</span>(getAnswer).<span class="hljs-title function_">catch</span>(handleAnswerError)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getAnswer</span>(<span class="hljs-params">desc</span>) &#123;<br>    <span class="hljs-comment">// 收集候选者</span><br>    <span class="hljs-comment">// 远端设置本地描述信息</span><br>    pc2.<span class="hljs-title function_">setLocalDescription</span>(desc)<br>    <span class="hljs-comment">//发送描述信息SDP到signal信令服务端，与pc1进行交换</span><br>    <span class="hljs-comment">//pc1保存SDP</span><br>    pc1.<span class="hljs-title function_">setRemoteDescription</span>(desc)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleOfferError</span>(<span class="hljs-params">err</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;创建offer失败&#x27;</span>+err);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleAnswerError</span>(<span class="hljs-params">err</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;创建answer失败&#x27;</span>+err);<br>&#125;<br><span class="hljs-comment">// 获取本地音视频流并显示</span><br>start.<span class="hljs-property">onclick</span> = <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(navigator.<span class="hljs-property">mediaDevices</span> &amp;&amp; navigator.<span class="hljs-property">mediaDevices</span>.<span class="hljs-property">getUserMedia</span>)&#123;<br>        navigator.<span class="hljs-property">mediaDevices</span>.<span class="hljs-title function_">getUserMedia</span>(&#123;<br>            <span class="hljs-attr">video</span>:<span class="hljs-literal">true</span><br>        &#125;).<span class="hljs-title function_">then</span>(getStream).<span class="hljs-title function_">catch</span>(handleError)<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;浏览器不支持getUserMedia&#x27;</span>);<br>    &#125;<br>&#125;<br>call.<span class="hljs-property">onclick</span> = <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-comment">// 创建peerConnect，pc1与pc2同时连接到signal服务器（这里是一起到本机）</span><br>    pc1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RTCPeerConnection</span>();<span class="hljs-comment">//调用方</span><br>    pc2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RTCPeerConnection</span>();<span class="hljs-comment">//被调用方</span><br>    pc2.<span class="hljs-title function_">addIceCandidate</span>()<br>    <span class="hljs-comment">// 当一个 RTCICECandidate对象被添加时，这个事件被触发。</span><br>    <span class="hljs-comment">// pc1，pc2将各自收集的candidate交给对方</span><br>    <span class="hljs-comment">// 当收到candidate后，会触发事件，获取候选者列表，之后调用send candidate发送给signal服务器，从而发送给对端。双方获取之后进行连通性检测</span><br>    pc1.<span class="hljs-property">onicecandidate</span> = <span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span>&#123;<br>        pc2.<span class="hljs-title function_">addIceCandidate</span>(e.<span class="hljs-property">candidate</span>)<br>    &#125;<br>    pc2.<span class="hljs-property">onicecandidate</span> = <span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span>&#123;<br>        pc1.<span class="hljs-title function_">addIceCandidate</span>(e.<span class="hljs-property">candidate</span>)<br>    &#125;<br>    <span class="hljs-comment">//被调用方，接收数据，有数据经过的时候调用ontrack事件</span><br>    pc2.<span class="hljs-property">ontrack</span> = getRemoteStream<br>    <span class="hljs-comment">//要先添加媒体流，然后才进行媒体协商</span><br>    localStream.<span class="hljs-title function_">getTracks</span>().<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">track</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">//获取所有的轨 将本地产生的音视频流添加到pc1的peerConnection</span><br>       pc1.<span class="hljs-title function_">addTrack</span>(track,localStream) <br>    &#125;);<br>    <span class="hljs-comment">// 进行媒体协商</span><br>    pc1.<span class="hljs-title function_">createOffer</span>(&#123;<br>        <span class="hljs-attr">offerToReceiveVideo</span>:<span class="hljs-number">1</span>,<br>        <span class="hljs-attr">offerToReceiveAudio</span>:<span class="hljs-number">0</span><br>    &#125;).<span class="hljs-title function_">then</span>(getOffer).<span class="hljs-title function_">catch</span>(handleOfferError)<br>    <span class="hljs-comment">//设置本地的描述信息，添加到peerconnection</span><br>&#125;<br>hangup.<span class="hljs-property">onclick</span> = <span class="hljs-function">()=&gt;</span>&#123;<br>    pc1.<span class="hljs-title function_">close</span>();<br>    pc2.<span class="hljs-title function_">close</span>();<br>    pc1 =  pc2 = <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1v1视频通话"><a href="#1v1视频通话" class="headerlink" title="1v1视频通话"></a>1v1视频通话</h3><p><a href="https://47.115.206.47:3000/">1v1视频通话实例</a></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
      <category>WebRTC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021面试复习</title>
    <link href="/jing-jiu/2021/10/10/review/%E9%9D%A2%E8%AF%952021/"/>
    <url>/jing-jiu/2021/10/10/review/%E9%9D%A2%E8%AF%952021/</url>
    
    <content type="html"><![CDATA[<h1 id="一-webpack-git"><a href="#一-webpack-git" class="headerlink" title="一.webpack+git"></a>一.webpack+git</h1><h2 id="1-webpack"><a href="#1-webpack" class="headerlink" title="1.webpack"></a>1.webpack</h2><h3 id="1-loader与plugin区别"><a href="#1-loader与plugin区别" class="headerlink" title="1.loader与plugin区别"></a>1.loader与plugin区别</h3><p>loader转换其他语言，plugin监听生命周期抛出的事件</p><h2 id="2-git"><a href="#2-git" class="headerlink" title="2.git"></a>2.git</h2><h3 id="1-git-merge与git-rebase区别"><a href="#1-git-merge与git-rebase区别" class="headerlink" title="1.git merge与git rebase区别"></a>1.git merge与git rebase区别</h3><p>git rebase先进行master分支修改,在以master分支最后修改为基点,逐个应用其他分支的更改(不会有新的合并记录) 需要手动解决冲突</p><p>git merge 增加一条合并记录(No Fast Forward模式下或者在冲突的时候，解决完冲突才会自动产生一个commit)</p><ol><li><p>Fast Forward</p><p>当前分支合并另一个分支的时候，如果合并的过程中没有Conflict冲突的时候，则会通过直接移动两个分支的指针，来达到合并的过程。在Fast Forward模式下，当我们merge合并后，将会删除无用的分支dev，但是删除分支后，会丢掉分支的所有信息。</p></li><li><p>No Fast Forward（生成一个新的commit，从分支历史上就可以看出分支信息）</p></li></ol><h3 id="2-add"><a href="#2-add" class="headerlink" title="2.add"></a>2.add</h3><h3 id="3-commit"><a href="#3-commit" class="headerlink" title="3.commit"></a>3.commit</h3><p>修改已提交的commit: git rebase -i</p><p>1.git rebase -i  HEAD~n需要查几个commit n就是几</p><p>2.编辑需要修改的commit 在前面将pick改为edit</p><p>3.git commit –amend</p><p>4.git rebase –continue</p><p>5.git push origin master</p><h3 id="4-pull-fetch"><a href="#4-pull-fetch" class="headerlink" title="4.pull,fetch"></a>4.pull,fetch</h3><p>pull &#x3D;&#x3D; fetch + merge</p><h3 id="5-checkout"><a href="#5-checkout" class="headerlink" title="5.checkout"></a>5.checkout</h3><h1 id="二-JS相关"><a href="#二-JS相关" class="headerlink" title="二.JS相关"></a>二.JS相关</h1><h2 id="1-垃圾回收"><a href="#1-垃圾回收" class="headerlink" title="1.垃圾回收"></a>1.垃圾回收</h2><p>新生代:在内存中划分出两个区域:from,to (from存放对象 to闲置),检查from中的对象,若存活满足条件晋升为老生代,清除不存活的对象.完成后将from,to进行置换(from中的对象复制到to中)</p><p>晋升条件:1.经历了一次垃圾回收未被回收(检测内存地址) 2.to的内存使用大于25%</p><p>老生代:标记,将存活的对象移动到一起,然后清理边界外的内存</p><h2 id="2-js继承的几种方式"><a href="#2-js继承的几种方式" class="headerlink" title="2.js继承的几种方式"></a>2.js继承的几种方式</h2><h3 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1.原型链继承"></a>1.原型链继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//将父类的实例作为子类的原型</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params">name,age</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name  <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>&#125;<br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params"></span>)&#123;<br>&#125;<br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parent</span>()<br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span>=<span class="hljs-title class_">Child</span>;<br><span class="hljs-comment">// 缺点:所有实例会共享所有引用类型,属性 实例不能传值 因为事先已经new了</span><br></code></pre></td></tr></table></figure><h3 id="2-构造函数继承"><a href="#2-构造函数继承" class="headerlink" title="2.构造函数继承"></a>2.构造函数继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params">name, id</span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = id;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">printName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>  &#125;<br>&#125;<br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">name, id</span>)&#123;<br>  <span class="hljs-title class_">Parent</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name, id);<br>&#125;<br><span class="hljs-keyword">var</span> child = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&quot;jin&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>child.<span class="hljs-title function_">printName</span>(); <span class="hljs-comment">// jin</span><br>child.<span class="hljs-title function_">sayName</span>() <span class="hljs-comment">// Error</span><br><span class="hljs-comment">//子类会继承父类的公共属性,方法,但是不会继承父类原型链上的属性和方法</span><br></code></pre></td></tr></table></figure><h3 id="3-组合继承"><a href="#3-组合继承" class="headerlink" title="3.组合继承"></a>3.组合继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params">name, id</span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = id;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = [<span class="hljs-string">&#x27;a&#x27;</span>];<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">printName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>  &#125;<br>&#125;<br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">name, id</span>)&#123;<br>  <span class="hljs-comment">//继承父类属性</span><br>  <span class="hljs-title class_">Parent</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name, id);<br>&#125;<br><span class="hljs-comment">//继承父类方法 且实例可以传参给父类</span><br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parent</span>();<br><span class="hljs-comment">// Child.prototype.__proto__ === Parent.prototype</span><br><span class="hljs-keyword">var</span> child = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&quot;jin&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>child.<span class="hljs-title function_">printName</span>(); <span class="hljs-comment">// jin</span><br>child.<span class="hljs-title function_">sayName</span>() <span class="hljs-comment">// jin</span><br><br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>();<br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>();<br>a.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;b&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b.<span class="hljs-property">list</span>); <span class="hljs-comment">// [&#x27;a&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="4-寄生组合继承"><a href="#4-寄生组合继承" class="headerlink" title="4.寄生组合继承"></a>4.寄生组合继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">inheritPrototype</span>(<span class="hljs-params">subType, superType</span>)&#123;<br>  <span class="hljs-keyword">var</span> prototype = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(superType.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>); <span class="hljs-comment">// 拿到父类的原型</span><br>  prototype.<span class="hljs-property">constructor</span> = subType;                    <span class="hljs-comment">// 将原型constructor修改指向子类</span><br>  subType.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = prototype;                      <span class="hljs-comment">// 将子类的原型指向更新</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params">name</span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>];<br>&#125;<br><span class="hljs-title class_">SuperType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;;<br><span class="hljs-comment">// 借用构造函数传递增强子类实例属性（支持传参和避免篡改）</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params">name, age</span>)&#123;<br>  <span class="hljs-title class_">SuperType</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><span class="hljs-comment">//继承父类原型</span><br><span class="hljs-title function_">inheritPrototype</span>(<span class="hljs-title class_">SubType</span>, <span class="hljs-title class_">SuperType</span>);<br><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayAge</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> instance1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>(<span class="hljs-string">&quot;xyc&quot;</span>, <span class="hljs-number">23</span>);<br><span class="hljs-keyword">var</span> instance2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>(<span class="hljs-string">&quot;lxy&quot;</span>, <span class="hljs-number">23</span>);<br><br>instance1.<span class="hljs-property">colors</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;2&quot;</span>); <span class="hljs-comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;2&quot;]</span><br>instance1.<span class="hljs-property">colors</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;3&quot;</span>); <span class="hljs-comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;3&quot;]</span><br><br></code></pre></td></tr></table></figure><h3 id="5-ES6继承"><a href="#5-ES6继承" class="headerlink" title="5.ES6继承"></a>5.ES6继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">__extends</span>(<span class="hljs-title class_">Child</span>, _super);<span class="hljs-comment">//调用</span><br><br><span class="hljs-keyword">var</span> __extends = (<span class="hljs-variable language_">this</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">__extends</span>) || (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> extendStatics = <span class="hljs-keyword">function</span> (<span class="hljs-params">d, b</span>) &#123;<br>        extendStatics = <span class="hljs-title class_">Object</span>.<span class="hljs-property">setPrototypeOf</span> ||<br>            (&#123; <span class="hljs-attr">__proto__</span>: [] &#125; <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span> &amp;&amp; <span class="hljs-keyword">function</span> (<span class="hljs-params">d, b</span>) &#123; d.<span class="hljs-property">__proto__</span> = b; &#125;) ||<br>            <span class="hljs-keyword">function</span> (<span class="hljs-params">d, b</span>) &#123; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> p <span class="hljs-keyword">in</span> b) <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hasOwnProperty</span>.<span class="hljs-title function_">call</span>(b, p)) d[p] = b[p]; &#125;;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">extendStatics</span>(d, b);<br>    &#125;;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">d, b</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> b !== <span class="hljs-string">&quot;function&quot;</span> &amp;&amp; b !== <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&quot;Class extends value &quot;</span> + <span class="hljs-title class_">String</span>(b) + <span class="hljs-string">&quot; is not a constructor or null&quot;</span>);<br>        <span class="hljs-title function_">extendStatics</span>(d, b);<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">__</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">this</span>.<span class="hljs-property">constructor</span> = d; &#125;<br>        d.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = b === <span class="hljs-literal">null</span> ? <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(b) : (__.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = b.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-keyword">new</span> <span class="hljs-title function_">__</span>());<br>    &#125;;<br>&#125;)();<br></code></pre></td></tr></table></figure><h2 id="3-设计模式"><a href="#3-设计模式" class="headerlink" title="3.设计模式"></a>3.设计模式</h2><h3 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="1.单例模式"></a>1.单例模式</h3><p>保证一个类仅有一个实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SingLeton</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span> = <span class="hljs-literal">null</span><br>&#125;<br><span class="hljs-title class_">SingLeton</span>.<span class="hljs-property">getInstance</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingLeton</span>(name)<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span><br>&#125;<br><span class="hljs-title class_">SingLeton</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">setInstance</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>&#125;<br><span class="hljs-keyword">let</span> a = <span class="hljs-title class_">SingLeton</span>.<span class="hljs-title function_">getInstance</span>(<span class="hljs-string">&#x27;aaa&#x27;</span>)<br><span class="hljs-keyword">let</span> b = <span class="hljs-title class_">SingLeton</span>.<span class="hljs-title function_">getInstance</span>(<span class="hljs-string">&#x27;bbb&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;====================================&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a===b); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;====================================&#x27;</span>);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 透明单例模式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateSing</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">singleton</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">CreateSing</span>.<span class="hljs-property">instance</span>) &#123;<br>            <span class="hljs-title class_">CreateSing</span>.<span class="hljs-property">instance</span> = <span class="hljs-variable language_">this</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">singleton</span> = singleton;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">CreateSing</span>.<span class="hljs-property">instance</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateSing</span>(<span class="hljs-string">&#x27;AAA&#x27;</span>)<br><span class="hljs-keyword">let</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateSing</span>(<span class="hljs-string">&#x27;BBB&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a === b);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">*代理模式实现</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">singletonProxy</span>(<span class="hljs-params">className</span>) &#123;<br>    <span class="hljs-keyword">let</span> instance = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(className, &#123;<br>        <span class="hljs-comment">// 拦截new命令 target new的目标 args 传入的参数</span><br>        <span class="hljs-title function_">construct</span>(<span class="hljs-params">target, args</span>) &#123;<br>            <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyClass</span> &#123;<br>                <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>                    <span class="hljs-keyword">if</span> (!instance) &#123;<br>                        instance = <span class="hljs-keyword">new</span> <span class="hljs-title function_">target</span>(...args)<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> instance<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyClass</span>()<br>        &#125;<br>    &#125;)<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateSing</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">singleton</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">CreateSing</span>.<span class="hljs-property">instance</span>) &#123;<br>            <span class="hljs-title class_">CreateSing</span>.<span class="hljs-property">instance</span> = <span class="hljs-variable language_">this</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">singleton</span> = singleton;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">CreateSing</span>.<span class="hljs-property">instance</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> createSothx = <span class="hljs-title function_">singletonProxy</span>(<span class="hljs-title class_">CreateSing</span>)<br><span class="hljs-keyword">let</span> sothx1 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">createSothx</span>(<span class="hljs-string">&#x27;sothx1&#x27;</span>)<br><span class="hljs-keyword">let</span> sothx2 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">createSothx</span>(<span class="hljs-string">&#x27;sothx2&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sothx1 === sothx2)<br><br></code></pre></td></tr></table></figure><h3 id="2-发布订阅模式"><a href="#2-发布订阅模式" class="headerlink" title="2.发布订阅模式"></a>2.发布订阅模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EventEmitter</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">Events</span> = &#123;&#125;<br>    &#125;<br>    <span class="hljs-title function_">on</span>(<span class="hljs-params">type, fn</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">Events</span>[type] = <span class="hljs-variable language_">this</span>.<span class="hljs-property">Events</span>[type] || []<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">Events</span>[type].<span class="hljs-title function_">push</span>(fn)<br>    &#125;<br>    <span class="hljs-title function_">emit</span>(<span class="hljs-params">type, ...args</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">Events</span>[type]) &#123;<br>            <span class="hljs-keyword">let</span> callbacks = <span class="hljs-variable language_">this</span>.<span class="hljs-property">Events</span>[type]<br>            callbacks.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">cb</span> =&gt;</span> &#123;<br>                <span class="hljs-title function_">cb</span>(...args)<br>            &#125;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">off</span>(<span class="hljs-params">type, fn</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">Events</span>[type]) &#123;<br>            <span class="hljs-keyword">let</span> callbacks = <span class="hljs-variable language_">this</span>.<span class="hljs-property">Events</span>[type]<br>            <span class="hljs-keyword">if</span> (fn !== <span class="hljs-literal">undefined</span>) &#123;<br>                callbacks.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">cb, idx</span>) =&gt;</span> &#123;<br>                    <span class="hljs-keyword">if</span> (fn == cb || fn.<span class="hljs-property">fn</span> === cb) &#123;<br>                        callbacks.<span class="hljs-title function_">splice</span>(idx, <span class="hljs-number">1</span>)<br>                    &#125;<br>                &#125;);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">delete</span> callbacks<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">once</span>(<span class="hljs-params">type, fn</span>) &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-title function_">on</span> = (<span class="hljs-params">...args</span>) =&gt; &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">off</span>(type,on)<br>            fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,args)<br>        &#125;<br>        on.<span class="hljs-property">fn</span> = fn<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">on</span>(type,on)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-事件循环"><a href="#4-事件循环" class="headerlink" title="4.事件循环"></a>4.事件循环</h2><h3 id="1-浏览器js"><a href="#1-浏览器js" class="headerlink" title="1.浏览器js"></a>1.浏览器js</h3><p>先执行主线程代码（script标签），执行完毕后，清空微任务队列，然后取出一个宏任务，然后清空微任务队列，如此循环。</p><h3 id="2-nodejs"><a href="#2-nodejs" class="headerlink" title="2.nodejs"></a>2.nodejs</h3><ul><li>timers 执行setTimeout，setInterval回调</li><li>执行i&#x2F;o操作，回调延迟到下一阶段执行</li><li>idle，prepare内部操作（略）</li><li>poll轮询阶段  执行io操作的回调</li><li>执行setImmediate设置的任务</li><li>执行close事件的callback</li></ul><h3 id="3-JS异步原理"><a href="#3-JS异步原理" class="headerlink" title="3.JS异步原理"></a>3.JS异步原理</h3><ul><li>JS所谓的“单线程”只是指主线程只有一个，并不是整个运行环境都是单线程</li><li>JS的异步靠底层的多线程实现</li><li>不同的异步API对应不同的实现线程</li><li>异步线程与主线程通讯靠的是Event Loop</li></ul><h3 id="4-JS事件流"><a href="#4-JS事件流" class="headerlink" title="4.JS事件流"></a>4.JS事件流</h3><p>分为三个阶段捕获，目标，冒泡（事件委托）</p><h1 id="三-计算机网络"><a href="#三-计算机网络" class="headerlink" title="三.计算机网络"></a>三.计算机网络</h1><h2 id="1-tcp"><a href="#1-tcp" class="headerlink" title="1.tcp"></a>1.tcp</h2><p>seq：顺序号码（表示一个数据包的第一位在整个数据流所处的位置）</p><p>ack：确认号码 （表示期望对方下一次的seq是多少）</p><p>为什么需要三次握手</p><p>信道不可靠, 但是通信双发需要就某个问题达成一致. 而要解决这个问题, 无论你在消息中包含什么信息, 三次通信是理论上的最小值. 所以三次握手不是TCP本身的要求, 而是为了满足”在不可靠信道上可靠地传输信息”</p><p>三次握手</p><ul><li>第一次握手：客户端给服务端发送一个SYN &#x3D; 1 , seq &#x3D; x (seq是客户端的初始化序列号)  如果服务端成功接收，客户端发送，服务端接收能力正常。</li><li>第二次握手：服务端返回SYN &#x3D; 1 , ACK &#x3D; 1 , ack(确认号) &#x3D; x+1 , seq &#x3D; y 也指定自己的seq序列 客户端得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。</li><li>第三次握手：客户端发送ACK报文 ACK &#x3D; 1 , seq &#x3D; x + 1 , ack &#x3D; y + 1 服务端得出结论：客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常  <strong>第三次握手失败后，会处于半连接状态，会重新5次进行第三次握手尝试。</strong><br>前两次握手会消耗一个序列号（SYN &#x3D; 1），因此seq才会+1，第三次不会消耗序列号（不携带数据的话），因此客户端下一个发送的报文的seq依旧是x+1.<br>如果使用两次握手，服务端不知道客户端是否收到包。</li></ul><p>四次挥手</p><ul><li>第一次挥手：主动关闭方发送第一个包，其中FIN标志位为1，发送顺序号seq为X。</li><li>第二次挥手：被动关闭方收到FIN包后发送第二个包，其中发送顺序号seq为Z，接收顺序号ack为X+1。</li><li>第三次挥手：被动关闭方再发送第三个包，其中FIN标志位为1，发送顺序号seq为Y，接收顺序号ack为X。</li><li>第四次挥手：主动关闭方发送第四个包，其中发送顺序号为X，接收顺序号为Y。至此，完成四次挥手。</li></ul><h2 id="2-http-x2F-https"><a href="#2-http-x2F-https" class="headerlink" title="2.http&#x2F;https"></a>2.http&#x2F;https</h2><ul><li><p>http 2.0多路复用，二进制分帧传输，服务端推送，头部压缩</p></li><li><p>https</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br>ssl握手<br>  1.客户端向服务端发送一个客户端生成的随机数（random1），客户端支持的加密算法，协议版本等<br>  2.服务端向客户端发送随机数（random2），数字证书，选择的加密算法<br>  3.客户端验证数字证书有效性<br>  4.客户端向服务端发送一个由服务器公钥加密的字符串（客户端生成的随机数进行加密）<br>  5.服务端用私钥解密客户端发送的字符串<br>  6.用上述三个随机数生成对话密钥用来加密接下来的对话过程<br>对称加密<br>  指用来加密和解密的是同一个秘钥。其特点是加密速度快，但是秘钥容易被黑客截获，所以安全性不高<br>非对称加密<br>  指用来加密和解密的是不同的秘钥，它们是成对出现的，称为公钥和私钥，知道其中一个秘钥是无法推导出另外一个秘钥的。用公钥加密的内容需要用私钥才能解密，用私钥加密的内容需要用公钥才能解密。非对称加密的特点是安全性高，缺点是加密速度慢。<br>混合加密<br>  在通信刚开始的时候使用非对称算法，首先解决密钥交换的问题。然后用随机数产生对称算法使用的会话密钥，再用公钥加密。对方拿到密文后用私钥解密，取出会话密钥。这样，双方就实现了对称密钥的安全交换。<br></code></pre></td></tr></table></figure></li><li><p>Cache-Control</p><p>1.no-cache  与服务器协商是否进行缓存</p><p>2.no-store   不缓存</p><p>3.max-age</p></li><li></li></ul><h2 id="3-DNS"><a href="#3-DNS" class="headerlink" title="3.DNS"></a>3.DNS</h2><h2 id="4-WebSocket"><a href="#4-WebSocket" class="headerlink" title="4.WebSocket"></a>4.WebSocket</h2><h3 id="1-与socket的区别"><a href="#1-与socket的区别" class="headerlink" title="1.与socket的区别"></a>1.与socket的区别</h3><p>TCP用主机的IP地址加上主机的端口号作为TCP连接的端点，这种端点就叫做套接字（Socket）主要有三个参数：通信的目的IP地址、使用的传输层协议(TCP或UDP)和使用的端口号。而WebSocket协议是建立在http协议之上，通过http完成握手。说实话两者没啥关系。硬要说有关系可能就是websocket是对socket在web的一个实现吧。</p><p>简单来说，<strong>Socket是传输控制层协议，WebSocket是应用层协议。</strong></p><h3 id="2-与http区别"><a href="#2-与http区别" class="headerlink" title="2.与http区别"></a>2.与http区别</h3><p>http是非持久协议，websocket是持久协议。且http不能进行长连接。</p><h3 id="3-socket-io-broadcast"><a href="#3-socket-io-broadcast" class="headerlink" title="3.socket.io broadcast"></a>3.socket.io broadcast</h3><p>应该是循环给所在房间内部所有成员发送sockcet消息（因为房间维护了一个用户列表，根据这个列表去广播）。</p><h2 id="2-WebRTC"><a href="#2-WebRTC" class="headerlink" title="2.WebRTC"></a>2.WebRTC</h2><h3 id="1-p2p连接"><a href="#1-p2p连接" class="headerlink" title="1.p2p连接"></a>1.p2p连接</h3><p>纯点对点连接。网络没有客户端或服务器的概念，只有平等的同级节点，同时对网络上的其它节点充当客户端和服务器。这种网络设计模型不同于客户端-服务器模型，在客户端-服务器模型中通信通常来往于一个中央服务器。</p><h3 id="2-NAT"><a href="#2-NAT" class="headerlink" title="2.NAT"></a>2.NAT</h3><ol><li>静态NAT（内部网络的私有IP地址转换为公有IP地址，IP地址对是一对一的，是一成不变的，某个私有IP地址只转换为某个公有IP地址）</li><li>动态转换（指定可以转换成哪些公网ip）</li></ol><h4 id="1-解决IP地址不足（ipv4）"><a href="#1-解决IP地址不足（ipv4）" class="headerlink" title="1.解决IP地址不足（ipv4）"></a>1.解决IP地址不足（ipv4）</h4><h4 id="2-避免来自网络外部的攻击"><a href="#2-避免来自网络外部的攻击" class="headerlink" title="2.避免来自网络外部的攻击"></a>2.避免来自网络外部的攻击</h4><ul><li>完全锥型（任何外部主机只要拿到公网ip就可以向服务端发送数据）</li><li>地址限制型（本地主机只要给外部主机发送过数据，这个主机拿到公网ip就可以发数据）</li><li>端口限制型，对称型（同一内网主机同一端口号，对于锥型NAT，无论与哪一外网主机通讯，都不改变所分配的端口号；而对于对等型NAT，同一内网主机同一端口号，每一次与不同的外网主机通讯，就重新分配另一个端口号。）。。。</li></ul><h1 id="四-浏览器相关-安全-存储"><a href="#四-浏览器相关-安全-存储" class="headerlink" title="四.浏览器相关(安全,存储)"></a>四.浏览器相关(安全,存储)</h1><h2 id="1-CORS-跨域资源共享"><a href="#1-CORS-跨域资源共享" class="headerlink" title="1.CORS(跨域资源共享)"></a>1.CORS(跨域资源共享)</h2><ul><li>Access-Control-Allow-Origin(响应头) 简单请求设置该响应头就可以完成跨域.<br>简单请求:GET,POST(且Content-Type的值为 multipart&#x2F;form-data二进制数据,文件,非ASCll字符,application&#x2F;x-www-form-urlencoded表单默认编码方式,text&#x2F;plain文本)</li><li>非简单请求<br>浏览器会先通过OPTIONS方法发送一个预检请求,在请求头加入Access-Control-Request-Headers:content-type<br>Access-Control-Request-Method:POST<br>服务端需要设置Access-Control-Allow-Headers添加允许浏览器发送的请求头</li></ul><h2 id="2-JSONP"><a href="#2-JSONP" class="headerlink" title="2.JSONP"></a>2.JSONP</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">myCallback</span> = <span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;www.baidu.com?callback=myCallback&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 服务端返回体直接是函数调用，调用的实参是要后台要传递的数据 由于data是对象，需要先进行json格式化 --&gt;</span><br><span class="hljs-comment">&lt;!-- myCallback(&#123;//一个函数的调用，将数据作为参数传递进去，再将整个函数的调用返回给客户端</span><br><span class="hljs-comment">    name:&#x27;ahreal&#x27;,</span><br><span class="hljs-comment">    age:18</span><br><span class="hljs-comment">&#125;) --&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-WebSocket"><a href="#3-WebSocket" class="headerlink" title="3.WebSocket"></a>3.WebSocket</h2><ul><li><p>通过http协议建立通道,在此基础上升级ws协议进行通信</p></li><li><p>Upgrade: websocket &#x2F;&#x2F; 升级为ws<br>Connection: Upgrade &#x2F;&#x2F; 需要升级协议</p></li><li><p>后端返回</p><p>Connection: Upgrade<br>Sec-WebSocket-Accept: ZUip34t+bCjhkvxxwhmdEOyx9hE&#x3D;<br>Upgrade: websocket 返回101 状态码表示服务器应客户端升级协议的请求对协议进行切换。</p></li></ul><h2 id="4-postMessage"><a href="#4-postMessage" class="headerlink" title="4.postMessage"></a>4.postMessage</h2><p>当想要在Web页面中嵌入一个来自其他站点的iframe或者window.open的返回值，利用 postMessage() 和 message 事件可以实现的跨域消息传递.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">otherWindow.<span class="hljs-title function_">postMessage</span>(message, targetOrigin);<br><span class="hljs-comment">//targetOrigin 指定哪些源能接收消息</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>&#123;<br>   <span class="hljs-keyword">var</span> origin = event.<span class="hljs-property">origin</span>;<br>   <span class="hljs-comment">// 通常，onmessage()事件处理程序应当首先检测其中的origin属性，忽略来自未知源的消息</span><br>   <span class="hljs-keyword">if</span> (origin !== <span class="hljs-string">&quot;http://example.org:8080&quot;</span>)<br>     <span class="hljs-keyword">return</span>;<br>   <span class="hljs-comment">// ...</span><br>&#125;, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><h2 id="5-XSS-CRSF"><a href="#5-XSS-CRSF" class="headerlink" title="5.XSS,CRSF"></a>5.XSS,CRSF</h2><ul><li>XSS(跨站脚本攻击)<br>点了一个恶意链接,将js脚本写入数据库,修改dom结构<br>解决:1.httpOnly防止截取cookie 2.输入,输出检查</li><li>CRSF(跨站请求伪造)</li></ul><h2 id="6-localStorage-sessionStorage-Cookie"><a href="#6-localStorage-sessionStorage-Cookie" class="headerlink" title="6.localStorage,sessionStorage,Cookie"></a>6.localStorage,sessionStorage,Cookie</h2><h3 id="1-Cookie"><a href="#1-Cookie" class="headerlink" title="1.Cookie"></a>1.Cookie</h3><ul><li>httponly 如果为true 只能在http请求头中会有cookie信息，无法通过js获取到。</li><li>secure  设置是否只能通过https来传递此条cookie。</li><li>expires&#x2F;Max-Age 设置过期时间 不设置默认跟session一样。</li><li>path 可以访问到cookie的页面路径。</li></ul><h2 id="7-BOM和DOM"><a href="#7-BOM和DOM" class="headerlink" title="7.BOM和DOM"></a>7.BOM和DOM</h2><p>BOM——浏览器对象模型 顶级对象为widnow对象。下面有documnt，history，location，navigator等等。</p><p>DOM——文档对象模型 顶级对象为document对象。主要用来操作页面元素，对页面元素进行增删改查。</p><h1 id="五-项目"><a href="#五-项目" class="headerlink" title="五.项目"></a>五.项目</h1><h2 id="1-王者荣耀"><a href="#1-王者荣耀" class="headerlink" title="1.王者荣耀"></a>1.王者荣耀</h2><h3 id="1-登陆注册-session-token"><a href="#1-登陆注册-session-token" class="headerlink" title="1.登陆注册(session,token)"></a>1.登陆注册(session,token)</h3><h3 id="2-set-图片更新"><a href="#2-set-图片更新" class="headerlink" title="2.$set()图片更新"></a>2.$set()图片更新</h3><h3 id="3-nextTick异步渲染"><a href="#3-nextTick异步渲染" class="headerlink" title="3.$nextTick异步渲染"></a>3.$nextTick异步渲染</h3><h3 id="4-vue基础技术应用（插槽，抽离公共方法mixin-refs-filters-watch）"><a href="#4-vue基础技术应用（插槽，抽离公共方法mixin-refs-filters-watch）" class="headerlink" title="4.vue基础技术应用（插槽，抽离公共方法mixin,$refs,filters,watch）"></a>4.vue基础技术应用（插槽，抽离公共方法mixin,$refs,filters,watch）</h3><h3 id="5-抽离组件"><a href="#5-抽离组件" class="headerlink" title="5.抽离组件"></a>5.抽离组件</h3><h2 id="2-HMeet"><a href="#2-HMeet" class="headerlink" title="2.HMeet"></a>2.HMeet</h2><h3 id="1-webRTC使用，p2p过程"><a href="#1-webRTC使用，p2p过程" class="headerlink" title="1.webRTC使用，p2p过程"></a>1.webRTC使用，p2p过程</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">A new PeerConnection,通过getUserMedia拿到本地的音视频流，在进行媒体协商之前，先将流添加到peerConnection连接中去。这样在媒体协商之前，我们才知道有哪些媒体数据。<br>调用PeerConnect的CreateOffer的方法去创建一个Offer的SDP,发给信令服务器。<br>B建立连接，收到SDP，new PeerConnetion。调用Create Answer，创建Answer SDP发给信令服务器,进行媒体协商。<br>触发A端的onIceCandidate事件，A与B就进行通讯，首先A将数据流发送给B，B在onAddStream拿到流，进行视频的渲染和音频的渲染。<br></code></pre></td></tr></table></figure><h3 id="2-webSocket向下兼容"><a href="#2-webSocket向下兼容" class="headerlink" title="2.webSocket向下兼容"></a>2.webSocket向下兼容</h3><ol><li>轮询（隔一段时间发送ajax请求）</li><li>长轮询（请求发过去，有数据才返回）</li></ol><h3 id="3-Vuex"><a href="#3-Vuex" class="headerlink" title="3.Vuex"></a>3.Vuex</h3><p><a href="https://juejin.cn/post/6844903993374670855#heading-3">https://juejin.cn/post/6844903993374670855#heading-3</a></p><ol><li>有时候我们需要从 store 中的 state 中派生出一些状态，例如对列表进行过滤并计数（类似于计算属性一样的东西 this.<code>$store.getters</code>）</li><li>批量使用（mapxxx mapState,mapGetter）</li></ol><h3 id="4-视频，音频的切换"><a href="#4-视频，音频的切换" class="headerlink" title="4.视频，音频的切换"></a>4.视频，音频的切换</h3><p>封装了一个专门进行音视频通信的组件，通过watch监听传入的props，当传入的值发生改变断开重新进行连接。但这样会存在一个问题，断开重连其实这个时候用户应该是还在这个会议中的，只有自己主动退出才是真正的退出状态，因此如果再使用webrtc中的websocket对会议成员进行管理就不太适合了，因此对人员的管理以及退出，关闭会议，收发消息这些就需要重新采用一个websocket，他放在了另一个域名空间。</p><h3 id="5-多人视频-x2F-音频"><a href="#5-多人视频-x2F-音频" class="headerlink" title="5.多人视频&#x2F;音频"></a>5.多人视频&#x2F;音频</h3><p>大于两个的时候，对于新加入的成员，所有旧成员主动给新成员发送offer，等待他回复answer</p><h3 id="6-退出会议，结束会议"><a href="#6-退出会议，结束会议" class="headerlink" title="6.退出会议，结束会议"></a>6.退出会议，结束会议</h3><h1 id="六-性能优化"><a href="#六-性能优化" class="headerlink" title="六.性能优化"></a>六.性能优化</h1><h2 id="1-白屏问题"><a href="#1-白屏问题" class="headerlink" title="1.白屏问题"></a>1.白屏问题</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><ol><li>css文件体积过大</li><li>js阻塞dom渲染</li><li>@import引入  会在页面全部下载完后才会加载</li><li>css被放到底部</li><li>SPA</li></ol><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ol><li>文件体积压缩（@media）</li><li>css放到合适位置，减少@import使用</li><li>内嵌的js加defer&#x2F;async防止阻塞dom渲染</li><li>SSR渲染</li><li>webpack的code-spliting结合vue-router的懒加载</li><li>缓存</li><li>多页面(不推荐)</li></ol><h2 id="2-GZIP压缩"><a href="#2-GZIP压缩" class="headerlink" title="2.GZIP压缩"></a>2.GZIP压缩</h2><p>请求头中有个Accept-Encoding来标识对压缩的支持，响应头content-encoding:gzip表示服务端压缩方式。</p><h1 id="七-CSS"><a href="#七-CSS" class="headerlink" title="七.CSS"></a>七.CSS</h1><h2 id="1-清除浮动"><a href="#1-清除浮动" class="headerlink" title="1.清除浮动"></a>1.清除浮动</h2><p>由于子元素浮动使得父元素高度坍塌</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">clear</span>: both;// 规定元素左右两侧均不允许浮动元素 只能在块级元素上起作用<br>    <span class="hljs-attribute">visibility</span>: hidden;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="八-拓展"><a href="#八-拓展" class="headerlink" title="八.拓展"></a>八.拓展</h1><h2 id="1-十亿个数据查找使用率最高的前十个，如何存储-分治-topk"><a href="#1-十亿个数据查找使用率最高的前十个，如何存储-分治-topk" class="headerlink" title="1.十亿个数据查找使用率最高的前十个，如何存储 分治+topk"></a>1.十亿个数据查找使用率最高的前十个，如何存储 分治+topk</h2><h2 id="2-有64匹马，一共有8个赛道，想要找出最快的4匹马，要比赛最少多少轮才可以"><a href="#2-有64匹马，一共有8个赛道，想要找出最快的4匹马，要比赛最少多少轮才可以" class="headerlink" title="2.有64匹马，一共有8个赛道，想要找出最快的4匹马，要比赛最少多少轮才可以?"></a>2.有64匹马，一共有8个赛道，想要找出最快的4匹马，要比赛最少多少轮才可以?</h2><h1 id="九-Vue相关"><a href="#九-Vue相关" class="headerlink" title="九.Vue相关"></a>九.Vue相关</h1><h2 id="1-computed"><a href="#1-computed" class="headerlink" title="1.computed"></a>1.computed</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">在Watcher类可以选择一个字段来区分是自动生成的还是用户自定义的watcher，或者是computedWatcher。也就是说创建了一个computed的实例，他就会创建一个字段为dirty的watcher，他会收集所依赖属性的dep。<br></code></pre></td></tr></table></figure><h2 id="2-watch"><a href="#2-watch" class="headerlink" title="2.watch"></a>2.watch</h2><h2 id="3-hash和history模式"><a href="#3-hash和history模式" class="headerlink" title="3.hash和history模式"></a>3.hash和history模式</h2><h3 id="1-hash"><a href="#1-hash" class="headerlink" title="1.hash"></a>1.hash</h3><p>形如<a href="http://www.baidu.com/#/main,%E7%9B%91%E5%90%AChashchange%E4%BA%8B%E4%BB%B6%EF%BC%8C%E5%BD%93url%E5%8F%98%E5%8C%96%E7%9A%84%E6%97%B6%E5%80%99%E5%81%9A%E5%87%BA%E7%9B%B8%E5%BA%94%E3%80%82(%E7%B1%BB%E4%BC%BC%E4%BA%8Ea%E6%A0%87%E7%AD%BE)">http://www.baidu.com/#/main,监听hashchange事件，当url变化的时候做出相应。(类似于a标签)</a></p><h3 id="2-history"><a href="#2-history" class="headerlink" title="2.history"></a>2.history</h3><p>配合pushState和replaceState（不会触发popState事件  在url输入框切换路由）他会给后端发送请求，如果后端么有就会404。</p><h2 id="4-虚拟DOM"><a href="#4-虚拟DOM" class="headerlink" title="4.虚拟DOM"></a>4.虚拟DOM</h2><p>Virtual DOM是对DOM的抽象,因为操作真实DOM非常耗费性能，因此使用js对象对真实DOM的某些必要属性进行描述。在vue监听到数据发生改变需要重新渲染视图的时候，会先进行虚拟DOM的diff对比，之后将对比完成的结果进行真实DOM的渲染。</p><p>diff算法：因为如果要完整的对比两个树的话，传统的diff算法时间复杂度O（n^3）(创建树n + 最短编辑距离n^2 )  vue&#x2F;react将它优化到了O(n) 因为它假设是在同一层，且检测需要依赖用户输入的key。n指的是要比较的节点数目。</p><h2 id="5-Vue的data"><a href="#5-Vue的data" class="headerlink" title="5.Vue的data"></a>5.Vue的data</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-literal">new</span> Vue 可以不使用函数返回的原因在于，每次<span class="hljs-literal">new</span>的时候，传入的都是新的对象（新的内存地址）。所以修改其中一个 vue 实例并不会影响其他实例<br><br>对于组件而言，组件定义好之后是有默认值 （我们把一个组件引入后，修改了部分值后。再次引入相同的组件时，第二次引入的组件初始值还是保持原来设置的） 所以在组件注册（vue 的一个内部流程）的时候，vue 会把这个组件传入的配置存下来，多次生成同一个组件的时候都会从存下来的配置中取值，然后通过<span class="hljs-literal">new</span>创建新的组件实例。可如果这时候 <span class="hljs-built_in">data</span> 为对象 （引用类型的内存地址是一样的） ，那每次生成新的组件实例的 <span class="hljs-built_in">data</span> 都指向了同一个内存区域，这时候其中一个同类型组件值更新了。其余的都会跟着一起更新<br><br>要解决上述说的组件的问题，就需要用函数的形式，每次创建组件都通过 function 返回一个新的对象（内存地址不一样的对象）。这样组件的 <span class="hljs-built_in">data</span> 才是自己单独的<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>复习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复习</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node相关</title>
    <link href="/jing-jiu/2021/08/05/Node/node%E7%9B%B8%E5%85%B3/"/>
    <url>/jing-jiu/2021/08/05/Node/node%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="一-require导入机制"><a href="#一-require导入机制" class="headerlink" title="一.require导入机制"></a>一.require导入机制</h1><ol><li>首先我们要清楚NodeJS的模块机制。导出的每个模块其实都是Module对象的实例。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Module</span> &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;.&#x27;</span>,<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;C:\\Users\\14828\\Desktop\\Task\\笔记\\NodeJS&#x27;</span>,<br>  <span class="hljs-attr">exports</span>: &#123;&#125;,<br>  <span class="hljs-attr">parent</span>: <span class="hljs-literal">null</span>,<br>  <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;C:\\Users\\14828\\Desktop\\Task\\笔记\\NodeJS\\node.js&#x27;</span>,<br>  <span class="hljs-attr">loaded</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">children</span>: [],<br>  <span class="hljs-attr">paths</span>: [<br>    <span class="hljs-string">&#x27;C:\\Users\\14828\\Desktop\\Task\\笔记\\NodeJS\\node_modules&#x27;</span>,<br>    <span class="hljs-string">&#x27;C:\\Users\\14828\\Desktop\\Task\\笔记\\node_modules&#x27;</span>,<br>    <span class="hljs-string">&#x27;C:\\Users\\14828\\Desktop\\Task\\node_modules&#x27;</span>,<br>    <span class="hljs-string">&#x27;C:\\Users\\14828\\Desktop\\node_modules&#x27;</span>,<br>    <span class="hljs-string">&#x27;C:\\Users\\14828\\node_modules&#x27;</span>,<br>    <span class="hljs-string">&#x27;C:\\Users\\node_modules&#x27;</span>,<br>    <span class="hljs-string">&#x27;C:\\node_modules&#x27;</span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>其次我们来看require。当我们通过require引入某个模块时，require函数内部会调用Module.load方法。在这个方法内部 首先调用Module.resolveFilename来获得这个模块的绝对路径filename（定位这个模块）之后在Module._cache[filename]查找是否有缓存，如果有就直接返回缓存的exports属性。如果没有，再看是否是内置的模块，如果是内置的模块，就返回NativeModule.require(filename);如果不是内置模块，就新建一个Module实例，然后把这个实例缓存起来。最后通过load方法加载这个模块，将exports属性返回。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-title class_">Module</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;module&#x27;</span>)<br><span class="hljs-title class_">Module</span>.<span class="hljs-property">_load</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">request, parent, isMain</span>) &#123;<br>    <span class="hljs-keyword">var</span> filename = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">_resolveFilename</span>(request, parent);<br>    <span class="hljs-keyword">var</span> cachedModule = <span class="hljs-title class_">Module</span>.<span class="hljs-property">_cache</span>[filename];<br>    <span class="hljs-keyword">if</span> (cachedModule) &#123;<br>        <span class="hljs-keyword">return</span> cachedModule.<span class="hljs-property">exports</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">NativeModule</span>.<span class="hljs-title function_">exists</span>(filename)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">NativeModule</span>.<span class="hljs-built_in">require</span>(filename);<br>    &#125;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Module</span>(filename, parent);<br>    <span class="hljs-title class_">Module</span>.<span class="hljs-property">_cache</span>[filename] = <span class="hljs-variable language_">module</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-variable language_">module</span>.<span class="hljs-title function_">load</span>(filename);<br>        hadException = <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (hadException) &#123;<br>            <span class="hljs-keyword">delete</span> <span class="hljs-title class_">Module</span>.<span class="hljs-property">_cache</span>[filename];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="二-异步I-x2F-O"><a href="#二-异步I-x2F-O" class="headerlink" title="二.异步I&#x2F;O"></a>二.异步I&#x2F;O</h1><h2 id="1-事件循环机制"><a href="#1-事件循环机制" class="headerlink" title="1. 事件循环机制"></a>1. 事件循环机制</h2><ol><li><p><strong>Timers（计时器阶段）</strong>:初次进入事件循环，会从计时器阶段开始。此阶段会判断是否存在过期的计时器回调（包含 setTimeout 和 setInterval），如果存在则会执行所有过期的计时器回调，执行完毕后，如果回调中触发了相应的微任务，会接着执行所有微任务，执行完微任务后再进入 Pending callbacks 阶段。</p></li><li><p><strong>Pending callbacks</strong>：执行上一循环推迟到下一个循环迭代的I &#x2F; O回调（系统调用相关的回调）。</p></li><li><p><strong>Idle&#x2F;Prepare</strong>：仅供内部使用。</p></li><li><p><strong>Poll（轮询阶段）</strong>：当回调队列不为空时：</p></li></ol><p>   会执行回调，若回调中触发了相应的微任务，针对每一个回调执行完毕后，就执行相应微任务。执行完所有的回到后，变为下面的情况。</p><p>   当回调队列为空时（没有回调或所有回调执行完毕）：</p><p>   但如果存在有计时器（setTimeout、setInterval和setImmediate）没有执行，会结束轮询阶段，进入 Check 阶段。否则会阻塞并等待任何正在执行的I&#x2F;O操作完成，并马上执行相应的回调，直到所有回调执行完毕。</p><ol start="5"><li><p><strong>Check（查询阶段）</strong>：会检查是否存在 setImmediate 相关的回调，如果存在则执行所有回调，执行完毕后，如果回调中触发了相应的微任务，会接着执行所有微任务，执行完微任务后再进入 Close callbacks 阶段。</p></li><li><p><strong>Close callbacks</strong>：执行一些关闭回调，比如 <code>socket.on(&#39;close&#39;, ...)</code>等。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue2响应式原理（二）</title>
    <link href="/jing-jiu/2021/06/05/Framework/Vue2/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86-2/"/>
    <url>/jing-jiu/2021/06/05/Framework/Vue2/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86-2/</url>
    
    <content type="html"><![CDATA[<h1 id="原理-进阶——vue2"><a href="#原理-进阶——vue2" class="headerlink" title="原理(进阶——vue2)"></a>原理(进阶——vue2)</h1><h2 id="一-defineReactive函数——响应式操作"><a href="#一-defineReactive函数——响应式操作" class="headerlink" title="一.defineReactive函数——响应式操作"></a>一.defineReactive函数——响应式操作</h2><h3 id="1-Object-defineProperty-函数"><a href="#1-Object-defineProperty-函数" class="headerlink" title="1.Object.defineProperty()函数"></a>1.Object.defineProperty()函数</h3><pre><code class="hljs">要进行响应式操作就需要使用Object对象上的一个方法defineProperty()</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</span><br><span class="hljs-comment">//其接收三个参数</span><br><span class="hljs-comment">//obj</span><br><span class="hljs-comment">//要定义属性的对象。</span><br><span class="hljs-comment">//prop</span><br><span class="hljs-comment">//要定义或修改的属性的名称或 Symbol 。</span><br><span class="hljs-comment">//descriptor</span><br><span class="hljs-comment">//要定义或修改的属性描述符。</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj,key,&#123;<br>    <span class="hljs-attr">configurable</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">enumerable</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">writable</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">//value</span><br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">val</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(val);<br>    &#125;<br>&#125;)<br><span class="hljs-comment">//注意:set,get函数不能与value,writable同时使用</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">而我们的defineReactive函数则是对defineProperty进行了简单的封装</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">defineReactive</span>(<span class="hljs-params">obj,key,value</span>) &#123;<br>    <span class="hljs-comment">//此处判断传入参数的个数   如果传入两个参数  进行value = obj[key]操作以便后面对一个对象身上含有多层属性进行递归</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> == <span class="hljs-number">2</span>)&#123;<br>        value = obj[key]<br>    &#125;<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj,key,&#123;<br>        <span class="hljs-attr">configurable</span>:<span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">enumerable</span>:<span class="hljs-literal">true</span>,<br>        <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;访问&#x27;</span>+key+<span class="hljs-string">&#x27;属性&#x27;</span>);<br>            <span class="hljs-keyword">return</span> value;<br>        &#125;,<br>        <span class="hljs-title function_">set</span>(<span class="hljs-params">val</span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;修改&#x27;</span>+key+<span class="hljs-string">&#x27;属性&#x27;</span>);<br>            value = val<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二-Observer类——观察者"><a href="#二-Observer类——观察者" class="headerlink" title="二.Observer类——观察者"></a>二.Observer类——观察者</h2><h3 id="1-observe函数"><a href="#1-observe函数" class="headerlink" title="1.observe函数"></a>1.observe函数</h3><pre><code class="hljs">我们需要一个函数来判断一个数据是否需要为其进行响应式操作</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">observe</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-comment">//判断传入的value是否为一个对象</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> value !== <span class="hljs-string">&#x27;object&#x27;</span>)&#123;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">let</span> ob<br>        <span class="hljs-comment">//判断对象身上是否有一个__ob__属性  这个属性里面存放该对象的Observer类用于观察对象身上的属性</span><br>        <span class="hljs-keyword">if</span>(value.<span class="hljs-property">__ob__</span>)&#123;<br>            ob = value.<span class="hljs-property">__ob__</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            ob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>(value)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">我们需要在defineReactive函数内部去调用它 1.给子对象添加观察 2.给新的值添加观察</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">defineReactive</span>(<span class="hljs-params">obj,key,value</span>) &#123;<br>    <span class="hljs-comment">//给子对象添加观察</span><br>    <span class="hljs-keyword">let</span> childOb = <span class="hljs-title function_">observe</span>(value)<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj,key,&#123;<br>        <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>        &#125;,<br>        <span class="hljs-title function_">set</span>(<span class="hljs-params">val</span>)&#123;<br>            <span class="hljs-comment">//给新的值添加观察</span><br>            childOb = <span class="hljs-title function_">observe</span>(val)<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-def函数"><a href="#2-def函数" class="headerlink" title="2.def函数"></a>2.def函数</h3><pre><code class="hljs">我们需要在Oberver中对传入的对象/数组添加一个属性,属性中存放一个Oberver实例用于观察这个对象的数据变化</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">def</span>(<span class="hljs-params">obj,key,value</span>) &#123;<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj,key,&#123;<br>        value<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-Observer类"><a href="#3-Observer类" class="headerlink" title="3.Observer类"></a>3.Observer类</h3><pre><code class="hljs">在Observer类中我们需要对属性进行观察 并且我们需要在observe中实例化他</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">value</span>)&#123;<br>        <span class="hljs-title function_">def</span>(value,<span class="hljs-string">&#x27;__ob__&#x27;</span>,<span class="hljs-variable language_">this</span>)<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(value))&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">arrWalk</span>(value)<br>            <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">setPrototypeOf</span>(value,arrMethods);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">walk</span>(value)<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">walk</span>(<span class="hljs-params">obj</span>)&#123;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>            <span class="hljs-title function_">defineReactive</span>(obj,key)<br>       &#125;   <br>    &#125;<br>    <span class="hljs-title function_">arrWalk</span>(<span class="hljs-params">arr</span>)&#123;<br>    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-数组的观察——重写方法"><a href="#4-数组的观察——重写方法" class="headerlink" title="4.数组的观察——重写方法"></a>4.数组的观察——重写方法</h3><pre><code class="hljs">由于数组与对象不同   defineReactive无法监测他的增删添改 因此我们需要对数组原型上的七种方法进行重写,方便我们监听它</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> methodsNeedChange = [<span class="hljs-comment">//要重写的七种方法</span><br>    <span class="hljs-string">&#x27;push&#x27;</span>,<br>    <span class="hljs-string">&#x27;pop&#x27;</span>,<br>    <span class="hljs-string">&#x27;shift&#x27;</span>,<br>    <span class="hljs-string">&#x27;unshift&#x27;</span>,<br>    <span class="hljs-string">&#x27;splice&#x27;</span>,<br>    <span class="hljs-string">&#x27;sort&#x27;</span>,<br>    <span class="hljs-string">&#x27;reverse&#x27;</span><br>]<br><span class="hljs-comment">//将Array原型绑定到arrMethods上 即arrMethods.prototype === Array.prototype</span><br><span class="hljs-keyword">let</span> arrMethods = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br>methodsNeedChange.<span class="hljs-title function_">forEach</span>(<br>    <span class="hljs-function"><span class="hljs-params">methods</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">//保存原来的七个方法</span><br>        <span class="hljs-keyword">let</span> oldMethods = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[methods]<br>        <span class="hljs-comment">//重写方法 用def监测</span><br>        <span class="hljs-title function_">def</span>(arrMethods,methods,<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-comment">//当我们调用Array原型上的方法时,此时调用未重写的方法对数组进行正确的操作</span><br>            <span class="hljs-keyword">let</span> result = oldMethods.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,<span class="hljs-variable language_">arguments</span>)<br>            <span class="hljs-keyword">let</span> newArr = []<span class="hljs-comment">//存放改变后的数组</span><br>            <span class="hljs-keyword">let</span> ob = <span class="hljs-variable language_">this</span>.<span class="hljs-property">__ob__</span><br>            <span class="hljs-keyword">let</span> arr = [...<span class="hljs-variable language_">arguments</span>]<span class="hljs-comment">//防止是类数组无法调用slice方法</span><br>            <span class="hljs-keyword">switch</span> (methods) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;push&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;unshift&#x27;</span>:   <br>                    newArr = <span class="hljs-variable language_">arguments</span><br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;slice&#x27;</span>: <br>                    newArr = arr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>)  <br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(newArr)&#123;<br>                <span class="hljs-comment">//在这里响应</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;使用了&#x27;</span>+ oldMethods.<span class="hljs-property">name</span> +<span class="hljs-string">&#x27;方法&#x27;</span>);<br>                <span class="hljs-comment">//如果数据变化  把新的数据更新</span><br>                ob.<span class="hljs-title function_">arrWalk</span>(newArr)<br>            &#125;<br>            <span class="hljs-keyword">return</span> result<br>        &#125;)<br>    &#125;<br>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">而此时arrMethods上就存放了可以被监听的七种方法  我们在需要这七种方法时,也就是observe时将传数组的原型改成arrMethods,这样我们的数组调用数组的方法也就能够被监听到   如下:</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">arrWalk</span>(<span class="hljs-params">arr</span>)&#123;<br>     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>,l = arr.<span class="hljs-property">length</span>;i&lt;l;i++)&#123;<br>      <span class="hljs-comment">//逐项进行observe</span><br>      <span class="hljs-title function_">observe</span>(arr[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三-Dep类——依赖收集"><a href="#三-Dep类——依赖收集" class="headerlink" title="三.Dep类——依赖收集"></a>三.Dep类——依赖收集</h2><pre><code class="hljs">在vue中,可能我们在vue实例内部定义的数据不一定会同时使用数据,我们没必要给未使用的数据进行响应式处理.因此我们需要判断那些数据是正在被使用的,然后打上标记,这个标记要求是在全局唯一的位置进行存放.一般来说我们选择Dep类,标记为Dep.target当然你也可以选择window对象来存放.</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dep</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span> = [] <span class="hljs-comment">//定义一个数组用来存放依赖——Watcher类的实例</span><br>    &#125;<br>    <span class="hljs-title function_">notify</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">let</span> sub = <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>.<span class="hljs-title function_">slice</span>() <span class="hljs-comment">//浅拷贝一份依赖数组</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; sub.<span class="hljs-property">length</span>; i++)&#123;<br>            <span class="hljs-comment">//遍历数组 通知所有观察者数据更新</span><br>            sub[i].<span class="hljs-title function_">update</span>()<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">depend</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addSub</span>(<span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span>)<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">addSub</span>(<span class="hljs-params">sub</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>.<span class="hljs-title function_">push</span>(sub)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">我们需要在defineReactive函数,Observer类中实例化Dep类</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">defineReactive</span>(<span class="hljs-params">obj,key,val</span>) &#123;<br>    <span class="hljs-keyword">let</span> dep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dep</span>()<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj,key,&#123;<br>        <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-comment">//在getter收集依赖</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span>)&#123;<br>                dep.<span class="hljs-title function_">depend</span>()<br>                <span class="hljs-keyword">if</span>(childOb)&#123;<br>                    childOb.<span class="hljs-property">dep</span>.<span class="hljs-title function_">depend</span>()<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> val<br>        &#125;,<br>        <span class="hljs-title function_">set</span>(<span class="hljs-params">newValue</span>)&#123;<br>            <span class="hljs-comment">//在setter发布更新</span><br>            dep.<span class="hljs-title function_">notify</span>()<br>        &#125;<br>    &#125;)<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">value</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">dep</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dep</span>()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四-Watcher类——订阅者"><a href="#四-Watcher类——订阅者" class="headerlink" title="四.Watcher类——订阅者"></a>四.Watcher类——订阅者</h2><pre><code class="hljs">Watcher是一个观察者对象。依赖收集以后Watcher对象会被保存在Dep的subs中，数据变动的时候Dep会通知Watcher实例，然后由Watcher实例回调cb进行视图的更新。</code></pre><h3 id="1-Watcher类"><a href="#1-Watcher类" class="headerlink" title="1.Watcher类"></a>1.Watcher类</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Watcher</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">target,expression,callback</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">target</span> = target<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">getter</span> = <span class="hljs-title function_">parsePath</span>(expression)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">callback</span> = callback<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>()<span class="hljs-comment">//获取访问的属性的值</span><br>    &#125;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//将这个Watcher实例存放到Dep.target上</span><br>        <span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span> = <span class="hljs-variable language_">this</span><br>        <span class="hljs-keyword">let</span> obj = <span class="hljs-variable language_">this</span>.<span class="hljs-property">target</span><br>        <span class="hljs-keyword">var</span> value<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//通过getter方法获取到最新的value值</span><br>            value = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getter</span>(obj)<br>        &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;报错了~~~&#x27;</span>) <br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            <span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span> = <span class="hljs-literal">null</span> <span class="hljs-comment">//让这个实例从Dep.target上推下，让其他的实例上位</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> value<br>    &#125;<br>    <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getAndInvoke</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">callback</span>)<br>    &#125;<br>    <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">run</span>()<br>    &#125;<br>    <span class="hljs-title function_">getAndInvoke</span>(<span class="hljs-params">cb</span>)&#123;<br>        <span class="hljs-keyword">let</span> value = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>()<br>        <span class="hljs-keyword">if</span>(value !== <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> || <span class="hljs-keyword">typeof</span> value == <span class="hljs-string">&#x27;object&#x27;</span>)&#123;<br>            <span class="hljs-keyword">let</span> oldVlaue = <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span><br>            cb.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">target</span>,value,oldVlaue)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-parsePath函数——根据提供的路径寻找对象身上的属性"><a href="#2-parsePath函数——根据提供的路径寻找对象身上的属性" class="headerlink" title="2.parsePath函数——根据提供的路径寻找对象身上的属性"></a>2.parsePath函数——根据提供的路径寻找对象身上的属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">parsePath</span>(<span class="hljs-params">str</span>) &#123;<br>    <span class="hljs-keyword">let</span> arr = str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">obj</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i&lt;arr.<span class="hljs-property">length</span>; i++)&#123;<br>            obj = obj[arr[i]]<br>        &#125;<br>        <span class="hljs-keyword">return</span> obj<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Framework</category>
      
      <category>Vue</category>
      
      <category>Vue2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Vue2</tag>
      
      <tag>响应式原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue2虚拟DOM&amp;diff算法(简易版)</title>
    <link href="/jing-jiu/2021/06/05/Framework/Vue2/%E8%99%9A%E6%8B%9FDOM&amp;diff%E7%AE%97%E6%B3%95/"/>
    <url>/jing-jiu/2021/06/05/Framework/Vue2/%E8%99%9A%E6%8B%9FDOM&amp;diff%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><img src="/jing-jiu/./diff%E7%AE%97%E6%B3%95.png" alt="$watchEvent"></p><h1 id="一、虚拟DOM简介"><a href="#一、虚拟DOM简介" class="headerlink" title="一、虚拟DOM简介"></a>一、虚拟DOM简介</h1><h2 id="什么是虚拟DOM"><a href="#什么是虚拟DOM" class="headerlink" title="什么是虚拟DOM"></a>什么是虚拟DOM</h2><pre><code class="hljs">虚拟DOM是一种优化性能的解决方案,当某个状态发生变化时,只更新与这个状态有关的DOM节点。其本质是一个JavaScript对象,内部保存了与虚拟DOM对应的真实DOM,子节点,选择器等属性。当然，虚拟DOM只是其中一个解决方案,如在Angular中就是通过脏检查的流程。</code></pre><h2 id="为什么引入虚拟DOM"><a href="#为什么引入虚拟DOM" class="headerlink" title="为什么引入虚拟DOM"></a>为什么引入虚拟DOM</h2><p>1.ES和 DOM是两种东西，每次连接都需要消耗性能（由于浏览器通常将DOM和ECMAScript独立实现，因此JS每次去访问DOM都会消耗大量的性能）<br>2.操作DOM会导致重排和重绘，重排会占用、消耗CPU; 重绘会占用、消耗GPU<br>(重排：当DOM的变化影响了元素的几何属性（宽和高），浏览器需要重新计算元素的几何属性，同样其他相邻元素的几何属性和位置也会因此受到影响。浏览器会使渲染树中受到影响的部分失效，并重新构造渲染树。这个过程称为“重排”。<br>重绘：完成重排后，浏览器会重新绘制受影响的部分到屏幕中，该过程称为重绘.)<br>因此,我们需要尽可能减少访问DOM,虚拟DOM可以帮助我们减少对DOM的访问</p><h1 id="二、diff算法"><a href="#二、diff算法" class="headerlink" title="二、diff算法"></a>二、diff算法</h1><p>diff算法本质就是通过对比新旧的虚拟DOM来检查哪些节点需要更新&#x2F;删除&#x2F;增加等操作并访问DOM更新视图。</p><h2 id="1-vnode"><a href="#1-vnode" class="headerlink" title="1.vnode"></a>1.vnode</h2><pre><code class="hljs">你可以将vnode理解为一个节点描述对象,他描述了怎样创建一个真实DOM节点 你可以将vnode理解成JavaScript对象版本的DOM元素</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">vnode</span>(<span class="hljs-params">sel, data, children, text, elm</span>) &#123;<br><span class="hljs-comment">//sel 选择器 data 节点的属性 children 子节点 text 文本 elm 真实DOM</span><br>    <span class="hljs-keyword">let</span> key = data.<span class="hljs-property">key</span><br>    <span class="hljs-keyword">return</span> &#123; sel, data, children, text, elm, key &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-patch"><a href="#2-patch" class="headerlink" title="2.patch"></a>2.patch</h2><pre><code class="hljs">patch函数用来将vnode渲染成真正的DOM 通过对比新旧虚拟节点进而更新视图</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">patch</span>(<span class="hljs-params">oldVnode, newVnode</span>) &#123;<br>    <span class="hljs-comment">//判断旧节点是真实还是虚拟节点 如果是真实节点  将其转换为虚拟节点   elm就是对应真实的dom节点</span><br>    <span class="hljs-keyword">if</span> (oldVnode.<span class="hljs-property">sel</span> == <span class="hljs-string">&#x27;&#x27;</span> || oldVnode.<span class="hljs-property">sel</span> == <span class="hljs-literal">undefined</span>) &#123;<br>        oldVnode = <span class="hljs-title function_">vnode</span>(oldVnode.<span class="hljs-property">tagName</span>.<span class="hljs-title function_">toLocaleUpperCase</span>(), &#123;&#125;, <span class="hljs-literal">undefined</span>, <span class="hljs-literal">undefined</span>, oldVnode)<br>    &#125;<br>    <span class="hljs-comment">//判断新旧节点是否是同一节点</span><br>    <span class="hljs-keyword">if</span> (oldVnode.<span class="hljs-property">sel</span> == newVnode.<span class="hljs-property">sel</span> &amp;&amp; oldVnode.<span class="hljs-property">key</span> == newVnode.<span class="hljs-property">key</span>) &#123;<br>        <span class="hljs-comment">//是同一节点  比较新旧节点</span><br>        <span class="hljs-title function_">patchVnode</span>(oldVnode,newVnode)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//不是同一节点   插入新的 删除旧的</span><br>        <span class="hljs-keyword">let</span> nodeElm = <span class="hljs-title function_">creatElement</span>(newVnode)<br>        oldVnode.<span class="hljs-property">elm</span>.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">insertBefore</span>(nodeElm, oldVnode.<span class="hljs-property">elm</span>);<br>        oldVnode.<span class="hljs-property">elm</span>.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(oldVnode.<span class="hljs-property">elm</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-patchVnode"><a href="#3-patchVnode" class="headerlink" title="3.patchVnode"></a>3.patchVnode</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">patchVnode</span>(<span class="hljs-params">oldVnode, newVnode</span>) &#123;<br>    <span class="hljs-keyword">if</span> (newVnode !== oldVnode) &#123;<br>        <span class="hljs-comment">//新节点有text属性</span><br>        <span class="hljs-keyword">if</span> (newVnode.<span class="hljs-property">text</span>) &#123;<br>            <span class="hljs-comment">//新旧text不同</span><br>            <span class="hljs-keyword">if</span> (newVnode.<span class="hljs-property">text</span> !== oldVnode.<span class="hljs-property">text</span>) &#123;<br>                oldVnode.<span class="hljs-property">elm</span>.<span class="hljs-property">innerText</span> = newVnode.<span class="hljs-property">text</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//新节点有children属性</span><br>        <span class="hljs-keyword">if</span> (newVnode.<span class="hljs-property">children</span>) &#123;<br>            <span class="hljs-comment">//旧节点是text</span><br>            <span class="hljs-keyword">if</span> (oldVnode.<span class="hljs-property">text</span>) &#123;<br>                oldVnode.<span class="hljs-property">elm</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&#x27;</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; newVnode.<span class="hljs-property">children</span>.<span class="hljs-property">length</span>; i++) &#123;<br>                    <span class="hljs-keyword">let</span> dom = <span class="hljs-title function_">creatElement</span>(newVnode.<span class="hljs-property">children</span>[i])<br>                    oldVnode.<span class="hljs-property">elm</span>.<span class="hljs-title function_">appendChild</span>(dom)<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//旧节点是children 最小量更新</span><br>            <span class="hljs-keyword">if</span> (oldVnode.<span class="hljs-property">children</span>) &#123;<br>                newVnode.<span class="hljs-property">elm</span> = <span class="hljs-title function_">creatElement</span>(newVnode)<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newVnode);<br>                <span class="hljs-title function_">updateChildren</span>(oldVnode.<span class="hljs-property">elm</span>, oldVnode.<span class="hljs-property">children</span>, newVnode.<span class="hljs-property">children</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-h"><a href="#4-h" class="headerlink" title="4.h"></a>4.h</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">h</span>(<span class="hljs-params">sel, data, c</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> c == <span class="hljs-string">&#x27;string&#x27;</span> || <span class="hljs-keyword">typeof</span> c == <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>        <span class="hljs-comment">//h(&#x27;div&#x27;,&#123;&#125;,&#x27;文字&#x27;)</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">vnode</span>(sel, data, <span class="hljs-literal">undefined</span>, c, <span class="hljs-literal">undefined</span>)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(c)) &#123;<br>        <span class="hljs-comment">//h(&#x27;div&#x27;,&#123;&#125;,&#123;h(),h()&#125;)</span><br>        <span class="hljs-keyword">let</span> children = []<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; c.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (!c[i].<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;sel&#x27;</span>)) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;第&#x27;</span> + i + <span class="hljs-string">&#x27;个数据中应存在sel属性&#x27;</span>)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                children.<span class="hljs-title function_">push</span>(c[i])<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">vnode</span>(sel, data, children, <span class="hljs-literal">undefined</span>, <span class="hljs-literal">undefined</span>)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> c == <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; c.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;sel&#x27;</span>)) &#123;<br>        <span class="hljs-comment">//h(&#x27;div&#x27;,&#123;&#125;,h())</span><br>        <span class="hljs-keyword">let</span> children = [c]<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">vnode</span>(sel, data, children, <span class="hljs-literal">undefined</span>, <span class="hljs-literal">undefined</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-creatElement"><a href="#5-creatElement" class="headerlink" title="5.creatElement"></a>5.creatElement</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">creatElement</span>(<span class="hljs-params">v_node</span>) &#123;<br>    <span class="hljs-keyword">let</span> domNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(v_node.<span class="hljs-property">sel</span>)<br>    <span class="hljs-comment">//传入的是文字</span><br>    <span class="hljs-keyword">if</span>(v_node.<span class="hljs-property">text</span> !== <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; (v_node.<span class="hljs-property">children</span> == <span class="hljs-literal">undefined</span> || v_node.<span class="hljs-property">children</span>.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>))&#123;<br>        domNode.<span class="hljs-property">innerText</span> = v_node.<span class="hljs-property">text</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(v_node.<span class="hljs-property">children</span>.<span class="hljs-property">length</span> != <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">//传入的是子节点的数组  遍历该数组 将数组的dom对象添加到父节点中</span><br>        <span class="hljs-keyword">let</span> arr = v_node.<span class="hljs-property">children</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-property">length</span>;i++)&#123;<br>            <span class="hljs-keyword">let</span> nodeElm = <span class="hljs-title function_">creatElement</span>(arr[i])<br>            domNode.<span class="hljs-title function_">appendChild</span>(nodeElm)<br>        &#125;<br>    &#125;  <br>    v_node.<span class="hljs-property">elm</span> = domNode<br>    <span class="hljs-keyword">return</span> v_node.<span class="hljs-property">elm</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-updateChildren"><a href="#6-updateChildren" class="headerlink" title="6.updateChildren"></a>6.updateChildren</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkSameNode</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-keyword">if</span> (a.<span class="hljs-property">sel</span> == b.<span class="hljs-property">sel</span> &amp;&amp; a.<span class="hljs-property">key</span> == b.<span class="hljs-property">key</span>) &#123;<br>        <span class="hljs-comment">//console.log(a.elm, b.elm);</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> a.<span class="hljs-property">sel</span> == b.<span class="hljs-property">sel</span> &amp;&amp; a.<span class="hljs-property">key</span> == b.<span class="hljs-property">key</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateChildren</span>(<span class="hljs-params">parentElm, oldC, newC</span>) &#123;<br><br>    <span class="hljs-keyword">let</span> newStartIdx = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">let</span> oldStartIdx = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">let</span> newEndIdx = newC.<span class="hljs-property">length</span> - <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">let</span> oldEndIdx = oldC.<span class="hljs-property">length</span> - <span class="hljs-number">1</span><br><br><br>    <span class="hljs-keyword">let</span> newStartVnode = newC[newStartIdx]<br><br>    <span class="hljs-keyword">let</span> oldStartVnode = oldC[oldStartIdx]<br><br>    <span class="hljs-keyword">let</span> newEndVnode = newC[newEndIdx]<br><br>    <span class="hljs-keyword">let</span> oldEndVnode = oldC[oldEndIdx]<br><br>    <span class="hljs-keyword">let</span> keyMap = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">while</span> (newStartIdx &lt;= newEndIdx &amp;&amp; oldStartIdx &lt;= oldEndIdx) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newStartIdx, newEndIdx, oldStartIdx, oldEndIdx);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">checkSameNode</span>(oldStartVnode, newStartVnode)) &#123;<br>            <span class="hljs-comment">//新前 旧前</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;新前 旧前&#x27;</span>)<br>            <span class="hljs-title function_">patchVnode</span>(oldStartVnode, newStartVnode)<br>            oldStartVnode = oldC[++oldStartIdx]<br>            newStartVnode = newC[++newStartIdx]<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">checkSameNode</span>(oldEndVnode, newEndVnode)) &#123;<br>            <span class="hljs-comment">//新后 旧后</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;新后 旧后&#x27;</span>);<br>            <span class="hljs-title function_">patchVnode</span>(oldEndVnode, newEndVnode)<br>            oldEndVnode = oldC[--oldEndIdx]<br>            newEndVnode = newC[--newEndIdx]<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">checkSameNode</span>(oldStartVnode, newEndVnode)) &#123;<br>            <span class="hljs-comment">//新后 旧前</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;新后 旧前&#x27;</span>);<br>            <span class="hljs-comment">//如果节点上的数据一致需要移动节点  插入到所有未处理节点之前</span><br>            parentElm.<span class="hljs-title function_">insertBefore</span>(oldStartVnode.<span class="hljs-property">elm</span>, oldEndVnode.<span class="hljs-property">elm</span>);<br>            <span class="hljs-title function_">patchVnode</span>(oldStartVnode, newEndVnode)<br>            oldStartVnode = oldC[++oldStartIdx]<br>            newEndVnode = newC[--newEndIdx]<br><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">checkSameNode</span>(oldEndVnode, newStartVnode)) &#123;<br>            <span class="hljs-comment">//新前 旧后</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;新前 旧后&#x27;</span>);<br>            parentElm.<span class="hljs-title function_">insertBefore</span>(oldEndVnode.<span class="hljs-property">elm</span>, oldStartVnode.<span class="hljs-property">elm</span>)<br>            <span class="hljs-title function_">patchVnode</span>(oldEndVnode, newStartVnode)<br>            oldEndVnode = oldC[--oldEndIdx]<br>            newStartVnode = newC[++newStartIdx]<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//都没有命中</span><br>            <span class="hljs-keyword">if</span> (!keyMap) &#123;<br>                keyMap = &#123;&#125;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = oldStartIdx; i &lt; oldEndIdx; i++) &#123;<br>                    key = oldC[i].<span class="hljs-property">key</span><br>                    keyMap[key] = i<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">let</span> keyOldIdx = keyMap[newStartVnode.<span class="hljs-property">key</span>]<br>            <span class="hljs-keyword">if</span>(keyOldIdx == <span class="hljs-literal">undefined</span>)&#123;<br>                <span class="hljs-comment">//全新的项</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;全新的项&#x27;</span>);<br>                parentElm.<span class="hljs-title function_">insertBefore</span>(newStartVnode.<span class="hljs-property">elm</span>,oldStartVnode.<span class="hljs-property">elm</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//在旧节点中存在的项   需要移动到新的位置</span><br>                <span class="hljs-title function_">patchVnode</span>(oldC[keyOldIdx],newStartVnode)<br>                parentElm.<span class="hljs-title function_">insertBefore</span>(oldC[keyOldIdx].<span class="hljs-property">elm</span>,oldStartVnode.<span class="hljs-property">elm</span>);<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;在旧节点中存在的项   需要移动到新的位置&#x27;</span>);<br>            &#125;<br>            newStartVnode = newC[++newStartIdx]<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (newStartIdx &lt;= newEndIdx) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;仍有新节点未处理&#x27;</span>);<br>        <span class="hljs-keyword">while</span> (newStartIdx &lt;= newEndIdx) &#123;<br>            parentElm.<span class="hljs-title function_">insertBefore</span>(newEndVnode.<span class="hljs-property">elm</span>,oldStartVnode.<span class="hljs-property">elm</span>)<br>            newEndVnode = newC[--newEndIdx]<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (oldStartIdx &lt;= oldEndIdx) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;仍有旧节点未处理&#x27;</span>);<br>        <span class="hljs-keyword">while</span> (oldStartIdx &lt;= oldEndIdx) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(oldEndVnode);<br>            parentElm.<span class="hljs-title function_">removeChild</span>(oldEndVnode.<span class="hljs-property">elm</span>)<br>            oldEndVnode = oldC[--oldEndIdx]<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Framework</category>
      
      <category>Vue</category>
      
      <category>Vue2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Vue2</tag>
      
      <tag>diff算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue2响应式原理（一）</title>
    <link href="/jing-jiu/2021/05/05/Framework/Vue2/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86-1/"/>
    <url>/jing-jiu/2021/05/05/Framework/Vue2/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86-1/</url>
    
    <content type="html"><![CDATA[<h1 id="原理-简易版"><a href="#原理-简易版" class="headerlink" title="原理(简易版)"></a>原理(简易版)</h1><h2 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h2><p>在构建一个Vue例时，你可能会传入以下参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <span class="hljs-attr">data</span>:&#123;<br>        <span class="hljs-attr">msg</span>:<span class="hljs-string">&quot;HXH&quot;</span>,<br>        <span class="hljs-attr">age</span>:<span class="hljs-string">&#x27;18&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-title function_">change</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span> = <span class="hljs-string">&#x27;ZSW&#x27;</span><br>        &#125;<br>    &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>因此首先我们先声明一个Vue的类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vue</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(options.<span class="hljs-property">el</span>)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$options</span> = options<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$watchEvent</span> = &#123;&#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">proxyData</span>()<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">observe</span>()<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">compile</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2><p>已知vue是一个mvvm模式的框架，那么如何实现数据的更新呢？就要用到get，set方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">proxyData</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$options</span>.<span class="hljs-property">data</span>) &#123;<br>            <span class="hljs-keyword">let</span> _this = <span class="hljs-variable language_">this</span><br>            <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-variable language_">this</span>,key,&#123;<br>                <span class="hljs-attr">configurable</span>:<span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">enumerable</span>:<span class="hljs-literal">true</span>,<br>                <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>                    <span class="hljs-keyword">return</span> _this.<span class="hljs-property">$options</span>.<span class="hljs-property">data</span>[key]<br>                &#125;,<br>                <span class="hljs-title function_">set</span>(<span class="hljs-params">val</span>)&#123;<br>                    _this.<span class="hljs-property">$options</span>.<span class="hljs-property">data</span>[key] = val<br>                &#125;<br>            &#125;)<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="数据劫持"><a href="#数据劫持" class="headerlink" title="数据劫持"></a>数据劫持</h2><p>Object.defineProperty来劫持对象属性的setter和getter操作，并写入一个监听器，当数据发生变化的时候发出通知<br>此时我们需要在vue实例中绑定一个监听对象，对象中存放数据监听的内容。当数据发生变化时进行更新<br><img src="https://img-blog.csdnimg.cn/20210208194509380.png" alt="$watchEvent"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">observe</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$options</span>.<span class="hljs-property">data</span>) &#123;<br>            <span class="hljs-keyword">let</span> _this = <span class="hljs-variable language_">this</span><br>            <span class="hljs-keyword">let</span> value = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$options</span>.<span class="hljs-property">data</span>[key]<br>            <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$options</span>.<span class="hljs-property">data</span>,key,&#123;<br>                <span class="hljs-attr">configurable</span>:<span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">enumerable</span>:<span class="hljs-literal">true</span>,<br>                <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>                    <span class="hljs-keyword">return</span> value<br>                &#125;,<br>                <span class="hljs-title function_">set</span>(<span class="hljs-params">val</span>)&#123;<br>                    value = val<br>                    <span class="hljs-keyword">if</span>(_this.<span class="hljs-property">$watchEvent</span>[key])&#123;<br>                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(_this.<span class="hljs-property">$watchEvent</span>[key]);<br>                        _this.<span class="hljs-property">$watchEvent</span>[key].<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>)=&gt;</span>&#123;<br>                            item.<span class="hljs-title function_">update</span>()<span class="hljs-comment">//更新函数</span><br>                        &#125;)<br>                    &#125;<br>                &#125;<br>            &#125;)<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>监听的类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Watch</span>&#123;<br>    <span class="hljs-comment">//vm--vue实例 key--发生改变的数据 node--dom对象 attr--dom属性</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">vm,key,node,attr</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">vm</span> = vm<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">key</span> = key<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span> = node<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">attr</span> = attr<br>    &#125;<br>    <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//将数据更新到view视图上</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">node</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">attr</span>] = <span class="hljs-variable language_">this</span>.<span class="hljs-property">vm</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">key</span>]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">compile</span><span class="hljs-params">(cNode)</span></span>&#123;<br>    <span class="hljs-comment">//循环出app下的各个节点</span><br>    cNode<span class="hljs-selector-class">.childNodes</span><span class="hljs-selector-class">.forEach</span>((node)=&gt;&#123;<br>        <span class="hljs-comment">//根据节点类型进行编译</span><br>        <span class="hljs-built_in">if</span>(node<span class="hljs-selector-class">.nodeType</span> == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">//元素节点</span><br>            <span class="hljs-built_in">if</span>(node<span class="hljs-selector-class">.hasAttribute</span>(<span class="hljs-string">&#x27;attribute&#x27;</span>))&#123;<br>                <span class="hljs-comment">//attribute--在view绑定的属性</span><br>            &#125;<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><p>通过getAttribute方法获取属性的值<br>创建Watch实例创建数据与属性的联系并渲染数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(node.<span class="hljs-title function_">hasAttribute</span>(<span class="hljs-string">&#x27;v-html&#x27;</span>))&#123;<br>    <span class="hljs-keyword">let</span> vmKey = node.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;v-html&#x27;</span>)<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">hasOwnProperty</span>(vmKey))&#123;<br>        node.<span class="hljs-property">innerHTML</span> = <span class="hljs-variable language_">this</span>[vmKey]<br>        <span class="hljs-keyword">let</span> watcher = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Watch</span>(<span class="hljs-variable language_">this</span>,vmKey,node,<span class="hljs-string">&#x27;innerHTML&#x27;</span>)<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$watchEvent</span>[vmKey])&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$watchEvent</span>[vmKey].<span class="hljs-title function_">push</span>(watcher)<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$watchEvent</span>[vmKey] = []<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$watchEvent</span>[vmKey].<span class="hljs-title function_">push</span>(watcher)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(node.<span class="hljs-title function_">hasAttribute</span>(<span class="hljs-string">&#x27;v-model&#x27;</span>))&#123;<br>    <span class="hljs-keyword">let</span> vmKey = node.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;v-model&#x27;</span>).<span class="hljs-title function_">trim</span>()<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">hasOwnProperty</span>(vmKey))&#123;<br>        node.<span class="hljs-property">value</span> = <span class="hljs-variable language_">this</span>[vmKey]<br>        <span class="hljs-keyword">let</span> watcher = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Watch</span>(<span class="hljs-variable language_">this</span>,vmKey,node,<span class="hljs-string">&quot;value&quot;</span>)<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$watchEvent</span>[vmKey])&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$watchEvent</span>[vmKey].<span class="hljs-title function_">push</span>(watcher)<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$watchEvent</span>[vmKey] = []<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$watchEvent</span>[vmKey].<span class="hljs-title function_">push</span>(watcher)<br>        &#125;<br>    &#125;<br>    node.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;input&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-variable language_">this</span>[vmKey] = node.<span class="hljs-property">value</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="click"><a href="#click" class="headerlink" title="@click"></a>@click</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(node.<span class="hljs-title function_">hasAttribute</span>(<span class="hljs-string">&#x27;@click&#x27;</span>))&#123;<br>    <span class="hljs-keyword">let</span> vmKey = node.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;@click&#x27;</span>).<span class="hljs-title function_">trim</span>()<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$options</span>.<span class="hljs-property">methods</span>.<span class="hljs-title function_">hasOwnProperty</span>(vmKey))&#123;<br>        node.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">$options</span>.<span class="hljs-property">methods</span>[vmKey].<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="模板语法-easy"><a href="#模板语法-easy" class="headerlink" title="模板语法(easy)"></a>模板语法(easy)</h3><p>你需要给挂载的元素内的所有dom节点都进行编译<br>才可获取到模板语法所在的文本节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(node.<span class="hljs-property">childNodes</span>.<span class="hljs-property">length</span>&gt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">compile</span>(node)<br>&#125;<br></code></pre></td></tr></table></figure><p>利用正则表达式找出模板语法并进行渲染</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">if</span>(node.nodeType == <span class="hljs-number">3</span>)&#123;<br>    <span class="hljs-comment">//文本类型</span><br>    let reg = /\&#123;\&#123;(.*?)\&#125;\&#125;/g;<br>    let text = node.textContent<br>    node.textContent = text.replace(reg,(match,vmKey)=&gt;&#123;<br>        vmKey = vmKey.trim()<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.hasOwnProperty(vmKey))&#123;<br>            node.textContent = <span class="hljs-keyword">this</span>[vmKey]<br>            let watcher = new Watch(<span class="hljs-keyword">this</span>,vmKey,node,<span class="hljs-string">&quot;textContent&quot;</span>)<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.$watchEvent[vmKey])&#123;<br>                <span class="hljs-keyword">this</span>.$watchEvent[vmKey].push(watcher)<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">this</span>.$watchEvent[vmKey] = []<br>                <span class="hljs-keyword">this</span>.$watchEvent[vmKey].push(watcher)<br>            &#125;<br>        &#125; <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>[vmKey]<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Framework</category>
      
      <category>Vue</category>
      
      <category>Vue2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Vue2</tag>
      
      <tag>响应式原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue概念</title>
    <link href="/jing-jiu/2021/04/05/Framework/Vue2/vue%E6%A6%82%E5%BF%B5/"/>
    <url>/jing-jiu/2021/04/05/Framework/Vue2/vue%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="一-软件架构模式"><a href="#一-软件架构模式" class="headerlink" title="一.软件架构模式"></a>一.软件架构模式</h1><h2 id="MVC模式简介"><a href="#MVC模式简介" class="headerlink" title="MVC模式简介"></a>MVC模式简介</h2><p><img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015020105.png" alt="img"></p><p>M–&gt;model–&gt;负责储存数据–&gt;对象，数组等变量</p><p>V–&gt;view–&gt;用户所看到的界面(html,css)</p><p>C–&gt;controller–&gt;业务逻辑（事件交互  如何根据视图与用户的交互改变数据–&gt;操作DOM对象进行事件的绑定）</p><ol><li>View 传送指令到 Controller</li><li>Controller 完成业务逻辑后，要求 Model 改变状态</li><li>Model 将新的数据发送到 View，用户得到反馈</li></ol><p>eg: Backbone.JS</p><ol><li>用户可以向 View 发送指令（DOM 事件），再由 View 直接要求 Model 改变状态。</li><li>用户也可以直接向 Controller 发送指令（改变 URL 触发 hashChange 事件），再由 Controller 发送给 View。</li><li>Controller 非常薄，只起到路由的作用，而 View 非常厚，业务逻辑都部署在 View。所以，Backbone 索性取消了 Controller，只保留一个 Router（路由器） 。</li></ol><h2 id="MVP模式简介"><a href="#MVP模式简介" class="headerlink" title="MVP模式简介"></a>MVP模式简介</h2><p><img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015020109.png" alt="img"></p><p>M–&gt;model–&gt;负责储存数据–&gt;对象，数据等变量</p><p>V–&gt;view–&gt;用户所看到的界面(html,css)</p><p>P–&gt;presenter–&gt; 包含着组件的事件处理，负责检索 Model 获取资料，和将获取的资料经过格式转换与 View 进行沟通。</p><ol><li>各部分之间的通信，都是双向的。</li><li>View 与 Model 不发生联系，都通过 Presenter 传递。</li><li>View 非常薄，不部署任何业务逻辑，称为”被动视图”（Passive View），即没有任何主动性，而 Presenter非常厚，所有逻辑都部署在那里。</li></ol><h2 id="MVVM模式简介"><a href="#MVVM模式简介" class="headerlink" title="MVVM模式简介"></a>MVVM模式简介</h2><p>MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。</p><p> 唯一的区别是，它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然。Vue和Angular都采用这种模式。</p><p><img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015020110.png" alt="img"></p><h1 id="二-VUE使用"><a href="#二-VUE使用" class="headerlink" title="二.VUE使用"></a>二.VUE使用</h1><p><img src="/jing-jiu/./new-vue.png" alt="img"></p><h2 id="1-条件渲染"><a href="#1-条件渲染" class="headerlink" title="1.条件渲染"></a>1.条件渲染</h2><pre><code class="hljs">1.v-if  --&gt;如果值为false则目标不会被渲染到页面上 若已经渲染到DOM上，则会从DOM中去除2.v-show --&gt;display：none  会渲染到DOM上</code></pre><h2 id="2-列表渲染"><a href="#2-列表渲染" class="headerlink" title="2.列表渲染"></a>2.列表渲染</h2><pre><code class="hljs">v-for 添加key属性可以使被渲染出的元素具有唯一性</code></pre><h2 id="3-模板语法"><a href="#3-模板语法" class="headerlink" title="3.模板语法"></a>3.模板语法</h2><pre><code class="hljs">形如 &#123;&#123; H?a:b &#125;&#125; 可在其中添加简单的三元运算符</code></pre><h2 id="4-计算属性"><a href="#4-计算属性" class="headerlink" title="4.计算属性"></a>4.计算属性</h2><pre><code class="hljs">在computed对象内定义计算规则并在view中调用 会将计算的结果保存  只要参数内容不修改,会调用保存的结果而不会重新计算</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;example&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Original message: &quot;&#123;&#123; message &#125;&#125;&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#example&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-comment">// 计算属性的 getter</span><br>    <span class="hljs-attr">reversedMessage</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// `this` 指向 vm 实例</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="5-侦听属性"><a href="#5-侦听属性" class="headerlink" title="5.侦听属性"></a>5.侦听属性</h2><pre><code class="hljs">在watch对象中定义需要监听数据的函数 数据改变就会执行该函数watch对象中  对象的键名是要监听的数据变量名 键值是要执行的函数</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">watch</span>:&#123;<br><span class="hljs-attr">arr</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(val)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-表单输入绑定"><a href="#6-表单输入绑定" class="headerlink" title="6.表单输入绑定"></a>6.表单输入绑定</h2><pre><code class="hljs">使用v-model进行对数据进行双向数据绑定 修饰符……</code></pre><h2 id="7-生命周期"><a href="#7-生命周期" class="headerlink" title="7.生命周期"></a>7.生命周期</h2><p><img src="/jing-jiu/./lifeCycle.jpg" alt="Vue 实例生命周期"></p><h3 id="什么是vue生命周期？"><a href="#什么是vue生命周期？" class="headerlink" title="什么是vue生命周期？"></a>什么是vue生命周期？</h3><ul><li>Vue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。在整个Vue实例的生命周期中会执行这些钩子函数</li></ul><h3 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h3><ul><li>实例初始化之后，this指向创建的实例，不能访问到data、computed、watch、methods上的方法和数据</li></ul><h3 id="beforeCreate与created之间"><a href="#beforeCreate与created之间" class="headerlink" title="beforeCreate与created之间"></a>beforeCreate与created之间</h3><ul><li>在beforeCreate与created之间进行初始化事件,数据的观测 绑定data数据，methods方法等</li></ul><h3 id="created"><a href="#created" class="headerlink" title="created"></a>created</h3><ul><li>实例创建完成，可访问data、computed、watch、methods上的方法和数据，未挂载到DOM，不能访问到$el属性。$ref属性内容为空数组</li></ul><h3 id="created与beforeMount之间"><a href="#created与beforeMount之间" class="headerlink" title="created与beforeMount之间"></a>created与beforeMount之间</h3><ul><li>首先会判断对象是否有el选项。如果有的话就继续向下编译，如果没有el选项，则停止编译，也就意味着停止了生命周期，直到在该vue实例上调用vm.$mount(el)—–如果我们在后面继续调用vm.$mount(el),(挂载dom节点)可以发现代码继续向下执行了<br>接下–&gt;template参数选项的有无对生命周期的影响。<br>（1）.如果vue实例对象中有template参数选项，则将其作为模板编译成render函数。<br>（2）.如果没有template选项，则将外部HTML作为模板编译。<br>（3）.可以看到template中的模板优先级要高于outer HTML的优先级<br>修改代码如下, 在HTML结构中增加了一串html，在vue对象中增加了template选项： 可以发现template中的内容会覆盖outer HTML中的内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--html中修改的--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;message + &#x27;这是在outer HTML中的&#x27;&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;h1&gt;&#123;&#123;message +&#x27;这是在template中的&#x27;&#125;&#125;&lt;/h1&gt;&quot;</span>, <span class="hljs-comment">//在vue配置项中修改的</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Vue的生命周期&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>这下就可以想想什么el的判断要在template之前了~是因为vue需要通过el找到对应的outer template。<br>在vue对象中还有一个render函数(渲染函数)，它是以createElement作为参数，然后做渲染操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <span class="hljs-attr">render</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">createElement</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;h1&#x27;</span>, <span class="hljs-string">&#x27;this is createElement&#x27;</span>)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>可以看到页面中渲染的为this is createElement<br>因此优先级为render函数选项 &gt; template选项 &gt; outer HTML</p><h3 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h3><ul><li><p>在挂载开始之前被调用，beforeMount之前，会找到对应的template，并编译成render函数  给Vue实例添加$el成员   此时的this.$el就是一个DOM对象  但可以发现，此时 h1中还是通进行占位 因为此时还未挂载到页面上   此时仍是虚拟DOM的形式存在</p><p><img src="https://img-blog.csdnimg.cn/20210208194651878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjcxMTkz,size_16,color_FFFFFF,t_70"></p></li></ul><h3 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h3><ul><li><p>实例挂载到DOM上，此时可以通过DOM API获取到DOM节点，$ref属性可以访问  h1处不再是用占位。</p><p><img src="https://img-blog.csdnimg.cn/20210208194617581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjcxMTkz,size_16,color_FFFFFF,t_70"></p></li></ul><h3 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h3><ul><li>响应式数据更新时调用，发生在虚拟DOM打补丁之前</li></ul><h3 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h3><ul><li>虚拟 DOM 重新渲染和打补丁之后调用，组件DOM已经更新，可执行依赖于DOM的操作</li></ul><h3 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="beforeDestroy"></a>beforeDestroy</h3><ul><li>实例销毁之前调用。这一步，实例仍然完全可用，this仍能获取到实例</li></ul><h3 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed"></a>destroyed</h3><ul><li>实例销毁后调用，调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁</li></ul><h2 id="8-组件基础"><a href="#8-组件基础" class="headerlink" title="8.组件基础"></a>8.组件基础</h2><h3 id="定义一个组件"><a href="#定义一个组件" class="headerlink" title="定义一个组件"></a>定义一个组件</h3><p>  调用Vue对象的component方法传入自定义组件名称，以及模板等,与根组件唯一区别是无el挂载点。之后就可以在html中通过 <code>&lt;hello&gt;&lt;/hello&gt;</code>形式调用组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">components</span>:&#123;<br>    <span class="hljs-string">&#x27;hello&#x27;</span>:<span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;hello&#x27;</span>,&#123;<br>        <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;&lt;h1 @click=&quot;change&quot;&gt;&#123;&#123;hxh&#125;&#125;&lt;/h1&gt;&#x27;</span>,<br>        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">hxh</span>:<span class="hljs-string">&#x27;hello 浩哥&#x27;</span><br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">methods</span>:&#123;<br>            <span class="hljs-title function_">change</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">hxh</span> = <span class="hljs-string">&#x27;123&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="组件间通信-props"><a href="#组件间通信-props" class="headerlink" title="组件间通信(props)"></a>组件间通信(props)</h3><h4 id="1-父子组件"><a href="#1-父子组件" class="headerlink" title="1.父子组件"></a>1.父子组件</h4><pre><code class="hljs">1&gt;父传子在子组件中添加props数组  存放与父组件通信的属性名称 父组件可以把内容通过在props中添加的属性传入子组件中</code></pre><p>  <strong>如果传给子组件的是一个方法，子组件也可以调用该方法。其中父组件方法的this指向父组件，而不是调用的组件。因此子组件调用该方法也可以操作父组件</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">hello</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&#x27;name&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hello</span>&gt;</span><br>也可以=&gt;<br> <span class="hljs-tag">&lt;<span class="hljs-name">hello</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#x27;ruarua&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hello</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-attr">name</span>:ruarua<br>&#125;<br><span class="hljs-attr">components</span>:&#123;<br> <span class="hljs-string">&#x27;hello&#x27;</span>:<span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;hello&#x27;</span>,&#123;<br>    <span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;title&#x27;</span>],<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;&lt;h1 @click=&quot;change&quot;&gt;&#123;&#123;hxh+title&#125;&#125;&lt;/h1&gt;&#x27;</span>,<br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">hxh</span>:<span class="hljs-string">&#x27;hello 浩哥&#x27;</span><br>       &#125;<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>还可以使用更简单的方法来操作</strong>  如果在子组件打印this就会发现，this身上绑定了一个$parent属性，你会发现this.$parent &#x3D;&#x3D;&#x3D; app.因此可以这样**@click&#x3D;’$parent.show(item)’**<br><strong>但是为了降低耦合不建议这样操作</strong><br>    2&gt;子传父</p><p>  使用$emit方法将子组件的值抛出(<strong>this.$emit(‘foodshow’,data)</strong>),这个方法接收两个参数–&gt;(‘自定义参数’,‘要抛出的变量’)   在父组件使用组件的位置用自定义事件接收  作为函数的一个参数传入方法中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">food</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;water&#x27;</span> @<span class="hljs-attr">foodshow</span>=<span class="hljs-string">&#x27;show&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">food</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;food&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">components</span>:&#123;<br> <span class="hljs-string">&#x27;food&#x27;</span>:<span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;food&#x27;</span>,&#123;<br>    <span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;name&#x27;</span>],<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;div&gt;&lt;h1 v-for=&#x27;item in foods&#x27; @click=&#x27;show(item)&#x27;&gt;&#123;&#123;name&#125;&#125;:&#123;&#123;item&#125;&#125;&lt;/h1&gt;&lt;/div&gt;`</span>,<br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-keyword">return</span> &#123;<br>         <span class="hljs-attr">foods</span>:[<span class="hljs-string">&#x27;apple&#x27;</span>,<span class="hljs-string">&#x27;banana&#x27;</span>,<span class="hljs-string">&#x27;peach&#x27;</span>]<br>       &#125;<br>    &#125;,<br>    <span class="hljs-attr">methods</span>:&#123;<br>      <span class="hljs-attr">show</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>            <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;foodshow&#x27;</span>,data)<br>      &#125;<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>同样的，在父组件中有一个$children <strong>但是为了降低耦合不建议这样操作</strong></p><h4 id="2-兄弟组件"><a href="#2-兄弟组件" class="headerlink" title="2.兄弟组件"></a>2.兄弟组件</h4><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>以input上的v-model为例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&#x27;user($event)&#x27;</span>&gt;<br><span class="hljs-title function_">getValue</span>(<span class="hljs-params">event</span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="组件上"><a href="#组件上" class="headerlink" title="组件上"></a>组件上</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">custom-input</span></span><br><span class="hljs-tag">  <span class="hljs-attr">v-bind:value</span>=<span class="hljs-string">&quot;searchText&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">v-on:input</span>=<span class="hljs-string">&quot;searchText = $event&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">custom-input</span>&gt;</span><br>等价于<br><span class="hljs-tag">&lt;<span class="hljs-name">custom-input</span></span><br><span class="hljs-tag">  <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;searchText&#x27;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">custom-input</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;custom-input&#x27;</span>, &#123;<br>  <span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;value&#x27;</span>],<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;input</span><br><span class="hljs-string">      v-bind:value=&quot;value&quot;</span><br><span class="hljs-string">      v-on:input=&quot;$emit(&#x27;input&#x27;,$event.target.value)&quot;</span><br><span class="hljs-string">    &gt;</span><br><span class="hljs-string">  `</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="插槽——slot"><a href="#插槽——slot" class="headerlink" title="插槽——slot"></a>插槽——slot</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>如果你想在组件内添加一些元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">custom-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;text&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">custom-input</span>&gt;</span><br>//只需要在template中添加插槽<span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>//但注意:插槽不能添加在根元素外部<br></code></pre></td></tr></table></figure><h4 id="后备内容"><a href="#后备内容" class="headerlink" title="后备内容"></a>后备内容</h4><p>如果并未在组件添加元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>//slot中的内容将会被渲染到页面<br></code></pre></td></tr></table></figure><h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><p>如果你想添加多个插槽</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">custom-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;text&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>HXH<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:age</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">custom-input</span>&gt;</span><br>//将你需要添加的元素用template标签包裹 并用v-slot:age的形式声明你想要传给的插槽<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//通过&lt;slot name=&#x27;age&#x27;&gt;&lt;/slot&gt;接收出入的元素</span><br><span class="hljs-comment">//没有name属性的template默认name=&#x27;default&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4><p>如果你希望在使用组件时能够操作组件内部的数据 **v-slot: &#x3D;&#x3D;&#x3D; # **</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">custom-input</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:default</span>=<span class="hljs-string">&quot;data&quot;</span>&gt;</span><br>    //v-slot:default=&quot;data&quot; data是你自定义的props插槽名称 你可以在template元素内部调用子组件的某些数据<br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;show(data)&#x27;</span>&gt;</span>&#123;&#123;data&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">custom-input</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&#x27;text&#x27;</span>&gt;</span>//text是你能在父组件操作的数据<br><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><p>如果你想动态的把自定义组件渲染到页面上<br>在组件上添加is属性 **:is&#x3D;’com’ **com就是要渲染的组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;com&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;show(1)&#x27;</span>&gt;</span>java<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;show(2)&#x27;</span>&gt;</span>python<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;show(3)&#x27;</span>&gt;</span>javascript<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;show(4)&#x27;</span>&gt;</span>nodejs<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在控制台打印vue实例可以看到 所有声明的组件都放在实例的$options对象的components属性上可以通过调用**this.$options.components[com1]**获取到要渲染的组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> com1 = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;java&#x27;</span>, &#123;<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">` &lt;h1&gt;JAVA&lt;/h1&gt;`</span><br>&#125;)<br><span class="hljs-keyword">let</span> com2 = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;python&#x27;</span>, &#123;<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">` &lt;h1&gt;PYTHON&lt;/h1&gt;`</span><br>&#125;)<br><span class="hljs-keyword">let</span> com3 = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;javascript&#x27;</span>, &#123;<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">` &lt;h1&gt;JAVASCRIPT&lt;/h1&gt;`</span><br>&#125;)<br><span class="hljs-keyword">let</span> com4 = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;nodejs&#x27;</span>, &#123;<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">` &lt;h1&gt;NODE-JS&lt;/h1&gt;`</span><br>&#125;)<br><span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <span class="hljs-attr">data</span>:&#123;<br>        <span class="hljs-attr">com</span>:com1<br>    &#125;,<br>    <span class="hljs-attr">methods</span>:&#123;<br>        <span class="hljs-title function_">show</span>(<span class="hljs-params">id</span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">com</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$options</span>.<span class="hljs-property">components</span>[<span class="hljs-string">&#x27;com&#x27;</span>+id]<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">components</span>:&#123;<br>        com1,com2,com3,com4<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="9-Vue-cli"><a href="#9-Vue-cli" class="headerlink" title="9.Vue-cli"></a>9.Vue-cli</h2>]]></content>
    
    
    <categories>
      
      <category>Framework</category>
      
      <category>Vue</category>
      
      <category>Vue2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Vue2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JQuery相关</title>
    <link href="/jing-jiu/2020/08/07/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JQuery/"/>
    <url>/jing-jiu/2020/08/07/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JQuery/</url>
    
    <content type="html"><![CDATA[<h1 id="1-全局调用-入口函数"><a href="#1-全局调用-入口函数" class="headerlink" title="1.全局调用(入口函数)"></a>1.全局调用(入口函数)</h1><pre><code class="hljs">## $(document).ready(function()&#123;  DOM元素加载完毕就执行&#125;)问题:如果别的js文件也使用$符号  则会执行后面的(后面的js会覆盖前面的js文件)解决：      1.放弃$使用权使用JQuery2.使用其他字符替换  var hxh = jQuery.noConflict();</code></pre><h1 id="2-核心函数-—-gt"><a href="#2-核心函数-—-gt" class="headerlink" title="2.核心函数 —&gt;$();"></a>2.核心函数 —&gt;$();</h1><pre><code class="hljs">接收函数：    1.函数    2.字符串        1&gt;字符串选择器(元素选择器,类选择器...)        2&gt;字符串代码片段  $p(&#39;`&lt;p&gt;`demo `&lt;/p&gt;`&#39;);返回一个JQuery对象  里面保存所指定的/创建的DOM元素    3.DOM元素        包装成一个JQuery对象返回</code></pre><h1 id="3-静态方法-static"><a href="#3-静态方法-static" class="headerlink" title="3.静态方法(static)"></a>3.静态方法(static)</h1><pre><code class="hljs">1.each方法 遍历数组(可遍历伪数组)    let arr = &#123;            0:1,            1:2,            2:3,            length:3    &#125;    $.each(arr,(index,value)=&gt;&#123;        console.log(index,value);    &#125;);2.map方法    原生：不可遍历伪数组        arr.map((v,i,a)=&gt;&#123;//value,index,array        console.log(v,i,a);    &#125;)    JQuery:可遍历伪数组        $.map(arr,(i,v)=&gt;&#123;            console.log(i,v);        &#125;)二者区别 map调用后默认返回一个空数组        each返回默认正在遍历的数组/伪数组        map可对遍历的数据进行处理后返回        each不会处理数据3. trim方法 去除字符串两端的空格 返回一个没有空格的字符串   demo   =&gt;demo4. isWindow方法5. isFunction方法6.holdReady方法   暂停/恢复ready方法</code></pre><h1 id="4-选择器"><a href="#4-选择器" class="headerlink" title="4.选择器"></a>4.选择器</h1><pre><code class="hljs">1.内容选择器    div:empty   选中既没有文本内容又没有子元素的指定元素    div:parent  选中有文本内容/有子元素的指定元素    div:contains(text)  里面接收要查找的文本内容  选中包含该文本内容的指定元素    div:has(&#39;selector&#39;) 选中包含指定子元素的指定元素2.其他(与css选择器语法相同)</code></pre><h1 id="5-属性，属性节点"><a href="#5-属性，属性节点" class="headerlink" title="5.属性，属性节点"></a>5.属性，属性节点</h1><pre><code class="hljs">属性:这里指的是对象身上保存的变量属性节点:在html标签中添加的属性`&lt;span name=&quot;span&quot;&gt;`1.attr方法    传入一个参数:获取所传入的属性   并返回找到符合条件的第一个元素    传入两个参数:修改目标属性的值   并返回一个包含所有目标属性的JQuery对象2.removeAttr方法    传入一个参数:删除目标属性3.prop方法    与attr方法类似  唯一区别是调用prop方法获取返回为true/false的属性会返回布尔值 默认返回true4.removeProp方法    与removeAttr方法一致5.addClass方法,removeClass方法,toggleClass方法    增/删/查(有删无增)class6.html,text,val方法    与原生js的innerHTML,innerText,value类似</code></pre><h1 id="6-操作样式"><a href="#6-操作样式" class="headerlink" title="6.操作样式"></a>6.操作样式</h1><h2 id="css方法"><a href="#css方法" class="headerlink" title="css方法"></a>css方法</h2><pre><code class="hljs">1.操作属性传入一个对象 语法与原生语法相同   设置对应DOM元素的样式传入字符串   获取对应DOM元素的属性的值</code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><pre><code class="hljs">2.操作尺寸    width() height()....3.offset 获取/修改相对于窗口的偏移量   position  获取/修改到relative的偏移量4.scrollLeft scrollTop  获取/修改滚动条的偏移量   注意传入的参数为数字</code></pre><h1 id="7-事件绑定"><a href="#7-事件绑定" class="headerlink" title="7.事件绑定"></a>7.事件绑定</h1><pre><code class="hljs">1.eventName(fn)2.on(eventName,fn)上述方法绑定事件不会覆盖  类似于addEventListener移出事件off()  不传参移出所有事件   传参移出对应事件自定义事件    on绑定事件   trigger触发事件    1.trigger  会触发默认行为        用trigger触发子元素带有命名空间的事件 父元素带有相同命名空间的事件也会被触发        用trigger触发子元素不带有命名空间的事件 父元素所有相同类型的事件都会被触发    2.triggerHandler        触发事件不会触发默认行为</code></pre><h1 id="8-事件委托"><a href="#8-事件委托" class="headerlink" title="8.事件委托"></a>8.事件委托</h1><pre><code class="hljs">delegate()方法参数:要委托监听的元素,委托监听的事件,回调函数</code></pre><h1 id="8-移入移出"><a href="#8-移入移出" class="headerlink" title="8.移入移出"></a>8.移入移出</h1><pre><code class="hljs">hover() 传入两个函数  (鼠标移入,鼠标移出)eq()  获取第n个元素 从0算起index() 获取当前元素的序号 从0算起siblings() 获取除了此元素外的其他同类元素scrall() 监听滚动事件</code></pre><h1 id="9-展开收起动画"><a href="#9-展开收起动画" class="headerlink" title="9.展开收起动画"></a>9.展开收起动画</h1><pre><code class="hljs">参数:    speed:(slow normal fast)或 表示动画时长的毫秒数值    easing:切换效果 默认是&quot;swing&quot;，可用参数&quot;linear&quot;    fn:回调函数1.slideDown() 展开2.slideUp()  收起3.slideToggle()切换4.children()   获取目标元素的所有子元素(不包含后代元素)5.stop()  停止当前元素的动画6.delay() 延迟执行动画</code></pre><h1 id="10-淡入淡出动画"><a href="#10-淡入淡出动画" class="headerlink" title="10.淡入淡出动画"></a>10.淡入淡出动画</h1><pre><code class="hljs">参数:    同slide方法1.fadeIn()   淡入2.fadeOut()  淡出3.fadeTo() 淡入/淡出到某种程度4.fadeToggle() 切换动画队列 a().b().c()....</code></pre><h1 id="11-自定义动画"><a href="#11-自定义动画" class="headerlink" title="11.自定义动画"></a>11.自定义动画</h1><pre><code class="hljs">1.animate()    参数:&#123;传入的属性都会以动画效果呈现&#125;,time,fn         &#123;传入的属性都会以动画效果呈现&#125;,time,速度,fn2.jQuery.fx.interval()  改变动画帧数  jQuery.fx.off()       关闭所有动画</code></pre><h1 id="12-添加节点"><a href="#12-添加节点" class="headerlink" title="12.添加节点"></a>12.添加节点</h1><p>内部插入<br>    1.append()  内部末尾添加<br>    2.prepend() 内部头部添加<br>        传入要添加的子元素<br>    3.appendTo()<br>    4.prependTo()<br>        与1,2相同  书写形式不同<br>        传入目标父元素<br>外部插入<br>    1.after()<br>        加到指定元素外部的紧跟之后<br>      insertAfter() 同上<br>    2.before()<br>        加到指定元素外部的紧跟之前<br>      insertBefore()同上<br>删除节点<br>    1.remove()  删除指定元素<br>    2.empty()   删除指定元素的内容,子元素 子元素自己不会被删除<br>    3.detach()  同remove()<br>替换节点<br>    1.replaceWith()<br>    2.replaceAll()<br>        new.(old)&#x2F;old.(new)<br>复制节点<br>    1.clone(false)<br>        浅拷贝   复制元素不复制事件<br>    2.clone(true)<br>     深拷贝 都复制</p>]]></content>
    
    
    <categories>
      
      <category>基础</category>
      
      <category>JQuery</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JQuery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器跨域解决方案</title>
    <link href="/jing-jiu/2020/04/07/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8/"/>
    <url>/jing-jiu/2020/04/07/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="一-同源策略"><a href="#一-同源策略" class="headerlink" title="一.同源策略"></a>一.同源策略</h1><ol><li><p>什么是同源策略？</p><p>是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。所以a.com下的JS脚本采用ajax读取b.com里面的文件数据是会报错的。 （协议，域名，端口号三者都要相同）</p></li><li><p>不受同源策略限制</p><p>1、页面中的链接，重定向以及表单提交是不会受到同源策略限制的。</p><p>2、跨域资源的引入是可以的。但是JS不能读写加载的内容。如嵌入到页面中的 <code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code>，<code>&lt;img&gt;</code>，<code>&lt;link&gt;</code>，<code>&lt;iframe&gt;</code>等。</p></li></ol><h1 id="二-跨域"><a href="#二-跨域" class="headerlink" title="二.跨域"></a>二.跨域</h1><ol><li><p>JSONP</p><p>通常为了减轻web服务器的负载，我们把JS、CSS，IMG等静态资源分离到另一台独立域名的服务器上，在html页面中再通过相应的标签从不同域名下加载静态资源，而被浏览器允许，基于此原理，我们可以通过动态创建script，再请求一个带参网址实现跨域通信。</p><p><strong>缺点:只能实现get请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>   <span class="hljs-keyword">var</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>);<br>   script.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;text/javascript&#x27;</span>;<br>   <span class="hljs-comment">// 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数</span><br>   script.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;http://www.domain2.com:8080/login?user=admin&amp;callback=handleCallback&#x27;</span>;<br>   <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(script);<br>   <span class="hljs-comment">// 回调执行函数</span><br>   <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleCallback</span>(<span class="hljs-params">res</span>) &#123;<br>       <span class="hljs-title function_">alert</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(res));<br>   &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>跨域资源共享（CORS）</p><p>1.不带cookies 设置 Access-Control-Allow-Origin</p><p>2.带cookies  设置  Access-Control-Allow-Credentials</p></li><li><p>NGINX反向代理</p><p>跨域原理： 同源策略是浏览器的安全策略，不是HTTP协议的一部分。服务器端调用HTTP接口只是使用HTTP协议，不会执行JS脚本，不需要同源策略，也就不存在跨越问题。</p><p>实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#proxy服务器</span><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">81</span>;<br>    <span class="hljs-attribute">server_name</span>  www.domain1.com;<br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span>   http://www.domain2.com:8080;  <span class="hljs-comment">#反向代理</span><br>        <span class="hljs-attribute">proxy_cookie_domain</span> www.domain2.com www.domain1.com; <span class="hljs-comment">#修改cookie里域名</span><br>        <span class="hljs-attribute">index</span>  index.html index.htm;<br>        <span class="hljs-comment"># 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span><br>        <span class="hljs-attribute">add_header</span> Access-Control-Allow-Origin http://www.domain1.com;  <span class="hljs-comment">#当前端只跨域不带cookie时，可为*</span><br>        <span class="hljs-attribute">add_header</span> Access-Control-Allow-Credentials <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br><span class="hljs-comment">// 前端开关：浏览器是否读写cookie</span><br>xhr.<span class="hljs-property">withCredentials</span> = <span class="hljs-literal">true</span>;<br><span class="hljs-comment">// 访问nginx中的代理服务器</span><br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;http://www.domain1.com:81/?user=admin&#x27;</span>, <span class="hljs-literal">true</span>);<br>xhr.<span class="hljs-title function_">send</span>();<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> server = http.<span class="hljs-title function_">createServer</span>();<br><span class="hljs-keyword">var</span> qs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;querystring&#x27;</span>);<br>server.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">var</span> params = qs.<span class="hljs-title function_">parse</span>(req.<span class="hljs-property">url</span>.<span class="hljs-title function_">substring</span>(<span class="hljs-number">2</span>));<br>    <span class="hljs-comment">// 向前台写cookie</span><br>    res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<br>        <span class="hljs-string">&#x27;Set-Cookie&#x27;</span>: <span class="hljs-string">&#x27;l=a123456;Path=/;Domain=www.domain2.com;HttpOnly&#x27;</span>   <span class="hljs-comment">// HttpOnly:脚本无法读取</span><br>    &#125;);<br>    res.<span class="hljs-title function_">write</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(params));<br>    res.<span class="hljs-title function_">end</span>();<br>&#125;);<br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&#x27;8080&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Server is running at port 8080...&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>Nodejs中间件代理跨域</p></li><li><p>WebSocket协议跨域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div&gt;user input：&lt;input type=<span class="hljs-string">&quot;text&quot;</span>&gt;&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/socket.io/2.2.0/socket.io.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> socket = <span class="hljs-title function_">io</span>(<span class="hljs-string">&#x27;http://www.domain2.com:8080&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 连接成功处理</span></span></span><br><span class="language-javascript"><span class="language-xml">socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;connect&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 监听服务端消息</span></span></span><br><span class="language-javascript"><span class="language-xml">    socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">msg</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;data from server: ---&gt; &#x27;</span> + msg); </span></span><br><span class="language-javascript"><span class="language-xml">    &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 监听服务端关闭</span></span></span><br><span class="language-javascript"><span class="language-xml">    socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;disconnect&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; </span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Server socket has closed.&#x27;</span>); </span></span><br><span class="language-javascript"><span class="language-xml">    &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;input&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">onblur</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    socket.<span class="hljs-title function_">send</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> socket = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;socket.io&#x27;</span>);<br><span class="hljs-comment">// 启http服务</span><br><span class="hljs-keyword">var</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<br>        <span class="hljs-string">&#x27;Content-type&#x27;</span>: <span class="hljs-string">&#x27;text/html&#x27;</span><br>    &#125;);<br>    res.<span class="hljs-title function_">end</span>();<br>&#125;);<br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&#x27;8080&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Server is running at port 8080...&#x27;</span>);<br><span class="hljs-comment">// 监听socket连接</span><br>socket.<span class="hljs-title function_">listen</span>(server).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;connection&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">client</span>) &#123;<br>    <span class="hljs-comment">// 接收信息</span><br>    client.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">msg</span>) &#123;<br>        client.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;hello：&#x27;</span> + msg);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;data from client: ---&gt; &#x27;</span> + msg);<br>    &#125;);<br>    <span class="hljs-comment">// 断开处理</span><br>    client.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;disconnect&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Client socket has closed.&#x27;</span>); <br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>基础</category>
      
      <category>浏览器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>跨域</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
